{
    "constants": {
        "ACTIVE": {
            "value": "0x2",
            "desc": "Objects in world that are running a script or currently physically moving.",
            "type": "integer"
        },
        "AGENT": {
            "value": "0x1",
            "desc": "Objects in world that are agents.",
            "type": "integer"
        },
        "AGENT_ALWAYS_RUN": {
            "value": "0x1000",
            "desc": "",
            "type": "integer"
        },
        "AGENT_ATTACHMENTS": {
            "value": "0x2",
            "desc": "The agent has attachments.",
            "type": "integer"
        },
        "AGENT_AUTOPILOT": {
            "value": "0x2000",
            "desc": "",
            "type": "integer"
        },
        "AGENT_AWAY": {
            "value": "0x40",
            "desc": "",
            "type": "integer"
        },
        "AGENT_BUSY": {
            "value": "0x800",
            "desc": "",
            "type": "integer"
        },
        "AGENT_BY_LEGACY_NAME": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "AGENT_BY_USERNAME": {
            "value": "0x10",
            "desc": "",
            "type": "integer"
        },
        "AGENT_CROUCHING": {
            "value": "0x400",
            "desc": "",
            "type": "integer"
        },
        "AGENT_FLYING": {
            "value": "0x1",
            "desc": "The agent is flying.",
            "type": "integer"
        },
        "AGENT_IN_AIR": {
            "value": "0x100",
            "desc": "",
            "type": "integer"
        },
        "AGENT_LIST_PARCEL": {
            "value": "0x1",
            "desc": "Agents on the same parcel where the script is running.",
            "type": "integer"
        },
        "AGENT_LIST_PARCEL_OWNER": {
            "value": "0x2",
            "desc": "Agents on any parcel in the region where the parcel owner is the same as the owner of the parcel under the scripted object.",
            "type": "integer"
        },
        "AGENT_LIST_REGION": {
            "value": "0x4",
            "desc": "All agents in the region.",
            "type": "integer"
        },
        "AGENT_MOUSELOOK": {
            "value": "0x8",
            "desc": "",
            "type": "integer"
        },
        "AGENT_ON_OBJECT": {
            "value": "0x20",
            "desc": "",
            "type": "integer"
        },
        "AGENT_SCRIPTED": {
            "value": "0x4",
            "desc": "The agent has scripted attachments.",
            "type": "integer"
        },
        "AGENT_SITTING": {
            "value": "0x10",
            "desc": "",
            "type": "integer"
        },
        "AGENT_TYPING": {
            "value": "0x200",
            "desc": "",
            "type": "integer"
        },
        "AGENT_WALKING": {
            "value": "0x80",
            "desc": "",
            "type": "integer"
        },
        "ALL_SIDES": {
            "value": "0xFFFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "ANIM_ON": {
            "value": "0x1",
            "desc": "Texture animation is on.",
            "type": "integer"
        },
        "ATTACH_AVATAR_CENTER": {
            "value": "0x28",
            "desc": "Attach to the avatar&#39;s geometric centre.",
            "type": "integer"
        },
        "ATTACH_BACK": {
            "value": "0x9",
            "desc": "Attach to the avatar&#39;s back.",
            "type": "integer"
        },
        "ATTACH_BELLY": {
            "value": "0x1C",
            "desc": "Attach to the avatar&#39;s belly.",
            "type": "integer"
        },
        "ATTACH_CHEST": {
            "value": "0x1",
            "desc": "Attach to the avatar&#39;s chest.",
            "type": "integer"
        },
        "ATTACH_CHIN": {
            "value": "0xC",
            "desc": "Attach to the avatar&#39;s chin.",
            "type": "integer"
        },
        "ATTACH_FACE_JAW": {
            "value": "0x2F",
            "desc": "Attach to the avatar&#39;s jaw.",
            "type": "integer"
        },
        "ATTACH_FACE_LEAR": {
            "value": "0x30",
            "desc": "Attach to the avatar&#39;s left ear (extended).",
            "type": "integer"
        },
        "ATTACH_FACE_LEYE": {
            "value": "0x32",
            "desc": "Attach to the avatar&#39;s left eye (extended).",
            "type": "integer"
        },
        "ATTACH_FACE_REAR": {
            "value": "0x31",
            "desc": "Attach to the avatar&#39;s right ear (extended).",
            "type": "integer"
        },
        "ATTACH_FACE_REYE": {
            "value": "0x33",
            "desc": "Attach to the avatar&#39;s right eye (extended).",
            "type": "integer"
        },
        "ATTACH_FACE_TONGUE": {
            "value": "0x34",
            "desc": "Attach to the avatar&#39;s tongue.",
            "type": "integer"
        },
        "ATTACH_GROIN": {
            "value": "0x35",
            "desc": "Attach to the avatar&#39;s groin.",
            "type": "integer"
        },
        "ATTACH_HEAD": {
            "value": "0x2",
            "desc": "Attach to the avatar&#39;s head.",
            "type": "integer"
        },
        "ATTACH_HIND_LFOOT": {
            "value": "0x36",
            "desc": "Attach to the avatar&#39;s left hind foot.",
            "type": "integer"
        },
        "ATTACH_HIND_RFOOT": {
            "value": "0x37",
            "desc": "Attach to the avatar&#39;s right hind foot.",
            "type": "integer"
        },
        "ATTACH_HUD_BOTTOM": {
            "value": "0x25",
            "desc": "",
            "type": "integer"
        },
        "ATTACH_HUD_BOTTOM_LEFT": {
            "value": "0x24",
            "desc": "",
            "type": "integer"
        },
        "ATTACH_HUD_BOTTOM_RIGHT": {
            "value": "0x26",
            "desc": "",
            "type": "integer"
        },
        "ATTACH_HUD_CENTER_1": {
            "value": "0x23",
            "desc": "",
            "type": "integer"
        },
        "ATTACH_HUD_CENTER_2": {
            "value": "0x1F",
            "desc": "",
            "type": "integer"
        },
        "ATTACH_HUD_TOP_CENTER": {
            "value": "0x21",
            "desc": "",
            "type": "integer"
        },
        "ATTACH_HUD_TOP_LEFT": {
            "value": "0x22",
            "desc": "",
            "type": "integer"
        },
        "ATTACH_HUD_TOP_RIGHT": {
            "value": "0x20",
            "desc": "",
            "type": "integer"
        },
        "ATTACH_LEAR": {
            "value": "0xD",
            "desc": "Attach to the avatar&#39;s left ear.",
            "type": "integer"
        },
        "ATTACH_LEFT_PEC": {
            "value": "0x1D",
            "desc": "Attach to the avatar&#39;s left pectoral.",
            "type": "integer"
        },
        "ATTACH_LEYE": {
            "value": "0xF",
            "desc": "Attach to the avatar&#39;s left eye.",
            "type": "integer"
        },
        "ATTACH_LFOOT": {
            "value": "0x7",
            "desc": "Attach to the avatar&#39;s left foot.",
            "type": "integer"
        },
        "ATTACH_LHAND": {
            "value": "0x5",
            "desc": "Attach to the avatar&#39;s left hand.",
            "type": "integer"
        },
        "ATTACH_LHAND_RING1": {
            "value": "0x29",
            "desc": "Attach to the avatar&#39;s left ring finger.",
            "type": "integer"
        },
        "ATTACH_LHIP": {
            "value": "0x19",
            "desc": "Attach to the avatar&#39;s left hip.",
            "type": "integer"
        },
        "ATTACH_LLARM": {
            "value": "0x15",
            "desc": "Attach to the avatar&#39;s left lower arm.",
            "type": "integer"
        },
        "ATTACH_LLLEG": {
            "value": "0x1B",
            "desc": "Attach to the avatar&#39;s lower left leg.",
            "type": "integer"
        },
        "ATTACH_LPEC": {
            "value": "0x1E",
            "desc": "Attach to the avatar&#39;s right pectoral. (Deprecated, use ATTACH_RIGHT_PEC)",
            "type": "integer"
        },
        "ATTACH_LSHOULDER": {
            "value": "0x3",
            "desc": "Attach to the avatar&#39;s left shoulder.",
            "type": "integer"
        },
        "ATTACH_LUARM": {
            "value": "0x14",
            "desc": "Attach to the avatar&#39;s left upper arm.",
            "type": "integer"
        },
        "ATTACH_LULEG": {
            "value": "0x1A",
            "desc": "Attach to the avatar&#39;s lower upper leg.",
            "type": "integer"
        },
        "ATTACH_LWING": {
            "value": "0x2D",
            "desc": "Attach to the avatar&#39;s left wing.",
            "type": "integer"
        },
        "ATTACH_MOUTH": {
            "value": "0xB",
            "desc": "Attach to the avatar&#39;s mouth.",
            "type": "integer"
        },
        "ATTACH_NECK": {
            "value": "0x27",
            "desc": "Attach to the avatar&#39;s neck.",
            "type": "integer"
        },
        "ATTACH_NOSE": {
            "value": "0x11",
            "desc": "Attach to the avatar&#39;s nose.",
            "type": "integer"
        },
        "ATTACH_PELVIS": {
            "value": "0xA",
            "desc": "Attach to the avatar&#39;s pelvis.",
            "type": "integer"
        },
        "ATTACH_REAR": {
            "value": "0xE",
            "desc": "Attach to the avatar&#39;s right ear.",
            "type": "integer"
        },
        "ATTACH_REYE": {
            "value": "0x10",
            "desc": "Attach to the avatar&#39;s right eye.",
            "type": "integer"
        },
        "ATTACH_RFOOT": {
            "value": "0x8",
            "desc": "Attach to the avatar&#39;s right foot.",
            "type": "integer"
        },
        "ATTACH_RHAND": {
            "value": "0x6",
            "desc": "Attach to the avatar&#39;s right hand.",
            "type": "integer"
        },
        "ATTACH_RHAND_RING1": {
            "value": "0x2A",
            "desc": "Attach to the avatar&#39;s right ring finger.",
            "type": "integer"
        },
        "ATTACH_RHIP": {
            "value": "0x16",
            "desc": "Attach to the avatar&#39;s right hip.",
            "type": "integer"
        },
        "ATTACH_RIGHT_PEC": {
            "value": "0x1E",
            "desc": "Attach to the avatar&#39;s right pectoral.",
            "type": "integer"
        },
        "ATTACH_RLARM": {
            "value": "0x13",
            "desc": "Attach to the avatar&#39;s right lower arm.",
            "type": "integer"
        },
        "ATTACH_RLLEG": {
            "value": "0x18",
            "desc": "Attach to the avatar&#39;s right lower leg.",
            "type": "integer"
        },
        "ATTACH_RPEC": {
            "value": "0x1D",
            "desc": "Attach to the avatar&#39;s left pectoral. (deprecated, use ATTACH_LEFT_PEC)",
            "type": "integer"
        },
        "ATTACH_RSHOULDER": {
            "value": "0x4",
            "desc": "Attach to the avatar&#39;s right shoulder.",
            "type": "integer"
        },
        "ATTACH_RUARM": {
            "value": "0x12",
            "desc": "Attach to the avatar&#39;s right upper arm.",
            "type": "integer"
        },
        "ATTACH_RULEG": {
            "value": "0x17",
            "desc": "Attach to the avatar&#39;s right upper leg.",
            "type": "integer"
        },
        "ATTACH_RWING": {
            "value": "0x2E",
            "desc": "Attach to the avatar&#39;s right wing.",
            "type": "integer"
        },
        "ATTACH_TAIL_BASE": {
            "value": "0x2B",
            "desc": "Attach to the avatar&#39;s tail base.",
            "type": "integer"
        },
        "ATTACH_TAIL_TIP": {
            "value": "0x2C",
            "desc": "Attach to the avatar&#39;s tail tip.",
            "type": "integer"
        },
        "AVOID_CHARACTERS": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "AVOID_DYNAMIC_OBSTACLES": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "AVOID_NONE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_ACTIVE": {
            "value": "0xC",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_BEHINDNESS_ANGLE": {
            "value": "0x8",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_BEHINDNESS_LAG": {
            "value": "0x9",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_DISTANCE": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_FOCUS": {
            "value": "0x11",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_FOCUS_LAG": {
            "value": "0x6",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_FOCUS_LOCKED": {
            "value": "0x16",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_FOCUS_OFFSET": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_FOCUS_THRESHOLD": {
            "value": "0xB",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_PITCH": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_POSITION": {
            "value": "0xD",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_POSITION_LAG": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_POSITION_LOCKED": {
            "value": "0x15",
            "desc": "",
            "type": "integer"
        },
        "CAMERA_POSITION_THRESHOLD": {
            "value": "0xA",
            "desc": "",
            "type": "integer"
        },
        "CHANGED_ALLOWED_DROP": {
            "value": "0x40",
            "desc": "The object inventory has changed because an item was added through the llAllowInventoryDrop interface.",
            "type": "integer"
        },
        "CHANGED_COLOR": {
            "value": "0x2",
            "desc": "The object color has changed.",
            "type": "integer"
        },
        "CHANGED_INVENTORY": {
            "value": "0x1",
            "desc": "The object inventory has changed.",
            "type": "integer"
        },
        "CHANGED_LINK": {
            "value": "0x20",
            "desc": "The object has linked or its links were broken.",
            "type": "integer"
        },
        "CHANGED_MEDIA": {
            "value": "0x800",
            "desc": "",
            "type": "integer"
        },
        "CHANGED_OWNER": {
            "value": "0x80",
            "desc": "",
            "type": "integer"
        },
        "CHANGED_REGION": {
            "value": "0x100",
            "desc": "",
            "type": "integer"
        },
        "CHANGED_REGION_START": {
            "value": "0x400",
            "desc": "",
            "type": "integer"
        },
        "CHANGED_SCALE": {
            "value": "0x8",
            "desc": "The object scale (size) has changed.",
            "type": "integer"
        },
        "CHANGED_SHAPE": {
            "value": "0x4",
            "desc": "The object base shape has changed, e.g., a box to a cylinder.",
            "type": "integer"
        },
        "CHANGED_TELEPORT": {
            "value": "0x200",
            "desc": "",
            "type": "integer"
        },
        "CHANGED_TEXTURE": {
            "value": "0x10",
            "desc": "The texture offset, scale rotation, or simply the object texture has changed.",
            "type": "integer"
        },
        "CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES": {
            "value": "0xE",
            "desc": "If set to false, character will not attempt to catch up on lost time when pathfinding performance is low, potentially providing more reliable movement (albeit while potentially appearing to be more stuttery). Default is true to match pre-existing behavior.",
            "type": "integer"
        },
        "CHARACTER_AVOIDANCE_MODE": {
            "value": "0x5",
            "desc": "Allows you to specify that a character should not try to avoid other characters, should not try to avoid dynamic obstacles (relatively fast moving objects and avatars), or both.",
            "type": "integer"
        },
        "CHARACTER_CMD_JUMP": {
            "value": "0x1",
            "desc": "Makes the character jump. Requires an additional parameter, the height to jump, between 0.1m and 2.0m. This must be provided as the first element of the llExecCharacterCmd option list.",
            "type": "integer"
        },
        "CHARACTER_CMD_SMOOTH_STOP": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "CHARACTER_CMD_STOP": {
            "value": "0x0",
            "desc": "Stops any current pathfinding operation.",
            "type": "integer"
        },
        "CHARACTER_DESIRED_SPEED": {
            "value": "0x1",
            "desc": "Speed of pursuit in meters per second.",
            "type": "integer"
        },
        "CHARACTER_DESIRED_TURN_SPEED": {
            "value": "0xC",
            "desc": "The character&#39;s maximum speed while turning about the Z axis. - Note that this is only loosely enforced.",
            "type": "integer"
        },
        "CHARACTER_LENGTH": {
            "value": "0x3",
            "desc": "Set collision capsule length - cannot be less than two times the radius.",
            "type": "integer"
        },
        "CHARACTER_MAX_ACCEL": {
            "value": "0x8",
            "desc": "The character&#39;s maximum acceleration rate.",
            "type": "integer"
        },
        "CHARACTER_MAX_DECEL": {
            "value": "0x9",
            "desc": "The character&#39;s maximum deceleration rate.",
            "type": "integer"
        },
        "CHARACTER_MAX_SPEED": {
            "value": "0xD",
            "desc": "The character&#39;s maximum speed.",
            "type": "integer"
        },
        "CHARACTER_MAX_TURN_RADIUS": {
            "value": "0xA",
            "desc": "The character&#39;s turn radius when travelling at CHARACTER_MAX_TURN_SPEED.",
            "type": "integer"
        },
        "CHARACTER_ORIENTATION": {
            "value": "0x4",
            "desc": "Valid options are: VERTICAL, HORIZONTAL.",
            "type": "integer"
        },
        "CHARACTER_RADIUS": {
            "value": "0x2",
            "desc": "Set collision capsule radius.",
            "type": "integer"
        },
        "CHARACTER_STAY_WITHIN_PARCEL": {
            "value": "0xF",
            "desc": "Determines whether a character can leave its starting parcel.\\nTakes a boolean parameter. If TRUE, the character cannot voluntarilly leave the parcel, but can return to it.",
            "type": "integer"
        },
        "CHARACTER_TYPE": {
            "value": "0x6",
            "desc": "Specifies which walk-ability coefficient will be used by this character.",
            "type": "integer"
        },
        "CHARACTER_TYPE_A": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "CHARACTER_TYPE_B": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "CHARACTER_TYPE_C": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "CHARACTER_TYPE_D": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "CHARACTER_TYPE_NONE": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "CLICK_ACTION_BUY": {
            "value": "0x2",
            "desc": "When the prim is clicked, the buy dialog is opened.",
            "type": "integer"
        },
        "CLICK_ACTION_DISABLED": {
            "value": "0x8",
            "desc": "No click action. No touches detected or passed.",
            "type": "integer"
        },
        "CLICK_ACTION_NONE": {
            "value": "0x0",
            "desc": "Performs the default action: when the prim is clicked, touch events are triggered.",
            "type": "integer"
        },
        "CLICK_ACTION_OPEN": {
            "value": "0x4",
            "desc": "When the prim is clicked, the object inventory dialog is opened.",
            "type": "integer"
        },
        "CLICK_ACTION_OPEN_MEDIA": {
            "value": "0x6",
            "desc": "When the prim is touched, the web media dialog is opened.",
            "type": "integer"
        },
        "CLICK_ACTION_PAY": {
            "value": "0x3",
            "desc": "When the prim is clicked, the pay dialog is opened.",
            "type": "integer"
        },
        "CLICK_ACTION_PLAY": {
            "value": "0x5",
            "desc": "When the prim is clicked, html-on-a-prim is enabled?",
            "type": "integer"
        },
        "CLICK_ACTION_SIT": {
            "value": "0x1",
            "desc": "When the prim is clicked, the avatar sits upon it.",
            "type": "integer"
        },
        "CLICK_ACTION_TOUCH": {
            "value": "0x0",
            "desc": "When the prim is clicked, touch events are triggered.",
            "type": "integer"
        },
        "CLICK_ACTION_ZOOM": {
            "value": "0x7",
            "desc": "Zoom in on object when clicked.",
            "type": "integer"
        },
        "CONTENT_TYPE_ATOM": {
            "value": "0x4",
            "desc": "&#34;application/atom+xml&#34;",
            "type": "integer"
        },
        "CONTENT_TYPE_FORM": {
            "value": "0x7",
            "desc": "&#34;application/x-www-form-urlencoded&#34;",
            "type": "integer"
        },
        "CONTENT_TYPE_HTML": {
            "value": "0x1",
            "desc": "&#34;text/html&#34;, only valid for embedded browsers on content owned by the person viewing. Falls back to &#34;text/plain&#34; otherwise.",
            "type": "integer"
        },
        "CONTENT_TYPE_JSON": {
            "value": "0x5",
            "desc": "&#34;application/json&#34;",
            "type": "integer"
        },
        "CONTENT_TYPE_LLSD": {
            "value": "0x6",
            "desc": "&#34;application/llsd+xml&#34;",
            "type": "integer"
        },
        "CONTENT_TYPE_RSS": {
            "value": "0x8",
            "desc": "&#34;application/rss+xml&#34;",
            "type": "integer"
        },
        "CONTENT_TYPE_TEXT": {
            "value": "0x0",
            "desc": "&#34;text/plain&#34;",
            "type": "integer"
        },
        "CONTENT_TYPE_XHTML": {
            "value": "0x3",
            "desc": "&#34;application/xhtml+xml&#34;",
            "type": "integer"
        },
        "CONTENT_TYPE_XML": {
            "value": "0x2",
            "desc": "&#34;application/xml&#34;",
            "type": "integer"
        },
        "CONTROL_BACK": {
            "value": "0x2",
            "desc": "Test for the avatar move back control.",
            "type": "integer"
        },
        "CONTROL_DOWN": {
            "value": "0x20",
            "desc": "Test for the avatar move down control.",
            "type": "integer"
        },
        "CONTROL_FWD": {
            "value": "0x1",
            "desc": "Test for the avatar move forward control.",
            "type": "integer"
        },
        "CONTROL_LBUTTON": {
            "value": "0x10000000",
            "desc": "Test for the avatar left button control.",
            "type": "integer"
        },
        "CONTROL_LEFT": {
            "value": "0x4",
            "desc": "Test for the avatar move left control.",
            "type": "integer"
        },
        "CONTROL_ML_LBUTTON": {
            "value": "0x40000000",
            "desc": "Test for the avatar left button control while in mouse look.",
            "type": "integer"
        },
        "CONTROL_RIGHT": {
            "value": "0x8",
            "desc": "Test for the avatar move right control.",
            "type": "integer"
        },
        "CONTROL_ROT_LEFT": {
            "value": "0x100",
            "desc": "Test for the avatar rotate left control.",
            "type": "integer"
        },
        "CONTROL_ROT_RIGHT": {
            "value": "0x200",
            "desc": "Test for the avatar rotate right control.",
            "type": "integer"
        },
        "CONTROL_UP": {
            "value": "0x10",
            "desc": "Test for the avatar move up control.",
            "type": "integer"
        },
        "DATA_BORN": {
            "value": "0x3",
            "desc": "The date the agent was born, returned in ISO 8601 format of YYYY-MM-DD.",
            "type": "integer"
        },
        "DATA_NAME": {
            "value": "0x2",
            "desc": "The name of the agent.",
            "type": "integer"
        },
        "DATA_ONLINE": {
            "value": "0x1",
            "desc": "TRUE for online, FALSE for offline.",
            "type": "integer"
        },
        "DATA_PAYINFO": {
            "value": "0x8",
            "desc": "",
            "type": "integer"
        },
        "DATA_RATING": {
            "value": "0x4",
            "desc": "Returns the agent ratings as a comma separated string of six integers. They are:\n\t\t\t1) Positive rated behaviour\n\t\t\t2) Negative rated behaviour\n\t\t\t3) Positive rated appearance\n\t\t\t4) Negative rated appearance\n\t\t\t5) Positive rated building\n\t\t\t6) Negative rated building",
            "type": "integer"
        },
        "DATA_SIM_POS": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "DATA_SIM_RATING": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "DATA_SIM_STATUS": {
            "value": "0x6",
            "desc": "",
            "type": "integer"
        },
        "DEBUG_CHANNEL": {
            "value": "0x7FFFFFFF",
            "desc": "DEBUG_CHANNEL is an integer constant that, when passed to llSay, llWhisper, or llShout as a channel parameter, will print text to the Script Warning/Error Window.",
            "type": "integer"
        },
        "DEG_TO_RAD": {
            "value": "0.01745329300000000166681602",
            "desc": "0.017453293 - Number of radians per degree.\n\t\t\tYou can use this to convert degrees to radians by multiplying the degrees by this number.",
            "type": "float"
        },
        "DENSITY": {
            "value": "0x1",
            "desc": "Used with llSetPhysicsMaterial to enable the density value. Must be between 1.0 and 22587.0 (in Kg/m^3 -- see if you can figure out what 22587 represents)",
            "type": "integer"
        },
        "ENVIRONMENT_DAYINFO": {
            "value": "0xC8",
            "desc": "Day length, offset and progression.",
            "type": "integer"
        },
        "ENV_INVALID_AGENT": {
            "value": "0xFFFFFFFC",
            "desc": "Could not find agent with the specified ID",
            "type": "integer"
        },
        "ENV_INVALID_RULE": {
            "value": "0xFFFFFFFC",
            "desc": "Attempted to change an unknown property.",
            "type": "integer"
        },
        "ENV_NOT_EXPERIENCE": {
            "value": "0xFFFFFFFF",
            "desc": "Attempt to change environments outside an experience.",
            "type": "integer"
        },
        "ENV_NO_ENVIRONMENT": {
            "value": "0xFFFFFFFD",
            "desc": "Could not find environmental settings in object inventory.",
            "type": "integer"
        },
        "ENV_NO_EXPERIENCE_LAND": {
            "value": "0xFFFFFFF9",
            "desc": "The experience has not been enabled on this land.",
            "type": "integer"
        },
        "ENV_NO_EXPERIENCE_PERMISSION": {
            "value": "0xFFFFFFFE",
            "desc": "Agent has not granted permission to change environments.",
            "type": "integer"
        },
        "ENV_NO_PERMISSIONS": {
            "value": "0xFFFFFFF7",
            "desc": "Script does not have permission to modify environment.",
            "type": "integer"
        },
        "ENV_THROTTLE": {
            "value": "0xFFFFFFF8",
            "desc": "Could not validate values for environment.",
            "type": "integer"
        },
        "ENV_VALIDATION_FAIL": {
            "value": "0xFFFFFFFC",
            "desc": "Could not validate values for environment.",
            "type": "integer"
        },
        "EOF": {
            "value": "\"\n\n\n\"",
            "desc": "Indicates the last line of a notecard was read.",
            "type": "string"
        },
        "ERR_GENERIC": {
            "value": "0xFFFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "ERR_MALFORMED_PARAMS": {
            "value": "0xFFFFFFFD",
            "desc": "",
            "type": "integer"
        },
        "ERR_PARCEL_PERMISSIONS": {
            "value": "0xFFFFFFFE",
            "desc": "",
            "type": "integer"
        },
        "ERR_RUNTIME_PERMISSIONS": {
            "value": "0xFFFFFFFC",
            "desc": "",
            "type": "integer"
        },
        "ERR_THROTTLED": {
            "value": "0xFFFFFFFB",
            "desc": "",
            "type": "integer"
        },
        "ESTATE_ACCESS_ALLOWED_AGENT_ADD": {
            "value": "0x4",
            "desc": "Add the agent to this estate&#39;s Allowed Residents list.",
            "type": "integer"
        },
        "ESTATE_ACCESS_ALLOWED_AGENT_REMOVE": {
            "value": "0x8",
            "desc": "Remove the agent from this estate&#39;s Allowed Residents list.",
            "type": "integer"
        },
        "ESTATE_ACCESS_ALLOWED_GROUP_ADD": {
            "value": "0x10",
            "desc": "Add the group to this estate&#39;s Allowed groups list.",
            "type": "integer"
        },
        "ESTATE_ACCESS_ALLOWED_GROUP_REMOVE": {
            "value": "0x20",
            "desc": "Remove the group from this estate&#39;s Allowed groups list.",
            "type": "integer"
        },
        "ESTATE_ACCESS_BANNED_AGENT_ADD": {
            "value": "0x40",
            "desc": "Add the agent to this estate&#39;s Banned residents list.",
            "type": "integer"
        },
        "ESTATE_ACCESS_BANNED_AGENT_REMOVE": {
            "value": "0x80",
            "desc": "Remove the agent from this estate&#39;s Banned residents list.",
            "type": "integer"
        },
        "FALSE": {
            "value": "0x0",
            "desc": "An integer constant for boolean comparisons. Has the value &#39;0&#39;.",
            "type": "integer"
        },
        "FORCE_DIRECT_PATH": {
            "value": "0x1",
            "desc": "Makes character navigate in a straight line toward position. May be set to TRUE or FALSE.",
            "type": "integer"
        },
        "FRICTION": {
            "value": "0x2",
            "desc": "Used with llSetPhysicsMaterial to enable the friction value. Must be between 0.0 and 255.0",
            "type": "integer"
        },
        "GCNP_RADIUS": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "GCNP_STATIC": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "GRAVITY_MULTIPLIER": {
            "value": "0x8",
            "desc": "Used with llSetPhysicsMaterial to enable the gravity multiplier value. Must be between -1.0 and +28.0",
            "type": "integer"
        },
        "HORIZONTAL": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "HTTP_ACCEPT": {
            "value": "0x8",
            "desc": "Provide a string value to be included in the HTTP\n            accepts header value. This replaces the default Second Life HTTP accepts header.",
            "type": "integer"
        },
        "HTTP_BODY_MAXLENGTH": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "HTTP_BODY_TRUNCATED": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "HTTP_CUSTOM_HEADER": {
            "value": "0x5",
            "desc": "Add an extra custom HTTP header to the request. The first string is the name of the parameter to change, e.g. &#34;Pragma&#34;, and the second string is the value, e.g. &#34;no-cache&#34;. Up to 8 custom headers may be configured per request. Note that certain headers, such as the default headers, are blocked for security reasons.",
            "type": "integer"
        },
        "HTTP_EXTENDED_ERROR": {
            "value": "0x9",
            "desc": "Report extended error information through http_response event.",
            "type": "integer"
        },
        "HTTP_METHOD": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "HTTP_MIMETYPE": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "HTTP_PRAGMA_NO_CACHE": {
            "value": "0x6",
            "desc": "Allows enabling/disbling of the &#34;Pragma: no-cache&#34; header.\\nUsage: [HTTP_PRAGMA_NO_CACHE, integer SendHeader]. When SendHeader is TRUE, the &#34;Pragma: no-cache&#34; header is sent by the script. This matches the default behavior. When SendHeader is FALSE, no &#34;Pragma&#34; header is sent by the script.",
            "type": "integer"
        },
        "HTTP_USER_AGENT": {
            "value": "0x7",
            "desc": "Provide a string value to be included in the HTTP\n            User-Agent header value. This is appended to the default value.",
            "type": "integer"
        },
        "HTTP_VERBOSE_THROTTLE": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "HTTP_VERIFY_CERT": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "IMG_USE_BAKED_AUX1": {
            "value": "\"9742065b-19b5-297c-858a-29711d539043\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_AUX2": {
            "value": "\"03642e83-2bd1-4eb9-34b4-4c47ed586d2d\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_AUX3": {
            "value": "\"edd51b77-fc10-ce7a-4b3d-011dfc349e4f\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_EYES": {
            "value": "\"52cc6bb6-2ee5-e632-d3ad-50197b1dcb8a\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_HAIR": {
            "value": "\"09aac1fb-6bce-0bee-7d44-caac6dbb6c63\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_HEAD": {
            "value": "\"5a9f4a74-30f2-821c-b88d-70499d3e7183\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_LEFTARM": {
            "value": "\"ff62763f-d60a-9855-890b-0c96f8f8cd98\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_LEFTLEG": {
            "value": "\"8e915e25-31d1-cc95-ae08-d58a47488251\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_LOWER": {
            "value": "\"24daea5f-0539-cfcf-047f-fbc40b2786ba\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_SKIRT": {
            "value": "\"43529ce8-7faa-ad92-165a-bc4078371687\"",
            "desc": "",
            "type": "string"
        },
        "IMG_USE_BAKED_UPPER": {
            "value": "\"ae2de45c-d252-50b8-5c6e-19f39ce79317\"",
            "desc": "",
            "type": "string"
        },
        "INVENTORY_ALL": {
            "value": "0xFFFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_ANIMATION": {
            "value": "0x14",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_BODYPART": {
            "value": "0xD",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_CLOTHING": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_GESTURE": {
            "value": "0x15",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_LANDMARK": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_NONE": {
            "value": "0xFFFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_NOTECARD": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_OBJECT": {
            "value": "0x6",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_SCRIPT": {
            "value": "0xA",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_SETTING": {
            "value": "0x38",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_SOUND": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "INVENTORY_TEXTURE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "JSON_APPEND": {
            "value": "0xFFFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "JSON_ARRAY": {
            "value": "\"﷒\"",
            "desc": "",
            "type": "string"
        },
        "JSON_DELETE": {
            "value": "\"﷘\"",
            "desc": "",
            "type": "string"
        },
        "JSON_FALSE": {
            "value": "\"﷗\"",
            "desc": "",
            "type": "string"
        },
        "JSON_INVALID": {
            "value": "\"﷐\"",
            "desc": "",
            "type": "string"
        },
        "JSON_NULL": {
            "value": "\"﷕\"",
            "desc": "",
            "type": "string"
        },
        "JSON_NUMBER": {
            "value": "\"﷓\"",
            "desc": "",
            "type": "string"
        },
        "JSON_OBJECT": {
            "value": "\"﷑\"",
            "desc": "",
            "type": "string"
        },
        "JSON_STRING": {
            "value": "\"﷔\"",
            "desc": "",
            "type": "string"
        },
        "JSON_TRUE": {
            "value": "\"﷖\"",
            "desc": "",
            "type": "string"
        },
        "KFM_CMD_PAUSE": {
            "value": "0x2",
            "desc": "For use with KFM_COMMAND.",
            "type": "integer"
        },
        "KFM_CMD_PLAY": {
            "value": "0x0",
            "desc": "For use with KFM_COMMAND.",
            "type": "integer"
        },
        "KFM_CMD_STOP": {
            "value": "0x1",
            "desc": "For use with KFM_COMMAND.",
            "type": "integer"
        },
        "KFM_COMMAND": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "KFM_DATA": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "KFM_FORWARD": {
            "value": "0x0",
            "desc": "For use with KFM_MODE.",
            "type": "integer"
        },
        "KFM_LOOP": {
            "value": "0x1",
            "desc": "For use with KFM_MODE.",
            "type": "integer"
        },
        "KFM_MODE": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "KFM_PING_PONG": {
            "value": "0x2",
            "desc": "For use with KFM_MODE.",
            "type": "integer"
        },
        "KFM_REVERSE": {
            "value": "0x3",
            "desc": "For use with KFM_MODE.",
            "type": "integer"
        },
        "KFM_ROTATION": {
            "value": "0x1",
            "desc": "For use with KFM_DATA.",
            "type": "integer"
        },
        "KFM_TRANSLATION": {
            "value": "0x2",
            "desc": "For use with KFM_DATA.",
            "type": "integer"
        },
        "LAND_LARGE_BRUSH": {
            "value": "0x3",
            "desc": "Use a large brush size.\\nNOTE: This value is incorrect, a large brush should be 2.",
            "type": "integer"
        },
        "LAND_LEVEL": {
            "value": "0x0",
            "desc": "Action to level the land.",
            "type": "integer"
        },
        "LAND_LOWER": {
            "value": "0x2",
            "desc": "Action to lower the land.",
            "type": "integer"
        },
        "LAND_MEDIUM_BRUSH": {
            "value": "0x2",
            "desc": "Use a medium brush size.\\nNOTE: This value is incorrect, a medium brush should be 1.",
            "type": "integer"
        },
        "LAND_NOISE": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "LAND_RAISE": {
            "value": "0x1",
            "desc": "Action to raise the land.",
            "type": "integer"
        },
        "LAND_REVERT": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "LAND_SMALL_BRUSH": {
            "value": "0x1",
            "desc": "Use a small brush size.\\nNOTE: This value is incorrect, a small brush should be 0.",
            "type": "integer"
        },
        "LAND_SMOOTH": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "LINKSETDATA_DELETE": {
            "value": "0x2",
            "desc": "A name:value pair has been removed from the linkset datastore.",
            "type": "integer"
        },
        "LINKSETDATA_EMEMORY": {
            "value": "0x1",
            "desc": "A name:value pair was too large to write to the linkset datastore.",
            "type": "integer"
        },
        "LINKSETDATA_ENOKEY": {
            "value": "0x2",
            "desc": "The key supplied was empty.",
            "type": "integer"
        },
        "LINKSETDATA_EPROTECTED": {
            "value": "0x3",
            "desc": "The name:value pair has been protected from overwrite in the linkset datastore.",
            "type": "integer"
        },
        "LINKSETDATA_NOTFOUND": {
            "value": "0x4",
            "desc": "The named key was not found in the datastore.",
            "type": "integer"
        },
        "LINKSETDATA_NOUPDATE": {
            "value": "0x5",
            "desc": "The value written to a name in the keystore is the same as the value already there.",
            "type": "integer"
        },
        "LINKSETDATA_OK": {
            "value": "0x0",
            "desc": "The name:value pair was written to the datastore.",
            "type": "integer"
        },
        "LINKSETDATA_RESET": {
            "value": "0x0",
            "desc": "The linkset datastore has been reset.",
            "type": "integer"
        },
        "LINKSETDATA_UPDATE": {
            "value": "0x1",
            "desc": "A name:value pair in the linkset datastore has been changed or created.",
            "type": "integer"
        },
        "LINK_ALL_CHILDREN": {
            "value": "0xFFFFFFFD",
            "desc": "This targets every object except the root in the linked set.",
            "type": "integer"
        },
        "LINK_ALL_OTHERS": {
            "value": "0xFFFFFFFE",
            "desc": "This targets every object in the linked set except the object with the script.",
            "type": "integer"
        },
        "LINK_ROOT": {
            "value": "0x1",
            "desc": "This targets the root of the linked set.",
            "type": "integer"
        },
        "LINK_SET": {
            "value": "0xFFFFFFFF",
            "desc": "This targets every object in the linked set.",
            "type": "integer"
        },
        "LINK_THIS": {
            "value": "0xFFFFFFFC",
            "desc": "The link number of the prim containing the script.",
            "type": "integer"
        },
        "LIST_STAT_GEOMETRIC_MEAN": {
            "value": "0x9",
            "desc": "",
            "type": "integer"
        },
        "LIST_STAT_MAX": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "LIST_STAT_MEAN": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "LIST_STAT_MEDIAN": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "LIST_STAT_MIN": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "LIST_STAT_NUM_COUNT": {
            "value": "0x8",
            "desc": "",
            "type": "integer"
        },
        "LIST_STAT_RANGE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "LIST_STAT_STD_DEV": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "LIST_STAT_SUM": {
            "value": "0x6",
            "desc": "",
            "type": "integer"
        },
        "LIST_STAT_SUM_SQUARES": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "LOOP": {
            "value": "0x2",
            "desc": "Loop the texture animation.",
            "type": "integer"
        },
        "MASK_BASE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "MASK_EVERYONE": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "MASK_GROUP": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "MASK_NEXT": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "MASK_OWNER": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "NULL_KEY": {
            "value": "\"00000000-0000-0000-0000-000000000000\"",
            "desc": "",
            "type": "string"
        },
        "OBJECT_ACCOUNT_LEVEL": {
            "value": "0x29",
            "desc": "Retrieves the account level of an avatar.\\nReturns 0 when the avatar has a basic account,\\n 1 when the avatar has a premium account,\\n 10 when the avatar has a premium plus account,\\n or -1 if the object is not an avatar.",
            "type": "integer"
        },
        "OBJECT_ANIMATED_COUNT": {
            "value": "0x27",
            "desc": "This is a flag used with llGetObjectDetails to get the number of associated animated objects",
            "type": "integer"
        },
        "OBJECT_ANIMATED_SLOTS_AVAILABLE": {
            "value": "0x28",
            "desc": "This is a flag used with llGetObjectDetails to get the number of additional animated object attachments allowed.",
            "type": "integer"
        },
        "OBJECT_ATTACHED_POINT": {
            "value": "0x13",
            "desc": "Gets the attachment point to which the object is attached.\\nReturns 0 if the object is not an attachment (or is an avatar, etc).",
            "type": "integer"
        },
        "OBJECT_ATTACHED_SLOTS_AVAILABLE": {
            "value": "0x23",
            "desc": "Returns the number of attachment slots available.\\nReturns 0 if the object is not an avatar or none are available.",
            "type": "integer"
        },
        "OBJECT_BODY_SHAPE_TYPE": {
            "value": "0x1A",
            "desc": "This is a flag used with llGetObjectDetails to get the body type of the avatar, based on shape data.\\nIf no data is available, -1.0 is returned.\\nThis is normally between 0 and 1.0, with 0.5 and larger considered &#39;male&#39;",
            "type": "integer"
        },
        "OBJECT_CHARACTER_TIME": {
            "value": "0x11",
            "desc": "Units in seconds",
            "type": "integer"
        },
        "OBJECT_CLICK_ACTION": {
            "value": "0x1C",
            "desc": "This is a flag used with llGetObjectDetails to get the click action.\\nThe default is 0",
            "type": "integer"
        },
        "OBJECT_CREATION_TIME": {
            "value": "0x24",
            "desc": "This is a flag used with llGetObjectDetails to get the time this object was created",
            "type": "integer"
        },
        "OBJECT_CREATOR": {
            "value": "0x8",
            "desc": "Gets the object&#39;s creator key. If id is an avatar, a NULL_KEY is returned.",
            "type": "integer"
        },
        "OBJECT_DESC": {
            "value": "0x2",
            "desc": "Gets the object&#39;s description. If id is an avatar, an empty string is returned.",
            "type": "integer"
        },
        "OBJECT_GROUP": {
            "value": "0x7",
            "desc": "Gets the prims&#39;s group key. If id is an avatar, a NULL_KEY is returned.",
            "type": "integer"
        },
        "OBJECT_GROUP_TAG": {
            "value": "0x21",
            "desc": "Gets the agent&#39;s current group role tag. If id is an object, an empty is returned.",
            "type": "integer"
        },
        "OBJECT_HOVER_HEIGHT": {
            "value": "0x19",
            "desc": "This is a flag used with llGetObjectDetails to get hover height of the avatar\\nIf no data is available, 0.0 is returned.",
            "type": "integer"
        },
        "OBJECT_LAST_OWNER_ID": {
            "value": "0x1B",
            "desc": "Gets the object&#39;s last owner ID.",
            "type": "integer"
        },
        "OBJECT_LINK_NUMBER": {
            "value": "0x2E",
            "desc": "Gets the object&#39;s link number or 0 if unlinked.",
            "type": "integer"
        },
        "OBJECT_MASS": {
            "value": "0x2B",
            "desc": "Get the object&#39;s mass",
            "type": "integer"
        },
        "OBJECT_MATERIAL": {
            "value": "0x2A",
            "desc": "Get an object&#39;s material setting.",
            "type": "integer"
        },
        "OBJECT_NAME": {
            "value": "0x1",
            "desc": "Gets the object&#39;s name.",
            "type": "integer"
        },
        "OBJECT_OMEGA": {
            "value": "0x1D",
            "desc": "Gets an object&#39;s angular velocity.",
            "type": "integer"
        },
        "OBJECT_OWNER": {
            "value": "0x6",
            "desc": "Gets an object&#39;s owner&#39;s key. If id is group owned, a NULL_KEY is returned.",
            "type": "integer"
        },
        "OBJECT_PATHFINDING_TYPE": {
            "value": "0x14",
            "desc": "Returns the pathfinding setting of any object in the region. It returns an integer matching one of the OPT_* constants.",
            "type": "integer"
        },
        "OBJECT_PHANTOM": {
            "value": "0x16",
            "desc": "Returns boolean, detailing if phantom is enabled or disabled on the object.\\nIf id is an avatar or attachment, 0 is returned.",
            "type": "integer"
        },
        "OBJECT_PHYSICS": {
            "value": "0x15",
            "desc": "Returns boolean, detailing if physics is enabled or disabled on the object.\\nIf id is an avatar or attachment, 0 is returned.",
            "type": "integer"
        },
        "OBJECT_PHYSICS_COST": {
            "value": "0x10",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_POS": {
            "value": "0x3",
            "desc": "Gets the object&#39;s position in region coordinates.",
            "type": "integer"
        },
        "OBJECT_PRIM_COUNT": {
            "value": "0x1E",
            "desc": "Gets the prim count of the object.  The script and target object  must be owned by the same owner",
            "type": "integer"
        },
        "OBJECT_PRIM_EQUIVALENCE": {
            "value": "0xD",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_RENDER_WEIGHT": {
            "value": "0x18",
            "desc": "This is a flag used with llGetObjectDetails to get the Avatar_Rendering_Cost of an avatar, based on values reported by nearby viewers.\\nIf no data is available, -1 is returned.\\nThe maximum render weight stored by the simulator is 500000. When called against an object, 0 is returned.",
            "type": "integer"
        },
        "OBJECT_RETURN_PARCEL": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_RETURN_PARCEL_OWNER": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_RETURN_REGION": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_REZZER_KEY": {
            "value": "0x20",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_REZ_TIME": {
            "value": "0x2D",
            "desc": "Get the time when an object was rezzed.",
            "type": "integer"
        },
        "OBJECT_ROOT": {
            "value": "0x12",
            "desc": "Gets the id of the root prim of the object requested.\\nIf id is an avatar, return the id of the root prim of the linkset the avatar is sitting on (or the avatar&#39;s own id if the avatar is not sitting on an object within the region).",
            "type": "integer"
        },
        "OBJECT_ROT": {
            "value": "0x4",
            "desc": "Gets the object&#39;s rotation.",
            "type": "integer"
        },
        "OBJECT_RUNNING_SCRIPT_COUNT": {
            "value": "0x9",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_SCALE": {
            "value": "0x2F",
            "desc": "Gets the object&#39;s size.",
            "type": "integer"
        },
        "OBJECT_SCRIPT_MEMORY": {
            "value": "0xB",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_SCRIPT_TIME": {
            "value": "0xC",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_SELECT_COUNT": {
            "value": "0x25",
            "desc": "This is a flag used with llGetObjectDetails to get the number of avatars selecting any part of the object",
            "type": "integer"
        },
        "OBJECT_SERVER_COST": {
            "value": "0xE",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_SIT_COUNT": {
            "value": "0x26",
            "desc": "This is a flag used with llGetObjectDetails to get the number of avatars sitting on the object",
            "type": "integer"
        },
        "OBJECT_STREAMING_COST": {
            "value": "0xF",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_TEMP_ATTACHED": {
            "value": "0x22",
            "desc": "Returns boolean, indicating if object is a temp attachment.",
            "type": "integer"
        },
        "OBJECT_TEMP_ON_REZ": {
            "value": "0x17",
            "desc": "Returns boolean, detailing if temporary is enabled or disabled on the object.",
            "type": "integer"
        },
        "OBJECT_TEXT": {
            "value": "0x2C",
            "desc": "Gets an objects hover text.",
            "type": "integer"
        },
        "OBJECT_TEXT_ALPHA": {
            "value": "0x31",
            "desc": "Gets the alpha of an objects hover text.",
            "type": "integer"
        },
        "OBJECT_TEXT_COLOR": {
            "value": "0x30",
            "desc": "Gets the color of an objects hover text.",
            "type": "integer"
        },
        "OBJECT_TOTAL_INVENTORY_COUNT": {
            "value": "0x1F",
            "desc": "Gets the total inventory count of the object.  The script and target object must be owned by the same owner",
            "type": "integer"
        },
        "OBJECT_TOTAL_SCRIPT_COUNT": {
            "value": "0xA",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_UNKNOWN_DETAIL": {
            "value": "0xFFFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "OBJECT_VELOCITY": {
            "value": "0x5",
            "desc": "Gets the object&#39;s velocity.",
            "type": "integer"
        },
        "OPT_AVATAR": {
            "value": "0x1",
            "desc": "Returned for avatars.",
            "type": "integer"
        },
        "OPT_CHARACTER": {
            "value": "0x2",
            "desc": "Returned for pathfinding characters.",
            "type": "integer"
        },
        "OPT_EXCLUSION_VOLUME": {
            "value": "0x6",
            "desc": "Returned for exclusion volumes.",
            "type": "integer"
        },
        "OPT_LEGACY_LINKSET": {
            "value": "0x0",
            "desc": "Returned for movable obstacles, movable phantoms, physical, and volumedetect objects.",
            "type": "integer"
        },
        "OPT_MATERIAL_VOLUME": {
            "value": "0x5",
            "desc": "Returned for material volumes.",
            "type": "integer"
        },
        "OPT_OTHER": {
            "value": "0xFFFFFFFF",
            "desc": "Returned for attachments, Linden trees, and grass.",
            "type": "integer"
        },
        "OPT_STATIC_OBSTACLE": {
            "value": "0x4",
            "desc": "Returned for static obstacles.",
            "type": "integer"
        },
        "OPT_WALKABLE": {
            "value": "0x3",
            "desc": "Returned for walkable objects.",
            "type": "integer"
        },
        "PARCEL_COUNT_GROUP": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_COUNT_OTHER": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_COUNT_OWNER": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_COUNT_SELECTED": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_COUNT_TEMP": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_COUNT_TOTAL": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_DETAILS_AREA": {
            "value": "0x4",
            "desc": "The parcel&#39;s area, in square meters. (5 chars.).",
            "type": "integer"
        },
        "PARCEL_DETAILS_DESC": {
            "value": "0x1",
            "desc": "The description of the parcel. (127 chars).",
            "type": "integer"
        },
        "PARCEL_DETAILS_FLAGS": {
            "value": "0xC",
            "desc": "Flags set on the parcel",
            "type": "integer"
        },
        "PARCEL_DETAILS_GROUP": {
            "value": "0x3",
            "desc": "The parcel group&#39;s key. (36 chars.).",
            "type": "integer"
        },
        "PARCEL_DETAILS_ID": {
            "value": "0x5",
            "desc": "The parcel&#39;s key. (36 chars.).",
            "type": "integer"
        },
        "PARCEL_DETAILS_LANDING_LOOKAT": {
            "value": "0xA",
            "desc": "Lookat vector set for teleport routing.",
            "type": "integer"
        },
        "PARCEL_DETAILS_LANDING_POINT": {
            "value": "0x9",
            "desc": "The parcel&#39;s landing point, if any.",
            "type": "integer"
        },
        "PARCEL_DETAILS_NAME": {
            "value": "0x0",
            "desc": "The name of the parcel. (63 chars.).",
            "type": "integer"
        },
        "PARCEL_DETAILS_OWNER": {
            "value": "0x2",
            "desc": "The parcel owner&#39;s key. (36 chars.).",
            "type": "integer"
        },
        "PARCEL_DETAILS_PRIM_CAPACITY": {
            "value": "0x7",
            "desc": "The parcel&#39;s prim capacity.",
            "type": "integer"
        },
        "PARCEL_DETAILS_PRIM_USED": {
            "value": "0x8",
            "desc": "The number of prims used on this parcel.",
            "type": "integer"
        },
        "PARCEL_DETAILS_SCRIPT_DANGER": {
            "value": "0xD",
            "desc": "There are restrictions on this parcel that may impact script execution.",
            "type": "integer"
        },
        "PARCEL_DETAILS_SEE_AVATARS": {
            "value": "0x6",
            "desc": "The parcel&#39;s avatar visibility setting. (1 char.).",
            "type": "integer"
        },
        "PARCEL_DETAILS_TP_ROUTING": {
            "value": "0xB",
            "desc": "Parcel&#39;s teleport routing setting.",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY": {
            "value": "0x8000000",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_CREATE_GROUP_OBJECTS": {
            "value": "0x4000000",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_CREATE_OBJECTS": {
            "value": "0x40",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_DAMAGE": {
            "value": "0x20",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_FLY": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY": {
            "value": "0x10000000",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_GROUP_SCRIPTS": {
            "value": "0x2000000",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_LANDMARK": {
            "value": "0x8",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_SCRIPTS": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_ALLOW_TERRAFORM": {
            "value": "0x10",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_LOCAL_SOUND_ONLY": {
            "value": "0x8000",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_RESTRICT_PUSHOBJECT": {
            "value": "0x200000",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_USE_ACCESS_GROUP": {
            "value": "0x100",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_USE_ACCESS_LIST": {
            "value": "0x200",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_USE_BAN_LIST": {
            "value": "0x400",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_FLAG_USE_LAND_PASS_LIST": {
            "value": "0x800",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_AGENT": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_AUTO_ALIGN": {
            "value": "0x9",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_DESC": {
            "value": "0xC",
            "desc": "Use this to get or set the parcel media description.",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_LOOP": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_LOOP_SET": {
            "value": "0xD",
            "desc": "Used to get or set the parcel&#39;s media looping variable.",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_PAUSE": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_PLAY": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_SIZE": {
            "value": "0xB",
            "desc": "Use this to get or set the parcel media pixel resolution.",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_STOP": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_TEXTURE": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_TIME": {
            "value": "0x6",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_TYPE": {
            "value": "0xA",
            "desc": "Use this to get or set the parcel media MIME type (e.g. &#34;text/html&#34;).",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_UNLOAD": {
            "value": "0x8",
            "desc": "",
            "type": "integer"
        },
        "PARCEL_MEDIA_COMMAND_URL": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "PASSIVE": {
            "value": "0x4",
            "desc": "Static in-world objects.",
            "type": "integer"
        },
        "PASS_ALWAYS": {
            "value": "0x1",
            "desc": "Always pass the event.",
            "type": "integer"
        },
        "PASS_IF_NOT_HANDLED": {
            "value": "0x0",
            "desc": "Pass the event if there is no script handling the event in the prim.",
            "type": "integer"
        },
        "PASS_NEVER": {
            "value": "0x2",
            "desc": "Always pass the event.",
            "type": "integer"
        },
        "PATROL_PAUSE_AT_WAYPOINTS": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PAYMENT_INFO_ON_FILE": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PAYMENT_INFO_USED": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PAY_DEFAULT": {
            "value": "0xFFFFFFFE",
            "desc": "",
            "type": "integer"
        },
        "PAY_HIDE": {
            "value": "0xFFFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "PERMISSION_ATTACH": {
            "value": "0x20",
            "desc": "If this permission is enabled, the object can successfully call llAttachToAvatar to attach to the given avatar.",
            "type": "integer"
        },
        "PERMISSION_CHANGE_JOINTS": {
            "value": "0x100",
            "desc": "(not yet implemented)",
            "type": "integer"
        },
        "PERMISSION_CHANGE_LINKS": {
            "value": "0x80",
            "desc": "If this permission is enabled, the object can successfully call llCreateLink, llBreakLink, and llBreakAllLinks to change links to other objects.",
            "type": "integer"
        },
        "PERMISSION_CHANGE_PERMISSIONS": {
            "value": "0x200",
            "desc": "(not yet implemented)",
            "type": "integer"
        },
        "PERMISSION_CONTROL_CAMERA": {
            "value": "0x800",
            "desc": "",
            "type": "integer"
        },
        "PERMISSION_DEBIT": {
            "value": "0x2",
            "desc": "If this permission is enabled, the object can successfully call llGiveMoney or llTransferLindenDollars to debit the owners account.",
            "type": "integer"
        },
        "PERMISSION_OVERRIDE_ANIMATIONS": {
            "value": "0x8000",
            "desc": "Permission to override default animations.",
            "type": "integer"
        },
        "PERMISSION_RELEASE_OWNERSHIP": {
            "value": "0x40",
            "desc": "(not yet implemented)",
            "type": "integer"
        },
        "PERMISSION_REMAP_CONTROLS": {
            "value": "0x8",
            "desc": "(not yet implemented)",
            "type": "integer"
        },
        "PERMISSION_RETURN_OBJECTS": {
            "value": "0x10000",
            "desc": "",
            "type": "integer"
        },
        "PERMISSION_SILENT_ESTATE_MANAGEMENT": {
            "value": "0x4000",
            "desc": "A script with this permission does not notify the object owner when it modifies estate access rules via llManageEstateAccess.",
            "type": "integer"
        },
        "PERMISSION_TAKE_CONTROLS": {
            "value": "0x4",
            "desc": "If this permission enabled, the object can successfully call the llTakeControls libray call.",
            "type": "integer"
        },
        "PERMISSION_TELEPORT": {
            "value": "0x1000",
            "desc": "",
            "type": "integer"
        },
        "PERMISSION_TRACK_CAMERA": {
            "value": "0x400",
            "desc": "",
            "type": "integer"
        },
        "PERMISSION_TRIGGER_ANIMATION": {
            "value": "0x10",
            "desc": "If this permission is enabled, the object can successfully call llStartAnimation for the avatar that owns this.",
            "type": "integer"
        },
        "PERM_ALL": {
            "value": "0x7FFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "PERM_COPY": {
            "value": "0x8000",
            "desc": "",
            "type": "integer"
        },
        "PERM_MODIFY": {
            "value": "0x4000",
            "desc": "",
            "type": "integer"
        },
        "PERM_MOVE": {
            "value": "0x80000",
            "desc": "",
            "type": "integer"
        },
        "PERM_TRANSFER": {
            "value": "0x2000",
            "desc": "",
            "type": "integer"
        },
        "PI": {
            "value": "3.141592650000000208621032",
            "desc": "3.14159265 - The number of radians in a semi-circle.",
            "type": "float"
        },
        "PING_PONG": {
            "value": "0x8",
            "desc": "Play animation going forwards, then backwards.",
            "type": "integer"
        },
        "PI_BY_TWO": {
            "value": "1.570796330000000073923161",
            "desc": "1.57079633 - The number of radians in a quarter circle.",
            "type": "float"
        },
        "PRIM_ALLOW_UNSIT": {
            "value": "0x27",
            "desc": "Prim parameter for restricting manual standing for seated avatars in an experience.\\nIgnored if the avatar was not seated via a call to llSitOnLink.",
            "type": "integer"
        },
        "PRIM_ALPHA_MODE": {
            "value": "0x26",
            "desc": "Prim parameter for materials using integer face, integer alpha_mode, integer alpha_cutoff.\\nDefines how the alpha channel of the diffuse texture should be rendered.\\nValid options for alpha_mode are PRIM_ALPHA_MODE_BLEND, _NONE, _MASK, and _EMISSIVE.\\nalpha_cutoff is used only for PRIM_ALPHA_MODE_MASK.",
            "type": "integer"
        },
        "PRIM_ALPHA_MODE_BLEND": {
            "value": "0x1",
            "desc": "Prim parameter setting for PRIM_ALPHA_MODE.\\nIndicates that the diffuse texture&#39;s alpha channel should be rendered as alpha-blended.",
            "type": "integer"
        },
        "PRIM_ALPHA_MODE_EMISSIVE": {
            "value": "0x3",
            "desc": "Prim parameter setting for PRIM_ALPHA_MODE.\\nIndicates that the diffuse texture&#39;s alpha channel should be rendered as an emissivity mask.",
            "type": "integer"
        },
        "PRIM_ALPHA_MODE_MASK": {
            "value": "0x2",
            "desc": "Prim parameter setting for PRIM_ALPHA_MODE.\\nIndicates that the diffuse texture&#39;s alpha channel should be rendered as fully opaque for alpha values above alpha_cutoff and fully transparent otherwise.",
            "type": "integer"
        },
        "PRIM_ALPHA_MODE_NONE": {
            "value": "0x0",
            "desc": "Prim parameter setting for PRIM_ALPHA_MODE.\\nIndicates that the diffuse texture&#39;s alpha channel should be ignored.",
            "type": "integer"
        },
        "PRIM_BUMP_BARK": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_BLOBS": {
            "value": "0xC",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_BRICKS": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_BRIGHT": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_CHECKER": {
            "value": "0x6",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_CONCRETE": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_DARK": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_DISKS": {
            "value": "0xA",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_GRAVEL": {
            "value": "0xB",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_LARGETILE": {
            "value": "0xE",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_NONE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_SHINY": {
            "value": "0x13",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_SIDING": {
            "value": "0xD",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_STONE": {
            "value": "0x9",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_STUCCO": {
            "value": "0xF",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_SUCTION": {
            "value": "0x10",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_TILE": {
            "value": "0x8",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_WEAVE": {
            "value": "0x11",
            "desc": "",
            "type": "integer"
        },
        "PRIM_BUMP_WOOD": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "PRIM_CAST_SHADOWS": {
            "value": "0x18",
            "desc": "",
            "type": "integer"
        },
        "PRIM_COLOR": {
            "value": "0x12",
            "desc": "",
            "type": "integer"
        },
        "PRIM_DESC": {
            "value": "0x1C",
            "desc": "",
            "type": "integer"
        },
        "PRIM_FLEXIBLE": {
            "value": "0x15",
            "desc": "",
            "type": "integer"
        },
        "PRIM_FULLBRIGHT": {
            "value": "0x14",
            "desc": "",
            "type": "integer"
        },
        "PRIM_GLOW": {
            "value": "0x19",
            "desc": "PRIM_GLOW is used to get or set the glow status of the face.",
            "type": "integer"
        },
        "PRIM_HOLE_CIRCLE": {
            "value": "0x10",
            "desc": "",
            "type": "integer"
        },
        "PRIM_HOLE_DEFAULT": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PRIM_HOLE_SQUARE": {
            "value": "0x20",
            "desc": "",
            "type": "integer"
        },
        "PRIM_HOLE_TRIANGLE": {
            "value": "0x30",
            "desc": "",
            "type": "integer"
        },
        "PRIM_LINK_TARGET": {
            "value": "0x22",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MATERIAL": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MATERIAL_FLESH": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MATERIAL_GLASS": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MATERIAL_LIGHT": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MATERIAL_METAL": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MATERIAL_PLASTIC": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MATERIAL_RUBBER": {
            "value": "0x6",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MATERIAL_STONE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MATERIAL_WOOD": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_ALT_IMAGE_ENABLE": {
            "value": "0x0",
            "desc": "Boolean. Gets/Sets the default image state (the image that the user sees before a piece of media is active) for the chosen face. The default image is specified by Second Life&#39;s server for that media type.",
            "type": "integer"
        },
        "PRIM_MEDIA_AUTO_LOOP": {
            "value": "0x4",
            "desc": "Boolean. Gets/Sets whether auto-looping is enabled.",
            "type": "integer"
        },
        "PRIM_MEDIA_AUTO_PLAY": {
            "value": "0x5",
            "desc": "Boolean. Gets/Sets whether the media auto-plays when a Resident can view it.",
            "type": "integer"
        },
        "PRIM_MEDIA_AUTO_SCALE": {
            "value": "0x6",
            "desc": "Boolean. Gets/Sets whether auto-scaling is enabled. Auto-scaling forces the media to the full size of the texture.",
            "type": "integer"
        },
        "PRIM_MEDIA_AUTO_ZOOM": {
            "value": "0x7",
            "desc": "Boolean. Gets/Sets whether clicking the media triggers auto-zoom and auto-focus on the media.",
            "type": "integer"
        },
        "PRIM_MEDIA_CONTROLS": {
            "value": "0x1",
            "desc": "Integer. Gets/Sets the style of controls. Can be either PRIM_MEDIA_CONTROLS_STANDARD or PRIM_MEDIA_CONTROLS_MINI.",
            "type": "integer"
        },
        "PRIM_MEDIA_CONTROLS_MINI": {
            "value": "0x1",
            "desc": "Mini web navigation controls; does not include an address bar.",
            "type": "integer"
        },
        "PRIM_MEDIA_CONTROLS_STANDARD": {
            "value": "0x0",
            "desc": "Standard web navigation controls.",
            "type": "integer"
        },
        "PRIM_MEDIA_CURRENT_URL": {
            "value": "0x2",
            "desc": "String. Gets/Sets the current url displayed on the chosen face. Changing this URL causes navigation. 1024 characters Maximum.",
            "type": "integer"
        },
        "PRIM_MEDIA_FIRST_CLICK_INTERACT": {
            "value": "0x8",
            "desc": "Boolean. Gets/Sets whether the first click interaction is enabled.",
            "type": "integer"
        },
        "PRIM_MEDIA_HEIGHT_PIXELS": {
            "value": "0xA",
            "desc": "Integer. Gets/Sets the height of the media in pixels.",
            "type": "integer"
        },
        "PRIM_MEDIA_HOME_URL": {
            "value": "0x3",
            "desc": "String. Gets/Sets the home URL for the chosen face. 1024 characters maximum.",
            "type": "integer"
        },
        "PRIM_MEDIA_MAX_HEIGHT_PIXELS": {
            "value": "0x800",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_MAX_URL_LENGTH": {
            "value": "0x400",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_MAX_WHITELIST_COUNT": {
            "value": "0x40",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_MAX_WHITELIST_SIZE": {
            "value": "0x400",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_MAX_WIDTH_PIXELS": {
            "value": "0x800",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_PARAM_MAX": {
            "value": "0xE",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_PERMS_CONTROL": {
            "value": "0xE",
            "desc": "Integer. Gets/Sets the permissions mask that control who can see the media control bar above the object:: PRIM_MEDIA_PERM_ANYONE, PRIM_MEDIA_PERM_GROUP, PRIM_MEDIA_PERM_NONE, PRIM_MEDIA_PERM_OWNER",
            "type": "integer"
        },
        "PRIM_MEDIA_PERMS_INTERACT": {
            "value": "0xD",
            "desc": "Integer. Gets/Sets the permissions mask that control who can interact with the object: PRIM_MEDIA_PERM_ANYONE, PRIM_MEDIA_PERM_GROUP, PRIM_MEDIA_PERM_NONE, PRIM_MEDIA_PERM_OWNER",
            "type": "integer"
        },
        "PRIM_MEDIA_PERM_ANYONE": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_PERM_GROUP": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_PERM_NONE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_PERM_OWNER": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PRIM_MEDIA_WHITELIST": {
            "value": "0xC",
            "desc": "String. Gets/Sets the white-list as a string of escaped, comma-separated URLs. This string can hold up to 64 URLs or 1024 characters, whichever comes first.",
            "type": "integer"
        },
        "PRIM_MEDIA_WHITELIST_ENABLE": {
            "value": "0xB",
            "desc": "Boolean. Gets/Sets whether navigation is restricted to URLs in PRIM_MEDIA_WHITELIST.",
            "type": "integer"
        },
        "PRIM_MEDIA_WIDTH_PIXELS": {
            "value": "0x9",
            "desc": "Integer. Gets/Sets the width of the media in pixels.",
            "type": "integer"
        },
        "PRIM_NAME": {
            "value": "0x1B",
            "desc": "",
            "type": "integer"
        },
        "PRIM_NORMAL": {
            "value": "0x25",
            "desc": "Prim parameter for materials using integer face, string texture, vector repeats, vector offsets, float rotation_in_radians",
            "type": "integer"
        },
        "PRIM_OMEGA": {
            "value": "0x20",
            "desc": "",
            "type": "integer"
        },
        "PRIM_PHANTOM": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "PRIM_PHYSICS": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "PRIM_PHYSICS_SHAPE_CONVEX": {
            "value": "0x2",
            "desc": "Use the convex hull of the prim shape for physics (this is the default for mesh objects).",
            "type": "integer"
        },
        "PRIM_PHYSICS_SHAPE_NONE": {
            "value": "0x1",
            "desc": "Ignore this prim in the physics shape. NB: This cannot be applied to the root prim.",
            "type": "integer"
        },
        "PRIM_PHYSICS_SHAPE_PRIM": {
            "value": "0x0",
            "desc": "Use the normal prim shape for physics (this is the default for all non-mesh objects).",
            "type": "integer"
        },
        "PRIM_PHYSICS_SHAPE_TYPE": {
            "value": "0x1E",
            "desc": "Allows you to set the physics shape type of a prim via lsl. Permitted values are:\n\t\t\tPRIM_PHYSICS_SHAPE_NONE, PRIM_PHYSICS_SHAPE_PRIM, PRIM_PHYSICS_SHAPE_CONVEX",
            "type": "integer"
        },
        "PRIM_POINT_LIGHT": {
            "value": "0x17",
            "desc": "",
            "type": "integer"
        },
        "PRIM_POSITION": {
            "value": "0x6",
            "desc": "",
            "type": "integer"
        },
        "PRIM_POS_LOCAL": {
            "value": "0x21",
            "desc": "",
            "type": "integer"
        },
        "PRIM_PROJECTOR": {
            "value": "0x2A",
            "desc": "",
            "type": "integer"
        },
        "PRIM_ROTATION": {
            "value": "0x8",
            "desc": "",
            "type": "integer"
        },
        "PRIM_ROT_LOCAL": {
            "value": "0x1D",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SCRIPTED_SIT_ONLY": {
            "value": "0x28",
            "desc": "Prim parameter for restricting manual sitting on this prim.\\nSitting must be initiated via call to llSitOnLink.",
            "type": "integer"
        },
        "PRIM_SCULPT_FLAG_INVERT": {
            "value": "0x40",
            "desc": "Render inside out (inverts the normals).",
            "type": "integer"
        },
        "PRIM_SCULPT_FLAG_MIRROR": {
            "value": "0x80",
            "desc": "Render an X axis mirror of the sculpty.",
            "type": "integer"
        },
        "PRIM_SCULPT_TYPE_CYLINDER": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SCULPT_TYPE_MASK": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SCULPT_TYPE_PLANE": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SCULPT_TYPE_SPHERE": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SCULPT_TYPE_TORUS": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SHINY_HIGH": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SHINY_LOW": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SHINY_MEDIUM": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SHINY_NONE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SIT_TARGET": {
            "value": "0x29",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SIZE": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SLICE": {
            "value": "0x23",
            "desc": "",
            "type": "integer"
        },
        "PRIM_SPECULAR": {
            "value": "0x24",
            "desc": "Prim parameter for materials using integer face, string texture, vector repeats, vector offsets, float rotation_in_radians, vector color, integer glossy, integer environment",
            "type": "integer"
        },
        "PRIM_TEMP_ON_REZ": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TEXGEN": {
            "value": "0x16",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TEXGEN_DEFAULT": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TEXGEN_PLANAR": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TEXT": {
            "value": "0x1A",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TEXTURE": {
            "value": "0x11",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TYPE": {
            "value": "0x9",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TYPE_BOX": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TYPE_CYLINDER": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TYPE_PRISM": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TYPE_RING": {
            "value": "0x6",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TYPE_SCULPT": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TYPE_SPHERE": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TYPE_TORUS": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "PRIM_TYPE_TUBE": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "PROFILE_NONE": {
            "value": "0x0",
            "desc": "Disables profiling",
            "type": "integer"
        },
        "PROFILE_SCRIPT_MEMORY": {
            "value": "0x1",
            "desc": "Enables memory profiling",
            "type": "integer"
        },
        "PSYS_PART_BF_DEST_COLOR": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BF_ONE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BF_ONE_MINUS_DEST_COLOR": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA": {
            "value": "0x9",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BF_SOURCE_ALPHA": {
            "value": "0x7",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BF_SOURCE_COLOR": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BF_ZERO": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BLEND_FUNC_DEST": {
            "value": "0x19",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BLEND_FUNC_SOURCE": {
            "value": "0x18",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_BOUNCE_MASK": {
            "value": "0x4",
            "desc": "Particles bounce off of a plane at the objects Z height.",
            "type": "integer"
        },
        "PSYS_PART_EMISSIVE_MASK": {
            "value": "0x100",
            "desc": "The particle glows.",
            "type": "integer"
        },
        "PSYS_PART_END_ALPHA": {
            "value": "0x4",
            "desc": "A float which determines the ending alpha of the object.",
            "type": "integer"
        },
        "PSYS_PART_END_COLOR": {
            "value": "0x3",
            "desc": "A vector &#60;r, g, b&#62; which determines the ending color of the object.",
            "type": "integer"
        },
        "PSYS_PART_END_GLOW": {
            "value": "0x1B",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_END_SCALE": {
            "value": "0x6",
            "desc": "A vector &#60;sx, sy, z&#62;, which is the ending size of the particle billboard in meters (z is ignored).",
            "type": "integer"
        },
        "PSYS_PART_FLAGS": {
            "value": "0x0",
            "desc": "Each particle that is emitted by the particle system is simulated based on the following flags. To use multiple flags, bitwise or (|) them together.",
            "type": "integer"
        },
        "PSYS_PART_FOLLOW_SRC_MASK": {
            "value": "0x10",
            "desc": "The particle position is relative to the source objects position.",
            "type": "integer"
        },
        "PSYS_PART_FOLLOW_VELOCITY_MASK": {
            "value": "0x20",
            "desc": "The particle orientation is rotated so the vertical axis faces towards the particle velocity.",
            "type": "integer"
        },
        "PSYS_PART_INTERP_COLOR_MASK": {
            "value": "0x1",
            "desc": "Interpolate both the color and alpha from the start value to the end value.",
            "type": "integer"
        },
        "PSYS_PART_INTERP_SCALE_MASK": {
            "value": "0x2",
            "desc": "Interpolate the particle scale from the start value to the end value.",
            "type": "integer"
        },
        "PSYS_PART_MAX_AGE": {
            "value": "0x7",
            "desc": "Age in seconds of a particle at which it dies.",
            "type": "integer"
        },
        "PSYS_PART_RIBBON_MASK": {
            "value": "0x400",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_START_ALPHA": {
            "value": "0x2",
            "desc": "A float which determines the starting alpha of the object.",
            "type": "integer"
        },
        "PSYS_PART_START_COLOR": {
            "value": "0x1",
            "desc": "A vector &#60;r.r, g.g, b.b&#62; which determines the starting color of the object.",
            "type": "integer"
        },
        "PSYS_PART_START_GLOW": {
            "value": "0x1A",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_START_SCALE": {
            "value": "0x5",
            "desc": "A vector &#60;sx, sy, z&#62;, which is the starting size of the particle billboard in meters (z is ignored).",
            "type": "integer"
        },
        "PSYS_PART_TARGET_LINEAR_MASK": {
            "value": "0x80",
            "desc": "",
            "type": "integer"
        },
        "PSYS_PART_TARGET_POS_MASK": {
            "value": "0x40",
            "desc": "The particle heads towards the location of the target object as defined by PSYS_SRC_TARGET_KEY.",
            "type": "integer"
        },
        "PSYS_PART_WIND_MASK": {
            "value": "0x8",
            "desc": "Particles have their velocity damped towards the wind velocity.",
            "type": "integer"
        },
        "PSYS_SRC_ACCEL": {
            "value": "0x8",
            "desc": "A vector &#60;x, y, z&#62; which is the acceleration to apply on particles.",
            "type": "integer"
        },
        "PSYS_SRC_ANGLE_BEGIN": {
            "value": "0x16",
            "desc": "Area in radians specifying where particles will NOT be created (for ANGLE patterns)",
            "type": "integer"
        },
        "PSYS_SRC_ANGLE_END": {
            "value": "0x17",
            "desc": "Area in radians filled with particles (for ANGLE patterns) (if lower than PSYS_SRC_ANGLE_BEGIN, acts as PSYS_SRC_ANGLE_BEGIN itself, and PSYS_SRC_ANGLE_BEGIN acts as PSYS_SRC_ANGLE_END).",
            "type": "integer"
        },
        "PSYS_SRC_BURST_PART_COUNT": {
            "value": "0xF",
            "desc": "How many particles to release in a burst.",
            "type": "integer"
        },
        "PSYS_SRC_BURST_RADIUS": {
            "value": "0x10",
            "desc": "What distance from the center of the object to create the particles.",
            "type": "integer"
        },
        "PSYS_SRC_BURST_RATE": {
            "value": "0xD",
            "desc": "How often to release a particle burst (float seconds).",
            "type": "integer"
        },
        "PSYS_SRC_BURST_SPEED_MAX": {
            "value": "0x12",
            "desc": "Maximum speed that a particle should be moving.",
            "type": "integer"
        },
        "PSYS_SRC_BURST_SPEED_MIN": {
            "value": "0x11",
            "desc": "Minimum speed that a particle should be moving.",
            "type": "integer"
        },
        "PSYS_SRC_INNERANGLE": {
            "value": "0xA",
            "desc": "Specifies the inner angle of the arc created by the PSYS_SRC_PATTERN_ANGLE or PSYS_SRC_PATTERN_ANGLE_CONE source pattern.\n\t\t\tThe area specified will NOT have particles in it.",
            "type": "integer"
        },
        "PSYS_SRC_MAX_AGE": {
            "value": "0x13",
            "desc": "How long this particle system should last, 0.0 means forever.",
            "type": "integer"
        },
        "PSYS_SRC_OMEGA": {
            "value": "0x15",
            "desc": "Sets the angular velocity to rotate the axis that SRC_PATTERN_ANGLE and SRC_PATTERN_ANGLE_CONE use.",
            "type": "integer"
        },
        "PSYS_SRC_OUTERANGLE": {
            "value": "0xB",
            "desc": "Specifies the outer angle of the arc created by the PSYS_SRC_PATTERN_ANGLE or PSYS_SRC_PATTERN_ANGLE_CONE source pattern.\n\t\t\tThe area between the outer and inner angle will be filled with particles.",
            "type": "integer"
        },
        "PSYS_SRC_PATTERN": {
            "value": "0x9",
            "desc": "The pattern which is used to generate particles.\n\t\t\tUse one of the following values: PSYS_SRC_PATTERN Values.",
            "type": "integer"
        },
        "PSYS_SRC_PATTERN_ANGLE": {
            "value": "0x4",
            "desc": "Shoot particles across a 2 dimensional area defined by the arc created from PSYS_SRC_OUTERANGLE. There will be an open area defined by PSYS_SRC_INNERANGLE within the larger arc.",
            "type": "integer"
        },
        "PSYS_SRC_PATTERN_ANGLE_CONE": {
            "value": "0x8",
            "desc": "Shoot particles out in a 3 dimensional cone with an outer arc of PSYS_SRC_OUTERANGLE and an inner open area defined by PSYS_SRC_INNERANGLE.",
            "type": "integer"
        },
        "PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY": {
            "value": "0x10",
            "desc": "",
            "type": "integer"
        },
        "PSYS_SRC_PATTERN_DROP": {
            "value": "0x1",
            "desc": "Drop particles at the source position.",
            "type": "integer"
        },
        "PSYS_SRC_PATTERN_EXPLODE": {
            "value": "0x2",
            "desc": "Shoot particles out in all directions, using the burst parameters.",
            "type": "integer"
        },
        "PSYS_SRC_TARGET_KEY": {
            "value": "0x14",
            "desc": "The key of a target object to move towards if PSYS_PART_TARGET_POS_MASK is enabled.",
            "type": "integer"
        },
        "PSYS_SRC_TEXTURE": {
            "value": "0xC",
            "desc": "An asset name for the texture to use for the particles.",
            "type": "integer"
        },
        "PUBLIC_CHANNEL": {
            "value": "0x0",
            "desc": "PUBLIC_CHANNEL is an integer constant that, when passed to llSay, llWhisper, or llShout as a channel parameter, will print text to the publicly heard chat channel.",
            "type": "integer"
        },
        "PURSUIT_FUZZ_FACTOR": {
            "value": "0x3",
            "desc": "Selects a random destination near the offset.",
            "type": "integer"
        },
        "PURSUIT_GOAL_TOLERANCE": {
            "value": "0x5",
            "desc": "",
            "type": "integer"
        },
        "PURSUIT_INTERCEPT": {
            "value": "0x4",
            "desc": "Define whether the character attempts to predict the target&#39;s location.",
            "type": "integer"
        },
        "PURSUIT_OFFSET": {
            "value": "0x1",
            "desc": "Go to a position offset from the target.",
            "type": "integer"
        },
        "PU_EVADE_HIDDEN": {
            "value": "0x7",
            "desc": "Triggered when an llEvade character thinks it has hidden from its pursuer.",
            "type": "integer"
        },
        "PU_EVADE_SPOTTED": {
            "value": "0x8",
            "desc": "Triggered when an llEvade character switches from hiding to running",
            "type": "integer"
        },
        "PU_FAILURE_DYNAMIC_PATHFINDING_DISABLED": {
            "value": "0xA",
            "desc": "",
            "type": "integer"
        },
        "PU_FAILURE_INVALID_GOAL": {
            "value": "0x3",
            "desc": "Goal is not on the navigation-mesh and cannot be reached.",
            "type": "integer"
        },
        "PU_FAILURE_INVALID_START": {
            "value": "0x2",
            "desc": "Character cannot navigate from the current location - e.g., the character is off the navmesh or too high above it.",
            "type": "integer"
        },
        "PU_FAILURE_NO_NAVMESH": {
            "value": "0x9",
            "desc": "This is a fatal error reported to a character when there is no navmesh for the region. This usually indicates a server failure and users should file a bug report and include the time and region in which they received this message.",
            "type": "integer"
        },
        "PU_FAILURE_NO_VALID_DESTINATION": {
            "value": "0x6",
            "desc": "There is no good place for the character to go - e.g., it is patrolling and all the patrol points are now unreachable.",
            "type": "integer"
        },
        "PU_FAILURE_OTHER": {
            "value": "0xF4240",
            "desc": "",
            "type": "integer"
        },
        "PU_FAILURE_PARCEL_UNREACHABLE": {
            "value": "0xB",
            "desc": "",
            "type": "integer"
        },
        "PU_FAILURE_TARGET_GONE": {
            "value": "0x5",
            "desc": "Target (for llPursue or llEvade) can no longer be tracked - e.g., it left the region or is an avatar that is now more than about 30m outside the region.",
            "type": "integer"
        },
        "PU_FAILURE_UNREACHABLE": {
            "value": "0x4",
            "desc": "Goal is no longer reachable for some reason - e.g., an obstacle blocks the path.",
            "type": "integer"
        },
        "PU_GOAL_REACHED": {
            "value": "0x1",
            "desc": "Character has reached the goal and will stop or choose a new goal (if wandering).",
            "type": "integer"
        },
        "PU_SLOWDOWN_DISTANCE_REACHED": {
            "value": "0x0",
            "desc": "Character is near current goal.",
            "type": "integer"
        },
        "RAD_TO_DEG": {
            "value": "57.29577950000000186037141",
            "desc": "57.2957795 - Number of degrees per radian. You can use this number to convert radians to degrees by multiplying the radians by this number.",
            "type": "float"
        },
        "RCERR_CAST_TIME_EXCEEDED": {
            "value": "0xFFFFFFFD",
            "desc": "",
            "type": "integer"
        },
        "RCERR_SIM_PERF_LOW": {
            "value": "0xFFFFFFFE",
            "desc": "",
            "type": "integer"
        },
        "RCERR_UNKNOWN": {
            "value": "0xFFFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "RC_DATA_FLAGS": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "RC_DETECT_PHANTOM": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "RC_GET_LINK_NUM": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "RC_GET_NORMAL": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "RC_GET_ROOT_KEY": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "RC_MAX_HITS": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "RC_REJECT_AGENTS": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "RC_REJECT_LAND": {
            "value": "0x8",
            "desc": "",
            "type": "integer"
        },
        "RC_REJECT_NONPHYSICAL": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "RC_REJECT_PHYSICAL": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "RC_REJECT_TYPES": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_ALLOW_DAMAGE": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_ALLOW_DIRECT_TELEPORT": {
            "value": "0x100000",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_BLOCK_FLY": {
            "value": "0x80000",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_BLOCK_FLYOVER": {
            "value": "0x8000000",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_BLOCK_TERRAFORM": {
            "value": "0x40",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_DISABLE_COLLISIONS": {
            "value": "0x1000",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_DISABLE_PHYSICS": {
            "value": "0x4000",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_FIXED_SUN": {
            "value": "0x10",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_RESTRICT_PUSHOBJECT": {
            "value": "0x400000",
            "desc": "",
            "type": "integer"
        },
        "REGION_FLAG_SANDBOX": {
            "value": "0x100",
            "desc": "",
            "type": "integer"
        },
        "REMOTE_DATA_CHANNEL": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "REMOTE_DATA_REPLY": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "REMOTE_DATA_REQUEST": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "REQUIRE_LINE_OF_SIGHT": {
            "value": "0x2",
            "desc": "Define whether the character needs a line-of-sight to give chase.",
            "type": "integer"
        },
        "RESTITUTION": {
            "value": "0x4",
            "desc": "Used with llSetPhysicsMaterial to enable the density value. Must be between 0.0 and 1.0",
            "type": "integer"
        },
        "REVERSE": {
            "value": "0x4",
            "desc": "Play animation in reverse direction.",
            "type": "integer"
        },
        "ROTATE": {
            "value": "0x20",
            "desc": "Animate texture rotation.",
            "type": "integer"
        },
        "SCALE": {
            "value": "0x40",
            "desc": "Animate the texture scale.",
            "type": "integer"
        },
        "SCRIPTED": {
            "value": "0x8",
            "desc": "Scripted in-world objects.",
            "type": "integer"
        },
        "SIM_STAT_PCT_CHARS_STEPPED": {
            "value": "0x0",
            "desc": "Returns the % of pathfinding characters skipped each frame, averaged over the last minute.\\nThe returned value corresponds to the &#34;Characters Updated&#34; stat in the viewer&#39;s Statistics Bar.",
            "type": "integer"
        },
        "SIT_INVALID_AGENT": {
            "value": "0xFFFFFFFC",
            "desc": "Avatar ID did not specify a valid avatar.",
            "type": "integer"
        },
        "SIT_INVALID_LINK": {
            "value": "0xFFFFFFFB",
            "desc": "Link ID did not specify a valid prim in the linkset or resolved to multiple prims.",
            "type": "integer"
        },
        "SIT_INVALID_OBJECT": {
            "value": "0xFFFFFFF9",
            "desc": "Attempt to force an avatar to sit on an attachment or other invalid target.",
            "type": "integer"
        },
        "SIT_NOT_EXPERIENCE": {
            "value": "0xFFFFFFFF",
            "desc": "Attempt to force an avatar to sit outside an experience.",
            "type": "integer"
        },
        "SIT_NO_ACCESS": {
            "value": "0xFFFFFFFA",
            "desc": "Avatar does not have access to the parcel containing the target linkset of the forced sit.",
            "type": "integer"
        },
        "SIT_NO_EXPERIENCE_PERMISSION": {
            "value": "0xFFFFFFFE",
            "desc": "Avatar has not granted permission to force sits.",
            "type": "integer"
        },
        "SIT_NO_SIT_TARGET": {
            "value": "0xFFFFFFFD",
            "desc": "No available sit target in linkset for forced sit.",
            "type": "integer"
        },
        "SKY_AMBIENT": {
            "value": "0x0",
            "desc": "The ambient color of the environment",
            "type": "integer"
        },
        "SKY_BLUE": {
            "value": "0x16",
            "desc": "Blue settings for environment",
            "type": "integer"
        },
        "SKY_CLOUDS": {
            "value": "0x2",
            "desc": "Settings controlling cloud density and configuration",
            "type": "integer"
        },
        "SKY_CLOUD_TEXTURE": {
            "value": "0x13",
            "desc": "Texture ID used by clouds",
            "type": "integer"
        },
        "SKY_DOME": {
            "value": "0x4",
            "desc": "Sky dome information.",
            "type": "integer"
        },
        "SKY_GAMMA": {
            "value": "0x5",
            "desc": "The gamma value applied to the scene.",
            "type": "integer"
        },
        "SKY_GLOW": {
            "value": "0x6",
            "desc": "Glow color applied to the sun and moon.",
            "type": "integer"
        },
        "SKY_HAZE": {
            "value": "0x17",
            "desc": "Haze settings for environment",
            "type": "integer"
        },
        "SKY_LIGHT": {
            "value": "0x8",
            "desc": "Miscellaneous lighting values.",
            "type": "integer"
        },
        "SKY_MOON": {
            "value": "0x9",
            "desc": "Environmental moon details.",
            "type": "integer"
        },
        "SKY_MOON_TEXTURE": {
            "value": "0x14",
            "desc": "Environmental moon texture.",
            "type": "integer"
        },
        "SKY_PLANET": {
            "value": "0xA",
            "desc": "Planet information used in rendering the sky.",
            "type": "integer"
        },
        "SKY_REFRACTION": {
            "value": "0xB",
            "desc": "Sky refraction parameters for rainbows and optical effects.",
            "type": "integer"
        },
        "SKY_STAR_BRIGHTNESS": {
            "value": "0xD",
            "desc": "Brightness value for the stars.",
            "type": "integer"
        },
        "SKY_SUN": {
            "value": "0xE",
            "desc": "Detailed sun information",
            "type": "integer"
        },
        "SKY_SUN_TEXTURE": {
            "value": "0x15",
            "desc": "Environmental sun texture",
            "type": "integer"
        },
        "SKY_TEXTURE_DEFAULTS": {
            "value": "0x1",
            "desc": "Is the environment using the default textures.",
            "type": "integer"
        },
        "SKY_TRACKS": {
            "value": "0xF",
            "desc": "Track elevations for this region.",
            "type": "integer"
        },
        "SMOOTH": {
            "value": "0x10",
            "desc": "Slide in the X direction, instead of playing separate frames.",
            "type": "integer"
        },
        "SQRT2": {
            "value": "1.414213560000000091676498",
            "desc": "1.41421356 - The square root of 2.",
            "type": "float"
        },
        "STATUS_BLOCK_GRAB": {
            "value": "0x40",
            "desc": "Controls whether the object can be grabbed.\\nA grab is the default action when in third person, and is available as the hand tool in build mode. This is useful for physical objects that you don&#39;t want other people to be able to trivially disturb. The default is FALSE",
            "type": "integer"
        },
        "STATUS_BLOCK_GRAB_OBJECT": {
            "value": "0x400",
            "desc": "Prevent click-and-drag movement on all prims in the object.",
            "type": "integer"
        },
        "STATUS_BOUNDS_ERROR": {
            "value": "0x3EA",
            "desc": "Argument(s) passed to function had a bounds error.",
            "type": "integer"
        },
        "STATUS_CAST_SHADOWS": {
            "value": "0x200",
            "desc": "",
            "type": "integer"
        },
        "STATUS_DIE_AT_EDGE": {
            "value": "0x80",
            "desc": "Controls whether the object is returned to the owners inventory if it wanders off the edge of the world.\\nIt is useful to set this status TRUE for things like bullets or rockets. The default is TRUE",
            "type": "integer"
        },
        "STATUS_DIE_AT_NO_ENTRY": {
            "value": "0x800",
            "desc": "Controls whether the object dies if it attempts to enter a parcel that does not allow object entry or does not have enough capacity.\\nIt is useful to set this status TRUE for things like bullets or rockets. The default is FALSE",
            "type": "integer"
        },
        "STATUS_INTERNAL_ERROR": {
            "value": "0x7CF",
            "desc": "An internal error occurred.",
            "type": "integer"
        },
        "STATUS_MALFORMED_PARAMS": {
            "value": "0x3E8",
            "desc": "Function was called with malformed parameters.",
            "type": "integer"
        },
        "STATUS_NOT_FOUND": {
            "value": "0x3EB",
            "desc": "Object or other item was not found.",
            "type": "integer"
        },
        "STATUS_NOT_SUPPORTED": {
            "value": "0x3EC",
            "desc": "Feature not supported.",
            "type": "integer"
        },
        "STATUS_OK": {
            "value": "0x0",
            "desc": "Result of function call was a success.",
            "type": "integer"
        },
        "STATUS_PHANTOM": {
            "value": "0x10",
            "desc": "Controls/indicates whether the object collides or not.\\nSetting the value to TRUE makes the object non-colliding with all objects. It is a good idea to use this for most objects that move or rotate, but are non-physical. It is also useful for simulating volumetric lighting. The default is FALSE.",
            "type": "integer"
        },
        "STATUS_PHYSICS": {
            "value": "0x1",
            "desc": "Controls/indicates whether the object moves physically.\\nThis controls the same flag that the UI check-box for Physical controls. The default is FALSE.",
            "type": "integer"
        },
        "STATUS_RETURN_AT_EDGE": {
            "value": "0x100",
            "desc": "",
            "type": "integer"
        },
        "STATUS_ROTATE_X": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "STATUS_ROTATE_Y": {
            "value": "0x4",
            "desc": "",
            "type": "integer"
        },
        "STATUS_ROTATE_Z": {
            "value": "0x8",
            "desc": "Controls/indicates whether the object can physically rotate around\n\t\t\tthe specific axis or not. This flag has no meaning\n\t\t\tfor non-physical objects. Set the value to FALSE\n\t\t\tif you want to disable rotation around that axis. The\n\t\t\tdefault is TRUE for a physical object.\n\t\t\tA useful example to think about when visualizing\n\t\t\tthe effect is a sit-and-spin device. They spin around the\n\t\t\tZ axis (up) but not around the X or Y axis.",
            "type": "integer"
        },
        "STATUS_SANDBOX": {
            "value": "0x20",
            "desc": "Controls/indicates whether the object can cross region boundaries\n\t\t\tand move more than 20 meters from its creation\n\t\t\tpoint. The default if FALSE.",
            "type": "integer"
        },
        "STATUS_TYPE_MISMATCH": {
            "value": "0x3E9",
            "desc": "Argument(s) passed to function had a type mismatch.",
            "type": "integer"
        },
        "STATUS_WHITELIST_FAILED": {
            "value": "0x7D1",
            "desc": "Whitelist Failed.",
            "type": "integer"
        },
        "STRING_TRIM": {
            "value": "0x3",
            "desc": "",
            "type": "integer"
        },
        "STRING_TRIM_HEAD": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "STRING_TRIM_TAIL": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "TARGETED_EMAIL_OBJECT_OWNER": {
            "value": "0x2",
            "desc": "Send email to the owner of the object",
            "type": "integer"
        },
        "TARGETED_EMAIL_ROOT_CREATOR": {
            "value": "0x1",
            "desc": "Send email to the creator of the root object",
            "type": "integer"
        },
        "TEXTURE_BLANK": {
            "value": "\"5748decc-f629-461c-9a36-a35a221fe21f\"",
            "desc": "",
            "type": "string"
        },
        "TEXTURE_DEFAULT": {
            "value": "\"89556747-24cb-43ed-920b-47caed15465f\"",
            "desc": "",
            "type": "string"
        },
        "TEXTURE_MEDIA": {
            "value": "\"8b5fec65-8d8d-9dc5-cda8-8fdf2716e361\"",
            "desc": "",
            "type": "string"
        },
        "TEXTURE_PLYWOOD": {
            "value": "\"89556747-24cb-43ed-920b-47caed15465f\"",
            "desc": "",
            "type": "string"
        },
        "TEXTURE_TRANSPARENT": {
            "value": "\"8dcd4a48-2d37-4909-9f78-f7a9eb4ef903\"",
            "desc": "",
            "type": "string"
        },
        "TOUCH_INVALID_FACE": {
            "value": "0xFFFFFFFF",
            "desc": "",
            "type": "integer"
        },
        "TOUCH_INVALID_TEXCOORD": {
            "value": "<-1.0, -1.0, 0.0>",
            "desc": "",
            "type": "vector"
        },
        "TOUCH_INVALID_VECTOR": {
            "value": "<0.0, 0.0, 0.0>",
            "desc": "",
            "type": "vector"
        },
        "TP_ROUTING_BLOCKED": {
            "value": "0x0",
            "desc": "Direct teleporting is blocked on this parcel.",
            "type": "integer"
        },
        "TP_ROUTING_FREE": {
            "value": "0x2",
            "desc": "Teleports are unrestricted on this parcel.",
            "type": "integer"
        },
        "TP_ROUTING_LANDINGP": {
            "value": "0x1",
            "desc": "Teleports are routed to a landing point if set on this parcel.",
            "type": "integer"
        },
        "TRAVERSAL_TYPE": {
            "value": "0x7",
            "desc": "One of TRAVERSAL_TYPE_FAST, TRAVERSAL_TYPE_SLOW, and TRAVERSAL_TYPE_NONE.",
            "type": "integer"
        },
        "TRAVERSAL_TYPE_FAST": {
            "value": "0x1",
            "desc": "",
            "type": "integer"
        },
        "TRAVERSAL_TYPE_NONE": {
            "value": "0x2",
            "desc": "",
            "type": "integer"
        },
        "TRAVERSAL_TYPE_SLOW": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "TRUE": {
            "value": "0x1",
            "desc": "An integer constant for boolean comparisons. Has the value &#39;1&#39;.",
            "type": "integer"
        },
        "TWO_PI": {
            "value": "6.283185300000000417242063",
            "desc": "6.28318530 - The radians of a circle.",
            "type": "float"
        },
        "TYPE_FLOAT": {
            "value": "0x2",
            "desc": "The list entry is a float.",
            "type": "integer"
        },
        "TYPE_INTEGER": {
            "value": "0x1",
            "desc": "The list entry is an integer.",
            "type": "integer"
        },
        "TYPE_INVALID": {
            "value": "0x0",
            "desc": "The list entry is invalid.",
            "type": "integer"
        },
        "TYPE_KEY": {
            "value": "0x4",
            "desc": "The list entry is a key.",
            "type": "integer"
        },
        "TYPE_ROTATION": {
            "value": "0x6",
            "desc": "The list entry is a rotation.",
            "type": "integer"
        },
        "TYPE_STRING": {
            "value": "0x3",
            "desc": "The list entry is a string.",
            "type": "integer"
        },
        "TYPE_VECTOR": {
            "value": "0x5",
            "desc": "The list entry is a vector.",
            "type": "integer"
        },
        "URL_REQUEST_DENIED": {
            "value": "\"URL_REQUEST_DENIED\"",
            "desc": "",
            "type": "string"
        },
        "URL_REQUEST_GRANTED": {
            "value": "\"URL_REQUEST_GRANTED\"",
            "desc": "",
            "type": "string"
        },
        "VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY": {
            "value": "0x20",
            "desc": "A slider between minimum (0.0) and maximum (1.0) deflection of angular orientation. That is, its a simple scalar for modulating the strength of angular deflection such that the vehicles preferred axis of motion points toward its real velocity.",
            "type": "integer"
        },
        "VEHICLE_ANGULAR_DEFLECTION_TIMESCALE": {
            "value": "0x21",
            "desc": "The time-scale for exponential success of linear deflection deflection. Its another way to specify the strength of the vehicles tendency to reorient itself so that its preferred axis of motion agrees with its true velocity.",
            "type": "integer"
        },
        "VEHICLE_ANGULAR_FRICTION_TIMESCALE": {
            "value": "0x11",
            "desc": "A vector of timescales for exponential decay of the vehicles angular velocity about its preferred axes of motion (at, left, up).\n\t\t\tRange = [0.07, inf) seconds for each element of the vector.",
            "type": "integer"
        },
        "VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE": {
            "value": "0x23",
            "desc": "The timescale for exponential decay of the angular motors magnitude.",
            "type": "integer"
        },
        "VEHICLE_ANGULAR_MOTOR_DIRECTION": {
            "value": "0x13",
            "desc": "The direction and magnitude (in preferred frame) of the vehicles angular motor.The vehicle will accelerate (or decelerate if necessary) to match its velocity to its motor.",
            "type": "integer"
        },
        "VEHICLE_ANGULAR_MOTOR_TIMESCALE": {
            "value": "0x22",
            "desc": "The timescale for exponential approach to full angular motor velocity.",
            "type": "integer"
        },
        "VEHICLE_BANKING_EFFICIENCY": {
            "value": "0x26",
            "desc": "A slider between anti (-1.0), none (0.0), and maxmum (1.0) banking strength.",
            "type": "integer"
        },
        "VEHICLE_BANKING_MIX": {
            "value": "0x27",
            "desc": "A slider between static (0.0) and dynamic (1.0) banking. &#34;Static&#34; means the banking scales only with the angle of roll, whereas &#34;dynamic&#34; is a term that also scales with the vehicles linear speed.",
            "type": "integer"
        },
        "VEHICLE_BANKING_TIMESCALE": {
            "value": "0x28",
            "desc": "The timescale for banking to exponentially approach its maximum effect. This is another way to scale the strength of the banking effect, however it affects the term that is proportional to the difference between what the banking behavior is trying to do, and what the vehicle is actually doing.",
            "type": "integer"
        },
        "VEHICLE_BUOYANCY": {
            "value": "0x1B",
            "desc": "A slider between minimum (0.0) and maximum anti-gravity (1.0).",
            "type": "integer"
        },
        "VEHICLE_FLAG_CAMERA_DECOUPLED": {
            "value": "0x200",
            "desc": "",
            "type": "integer"
        },
        "VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT": {
            "value": "0x10",
            "desc": "Hover at global height.",
            "type": "integer"
        },
        "VEHICLE_FLAG_HOVER_TERRAIN_ONLY": {
            "value": "0x8",
            "desc": "Ignore water height when hovering.",
            "type": "integer"
        },
        "VEHICLE_FLAG_HOVER_UP_ONLY": {
            "value": "0x20",
            "desc": "Hover does not push down. Use this flag for hovering vehicles that should be able to jump above their hover height.",
            "type": "integer"
        },
        "VEHICLE_FLAG_HOVER_WATER_ONLY": {
            "value": "0x4",
            "desc": "Ignore terrain height when hovering.",
            "type": "integer"
        },
        "VEHICLE_FLAG_LIMIT_MOTOR_UP": {
            "value": "0x40",
            "desc": "Prevents ground vehicles from motoring into the sky.",
            "type": "integer"
        },
        "VEHICLE_FLAG_LIMIT_ROLL_ONLY": {
            "value": "0x2",
            "desc": "For vehicles with vertical attractor that want to be able to climb/dive, for instance, aeroplanes that want to use the banking feature.",
            "type": "integer"
        },
        "VEHICLE_FLAG_MOUSELOOK_BANK": {
            "value": "0x100",
            "desc": "",
            "type": "integer"
        },
        "VEHICLE_FLAG_MOUSELOOK_STEER": {
            "value": "0x80",
            "desc": "",
            "type": "integer"
        },
        "VEHICLE_FLAG_NO_DEFLECTION_UP": {
            "value": "0x1",
            "desc": "This flag prevents linear deflection parallel to world z-axis. This is useful for preventing ground vehicles with large linear deflection, like bumper cars, from climbing their linear deflection into the sky.",
            "type": "integer"
        },
        "VEHICLE_FLAG_NO_FLY_UP": {
            "value": "0x1",
            "desc": "Old, changed to VEHICLE_FLAG_NO_DEFLECTION_UP",
            "type": "integer"
        },
        "VEHICLE_HOVER_EFFICIENCY": {
            "value": "0x19",
            "desc": "A slider between minimum (0.0 = bouncy) and maximum (1.0 = fast as possible) damped motion of the hover behavior. ",
            "type": "integer"
        },
        "VEHICLE_HOVER_HEIGHT": {
            "value": "0x18",
            "desc": "The height (above the terrain or water, or global) at which the vehicle will try to hover.",
            "type": "integer"
        },
        "VEHICLE_HOVER_TIMESCALE": {
            "value": "0x1A",
            "desc": "Period of time (in seconds) for the vehicle to achieve its hover height.",
            "type": "integer"
        },
        "VEHICLE_LINEAR_DEFLECTION_EFFICIENCY": {
            "value": "0x1C",
            "desc": "A slider between minimum (0.0) and maximum (1.0) deflection of linear velocity. That is, its a simple scalar for modulating the strength of linear deflection.",
            "type": "integer"
        },
        "VEHICLE_LINEAR_DEFLECTION_TIMESCALE": {
            "value": "0x1D",
            "desc": "The timescale for exponential success of linear deflection deflection. It is another way to specify how much time it takes for the vehicles linear velocity to be redirected to its preferred axis of motion.",
            "type": "integer"
        },
        "VEHICLE_LINEAR_FRICTION_TIMESCALE": {
            "value": "0x10",
            "desc": "A vector of timescales for exponential decay of the vehicles linear velocity along its preferred axes of motion (at, left, up).\n\t\t\tRange = [0.07, inf) seconds for each element of the vector.",
            "type": "integer"
        },
        "VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE": {
            "value": "0x1F",
            "desc": "The timescale for exponential decay of the linear motors magnitude.",
            "type": "integer"
        },
        "VEHICLE_LINEAR_MOTOR_DIRECTION": {
            "value": "0x12",
            "desc": "The direction and magnitude (in preferred frame) of the vehicles linear motor. The vehicle will accelerate (or decelerate if necessary) to match its velocity to its motor.\n\t\t\tRange of magnitude = [0, 30] meters/second.",
            "type": "integer"
        },
        "VEHICLE_LINEAR_MOTOR_OFFSET": {
            "value": "0x14",
            "desc": "",
            "type": "integer"
        },
        "VEHICLE_LINEAR_MOTOR_TIMESCALE": {
            "value": "0x1E",
            "desc": "The timescale for exponential approach to full linear motor velocity.",
            "type": "integer"
        },
        "VEHICLE_REFERENCE_FRAME": {
            "value": "0x2C",
            "desc": "A rotation of the vehicles preferred axes of motion and orientation (at, left, up) with respect to the vehicles local frame (x, y, z).",
            "type": "integer"
        },
        "VEHICLE_TYPE_AIRPLANE": {
            "value": "0x4",
            "desc": "Uses linear deflection for lift, no hover, and banking to turn.\\nSee http://wiki.secondlife.com/wiki/VEHICLE_TYPE_AIRPLANE",
            "type": "integer"
        },
        "VEHICLE_TYPE_BALLOON": {
            "value": "0x5",
            "desc": "Hover, and friction, but no deflection.\\nSee http://wiki.secondlife.com/wiki/VEHICLE_TYPE_BALLOON",
            "type": "integer"
        },
        "VEHICLE_TYPE_BOAT": {
            "value": "0x3",
            "desc": "Hovers over water with lots of friction and some anglar deflection.\\nSee http://wiki.secondlife.com/wiki/VEHICLE_TYPE_BOAT",
            "type": "integer"
        },
        "VEHICLE_TYPE_CAR": {
            "value": "0x2",
            "desc": "Another vehicle that bounces along the ground but needs the motors to be driven from external controls or timer events.\\nSee http://wiki.secondlife.com/wiki/VEHICLE_TYPE_CAR",
            "type": "integer"
        },
        "VEHICLE_TYPE_NONE": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "VEHICLE_TYPE_SLED": {
            "value": "0x1",
            "desc": "Simple vehicle that bumps along the ground, and likes to move along its local x-axis.\\nSee http://wiki.secondlife.com/wiki/VEHICLE_TYPE_SLED",
            "type": "integer"
        },
        "VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY": {
            "value": "0x24",
            "desc": "A slider between minimum (0.0 = wobbly) and maximum (1.0 = firm as possible) stability of the vehicle to keep itself upright.",
            "type": "integer"
        },
        "VEHICLE_VERTICAL_ATTRACTION_TIMESCALE": {
            "value": "0x25",
            "desc": "The period of wobble, or timescale for exponential approach, of the vehicle to rotate such that its preferred &#34;up&#34; axis is oriented along the worlds &#34;up&#34; axis.",
            "type": "integer"
        },
        "VERTICAL": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "WANDER_PAUSE_AT_WAYPOINTS": {
            "value": "0x0",
            "desc": "",
            "type": "integer"
        },
        "WATER_BLUR_MULTIPLIER": {
            "value": "0x64",
            "desc": "Blur factor.",
            "type": "integer"
        },
        "WATER_FOG": {
            "value": "0x65",
            "desc": "Fog properties when underwater.",
            "type": "integer"
        },
        "WATER_FRESNEL": {
            "value": "0x66",
            "desc": "Fresnel scattering applied to the surface of the water.",
            "type": "integer"
        },
        "WATER_NORMAL_SCALE": {
            "value": "0x68",
            "desc": "Scaling applied to the water normal map.",
            "type": "integer"
        },
        "WATER_NORMAL_TEXTURE": {
            "value": "0x6B",
            "desc": "Normal map used for environmental waves.",
            "type": "integer"
        },
        "WATER_REFRACTION": {
            "value": "0x69",
            "desc": "Refraction factors when looking through the surface of the water.",
            "type": "integer"
        },
        "WATER_TEXTURE_DEFAULTS": {
            "value": "0x67",
            "desc": "Is the environment using the default wave map.",
            "type": "integer"
        },
        "WATER_WAVE_DIRECTION": {
            "value": "0x6A",
            "desc": "Vectors for the directions of the waves.",
            "type": "integer"
        },
        "XP_ERROR_EXPERIENCES_DISABLED": {
            "value": "0x2",
            "desc": "The region currently has experiences disabled.",
            "type": "integer"
        },
        "XP_ERROR_EXPERIENCE_DISABLED": {
            "value": "0x8",
            "desc": "The experience owner has temporarily disabled the experience.",
            "type": "integer"
        },
        "XP_ERROR_EXPERIENCE_SUSPENDED": {
            "value": "0x9",
            "desc": "The experience has been suspended by Linden Customer Support.",
            "type": "integer"
        },
        "XP_ERROR_INVALID_EXPERIENCE": {
            "value": "0x7",
            "desc": "The script is associated with an experience that no longer exists.",
            "type": "integer"
        },
        "XP_ERROR_INVALID_PARAMETERS": {
            "value": "0x3",
            "desc": "One of the string arguments was too big to fit in the key-value store.",
            "type": "integer"
        },
        "XP_ERROR_KEY_NOT_FOUND": {
            "value": "0xE",
            "desc": "The requested key does not exist.",
            "type": "integer"
        },
        "XP_ERROR_MATURITY_EXCEEDED": {
            "value": "0x10",
            "desc": "The content rating of the experience exceeds that of the region.",
            "type": "integer"
        },
        "XP_ERROR_NONE": {
            "value": "0x0",
            "desc": "No error was detected.",
            "type": "integer"
        },
        "XP_ERROR_NOT_FOUND": {
            "value": "0x6",
            "desc": "The sim was unable to verify the validity of the experience. Retrying after a short wait is advised.",
            "type": "integer"
        },
        "XP_ERROR_NOT_PERMITTED": {
            "value": "0x4",
            "desc": "This experience is not allowed to run by the requested agent.",
            "type": "integer"
        },
        "XP_ERROR_NOT_PERMITTED_LAND": {
            "value": "0x11",
            "desc": "This experience is not allowed to run on the current region.",
            "type": "integer"
        },
        "XP_ERROR_NO_EXPERIENCE": {
            "value": "0x5",
            "desc": "This script is not associated with an experience.",
            "type": "integer"
        },
        "XP_ERROR_QUOTA_EXCEEDED": {
            "value": "0xB",
            "desc": "An attempted write data to the key-value store failed due to the data quota being met.",
            "type": "integer"
        },
        "XP_ERROR_REQUEST_PERM_TIMEOUT": {
            "value": "0x12",
            "desc": "Request timed out; permissions not modified.",
            "type": "integer"
        },
        "XP_ERROR_RETRY_UPDATE": {
            "value": "0xF",
            "desc": "A checked update failed due to an out of date request.",
            "type": "integer"
        },
        "XP_ERROR_STORAGE_EXCEPTION": {
            "value": "0xD",
            "desc": "Unable to communicate with the key-value store.",
            "type": "integer"
        },
        "XP_ERROR_STORE_DISABLED": {
            "value": "0xC",
            "desc": "The key-value store is currently disabled on this region.",
            "type": "integer"
        },
        "XP_ERROR_THROTTLED": {
            "value": "0x1",
            "desc": "The call failed due to too many recent calls.",
            "type": "integer"
        },
        "XP_ERROR_UNKNOWN_ERROR": {
            "value": "0xA",
            "desc": "Other unknown error.",
            "type": "integer"
        },
        "ZERO_ROTATION": {
            "value": "<0.0, 0.0, 0.0, 1.0>",
            "desc": "",
            "type": "rotation"
        },
        "ZERO_VECTOR": {
            "value": "<0.0, 0.0, 0.0>",
            "desc": "",
            "type": "vector"
        },
        "PRIM_RENDER_MATERIAL": {
            "value": "49",
            "desc": "",
            "type": "integer"
        },
        "CHANGED_RENDER_MATERIAL": {
            "value": "0x1000",
            "desc": "",
            "type": "integer"
        },
        "PRIM_GLTF_BASE_COLOR": {
            "value": "48",
            "desc": "",
            "type": "integer"
        },
        "PRIM_GLTF_NORMAL": {
            "value": "45",
            "desc": "",
            "type": "integer"
        },
        "PRIM_GLTF_METALLIC_ROUGHNESS": {
            "value": "47",
            "desc": "",
            "type": "integer"
        },
        "PRIM_GLTF_EMISSIVE": {
            "value": "46",
            "desc": "",
            "type": "integer"
        },
        "PRIM_GLTF_ALPHA_MODE_NONE": {
            "value": "0",
            "desc": "",
            "type": "integer"
        },
        "PRIM_GLTF_ALPHA_MODE_BLEND": {
            "value": "1",
            "desc": "",
            "type": "integer"
        },
        "PRIM_GLTF_ALPHA_MODE_MASK": {
            "value": "2",
            "desc": "",
            "type": "integer"
        }
    },
    "controls": [
        "do",
        "else",
        "for",
        "if",
        "jump",
        "return",
        "state",
        "while",
        "default"
    ],
    "events": {
        "at_rot_target": {
            "desc": "This event is triggered when a script comes within a defined angle of a target rotation. The range and rotation, are set by a call to llRotTarget.",
            "arg_numb": 3,
            "arg_0": {
                "name": "TargetNumber",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "TargetRotation",
                "type": "rotation",
                "desc": ""
            },
            "arg_2": {
                "name": "CurrentRotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "at_target": {
            "desc": "This event is triggered when the scripted object comes within a defined range of the target position, defined by the llTarget function call.",
            "arg_numb": 3,
            "arg_0": {
                "name": "TargetNumber",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "TargetPosition",
                "type": "vector",
                "desc": ""
            },
            "arg_2": {
                "name": "CurrentPosition",
                "type": "vector",
                "desc": ""
            }
        },
        "attach": {
            "desc": "This event is triggered whenever an object is attached or detached from an avatar. If it is attached, the key of the avatar it is attached to is passed in, otherwise NULL_KEY is.",
            "arg_numb": 1,
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "changed": {
            "desc": "Triggered when various events change the object. The change argument will be a bit-field of CHANGED_* constants.",
            "arg_numb": 1,
            "arg_0": {
                "name": "Changed",
                "type": "integer",
                "desc": ""
            }
        },
        "collision": {
            "desc": "This event is raised while another object, or avatar, is colliding with the object the script is attached to.\n\t\t\tThe number of detected objects is passed to the script. Information on those objects may be gathered via the llDetected* functions.",
            "arg_numb": 1,
            "arg_0": {
                "name": "NumberOfCollisions",
                "type": "integer",
                "desc": ""
            }
        },
        "collision_end": {
            "desc": "This event is raised when another object, or avatar, stops colliding with the object the script is attached to.\n\t\t\tThe number of detected objects is passed to the script. Information on those objects may be gathered via the llDetected* library functions.",
            "arg_numb": 1,
            "arg_0": {
                "name": "NumberOfCollisions",
                "type": "integer",
                "desc": ""
            }
        },
        "collision_start": {
            "desc": "This event is raised when another object, or avatar, starts colliding with the object the script is attached to.\n\t\t\tThe number of detected objects is passed to the script. Information on those objects may be gathered via the llDetected* library functions.",
            "arg_numb": 1,
            "arg_0": {
                "name": "NumberOfCollisions",
                "type": "integer",
                "desc": ""
            }
        },
        "control": {
            "desc": "Once a script has the ability to grab control inputs from the avatar, this event will be used to pass the commands into the script.\n\t\t\tThe levels and edges are bit-fields of control constants.",
            "arg_numb": 3,
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Levels",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "Edges",
                "type": "integer",
                "desc": ""
            }
        },
        "dataserver": {
            "desc": "This event is triggered when the requested data is returned to the script.\n\t\t\tData may be requested by the llRequestAgentData, llRequestInventoryData, and llGetNotecardLine function calls, for example.",
            "arg_numb": 2,
            "arg_0": {
                "name": "RequestID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Data",
                "type": "string",
                "desc": ""
            }
        },
        "email": {
            "desc": "This event is triggered when an email sent to this script arrives.\n\t\t\tThe number remaining tells how many more emails are known to be still pending.",
            "arg_numb": 5,
            "arg_0": {
                "name": "Time",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Address",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "Subject",
                "type": "string",
                "desc": ""
            },
            "arg_3": {
                "name": "Body",
                "type": "string",
                "desc": ""
            },
            "arg_4": {
                "name": "NumberRemaining",
                "type": "integer",
                "desc": ""
            }
        },
        "experience_permissions": {
            "desc": "",
            "arg_numb": 1,
            "arg_0": {
                "name": "agent_id",
                "type": "key",
                "desc": "ID of the agent approving permission for the Experience."
            }
        },
        "experience_permissions_denied": {
            "desc": "Describes why the Experience permissions were denied for the agent.",
            "arg_numb": 2,
            "arg_0": {
                "name": "agent_id",
                "type": "key",
                "desc": "ID of the agent denying permission for the Experience."
            },
            "arg_1": {
                "name": "Reason",
                "type": "integer",
                "desc": "One of the XP_ERROR_... constants describing the reason why the Experience permissions were denied for the agent."
            }
        },
        "http_request": {
            "desc": "Triggered when task receives an HTTP request.",
            "arg_numb": 3,
            "arg_0": {
                "name": "HTTPRequestID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "HTTPMethod",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "Body",
                "type": "string",
                "desc": ""
            }
        },
        "http_response": {
            "desc": "This event handler is invoked when an HTTP response is received for a pending llHTTPRequest request or if a pending request fails or times out.",
            "arg_numb": 4,
            "arg_0": {
                "name": "HTTPRequestID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Status",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "Metadata",
                "type": "list",
                "desc": ""
            },
            "arg_3": {
                "name": "Body",
                "type": "string",
                "desc": ""
            }
        },
        "land_collision": {
            "desc": "This event is raised when the object the script is attached to is colliding with the ground.",
            "arg_numb": 1,
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            }
        },
        "land_collision_end": {
            "desc": "This event is raised when the object the script is attached to stops colliding with the ground.",
            "arg_numb": 1,
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            }
        },
        "land_collision_start": {
            "desc": "This event is raised when the object the script is attached to begins to collide with the ground.",
            "arg_numb": 1,
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            }
        },
        "link_message": {
            "desc": "Triggered when object receives a link message via llMessageLinked function call.",
            "arg_numb": 4,
            "arg_0": {
                "name": "SendersLink",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Value",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_3": {
                "name": "ID",
                "type": "key",
                "desc": ""
            }
        },
        "linkset_data": {
            "desc": "Triggered when a script modifies the linkset datastore.",
            "arg_numb": 3,
            "arg_0": {
                "name": "action",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "name",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "value",
                "type": "string",
                "desc": ""
            }
        },
        "listen": {
            "desc": "This event is raised whenever a chat message matching the constraints set in the llListen command is received. The name and ID of the speaker, as well as the message, are passed in as parameters.\n\t\t\tChannel 0 is the public chat channel that all avatars see as chat text. Channels 1 through 2,147,483,648 are private channels that are not sent to avatars but other scripts can listen on those channels.",
            "arg_numb": 4,
            "arg_0": {
                "name": "Channel",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Name",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "ID",
                "type": "key",
                "desc": ""
            },
            "arg_3": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "money": {
            "desc": "This event is triggered when a resident has given an amount of Linden dollars to the object.",
            "arg_numb": 2,
            "arg_0": {
                "name": "Payer",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Amount",
                "type": "integer",
                "desc": ""
            }
        },
        "moving_end": {
            "desc": "Triggered whenever an object with this script stops moving.",
            "arg_numb": 0
        },
        "moving_start": {
            "desc": "Triggered whenever an object with this script starts moving.",
            "arg_numb": 0
        },
        "no_sensor": {
            "desc": "This event is raised when sensors are active, via the llSensor function call, but are not sensing anything.",
            "arg_numb": 0
        },
        "not_at_rot_target": {
            "desc": "When a target is set via the llRotTarget function call, but the script is outside the specified angle this event is raised.",
            "arg_numb": 0
        },
        "not_at_target": {
            "desc": "When a target is set via the llTarget library call, but the script is outside the specified range this event is raised.",
            "arg_numb": 0
        },
        "object_rez": {
            "desc": "Triggered when an object rezzes another object from its inventory via the llRezObject, or similar, functions. The id is the globally unique key for the object rezzed.",
            "arg_numb": 1,
            "arg_0": {
                "name": "RezzedObjectsID",
                "type": "key",
                "desc": ""
            }
        },
        "on_rez": {
            "desc": "Triggered whenever an object is rezzed from inventory or by another object. The start parameter is passed in from the llRezObject call, or zero if from inventory.",
            "arg_numb": 1,
            "arg_0": {
                "name": "StartParameter",
                "type": "integer",
                "desc": ""
            }
        },
        "path_update": {
            "desc": "This event is called to inform the script of changes within the object&#39;s path-finding status.",
            "arg_numb": 2,
            "arg_0": {
                "name": "Type",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Reserved",
                "type": "list",
                "desc": ""
            }
        },
        "remote_data": {
            "desc": "Triggered by various XML-RPC calls with event_type specifying the type of data.",
            "arg_numb": 6,
            "arg_0": {
                "name": "EventType",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "ChannelID",
                "type": "key",
                "desc": ""
            },
            "arg_2": {
                "name": "MessageID",
                "type": "key",
                "desc": ""
            },
            "arg_3": {
                "name": "Sender",
                "type": "string",
                "desc": ""
            },
            "arg_4": {
                "name": "Data",
                "type": "integer",
                "desc": ""
            },
            "arg_5": {
                "name": "Data",
                "type": "string",
                "desc": ""
            }
        },
        "run_time_permissions": {
            "desc": "Scripts need permission from either the owner or the avatar they wish to act on before they may perform certain functions, such as debiting money from their owners account, triggering an animation on an avatar, or capturing control inputs. The llRequestPermissions library function is used to request these permissions and the various permissions integer constants can be supplied.\n\t\t\tThe integer returned to this event handler contains the current set of permissions flags, so if permissions equal 0 then no permissions are set.",
            "arg_numb": 1,
            "arg_0": {
                "name": "PermissionFlags",
                "type": "integer",
                "desc": ""
            }
        },
        "sensor": {
            "desc": "This event is raised whenever objects matching the constraints of the llSensor command are detected.\n\t\t\tThe number of detected objects is passed to the script in the parameter. Information on those objects may be gathered via the llDetected* functions.",
            "arg_numb": 1,
            "arg_0": {
                "name": "NumberDetected",
                "type": "integer",
                "desc": ""
            }
        },
        "state_entry": {
            "desc": "The state_entry event occurs whenever a new state is entered, including at program start, and is always the first event handled.",
            "arg_numb": 0
        },
        "state_exit": {
            "desc": "The state_exit event occurs whenever the state command is used to transition to another state. It is handled before the new states state_entry event.",
            "arg_numb": 0
        },
        "timer": {
            "desc": "This event is raised at regular intervals set by the llSetTimerEvent library function.",
            "arg_numb": 0
        },
        "touch": {
            "desc": "This event is raised while a user is touching the object the script is attached to.\n\t\t\tThe number of touching objects is passed to the script in the parameter.\n\t\t\tInformation on those objects may be gathered via the llDetected* library functions.",
            "arg_numb": 1,
            "arg_0": {
                "name": "NumberOfTouches",
                "type": "integer",
                "desc": ""
            }
        },
        "touch_end": {
            "desc": "This event is raised when a user stops touching the object the script is attached to. The number of touches is passed to the script in the parameter.\n\t\t\tInformation on those objects may be gathered via the llDetected* library functions.",
            "arg_numb": 1,
            "arg_0": {
                "name": "NumberOfTouches",
                "type": "integer",
                "desc": ""
            }
        },
        "touch_start": {
            "desc": "This event is raised when a user first touches the object the script is attached to. The number of touches is passed to the script in the parameter.\n\t\t\tInformation on those objects may be gathered via the llDetected() library functions.",
            "arg_numb": 1,
            "arg_0": {
                "name": "NumberOfTouches",
                "type": "integer",
                "desc": ""
            }
        },
        "transaction_result": {
            "desc": "Triggered by llTransferMoney() function.",
            "arg_numb": 3,
            "arg_0": {
                "name": "RequestID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Success",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "Message",
                "type": "string",
                "desc": ""
            }
        }
    },
    "functions": {
        "llAbs": {
            "desc": "Returns the absolute (positive) version of Value.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Value",
                "type": "integer",
                "desc": "An integer value."
            }
        },
        "llAcos": {
            "desc": "Returns the arc-cosine of Value, in radians.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": "A floating-point value."
            }
        },
        "llAddToLandBanList": {
            "desc": "Add avatar ID to the parcel ban list for the specified number of Hours.\\nA value of 0 for Hours will add the agent indefinitely.\\nThe smallest value that Hours will accept is 0.01; anything smaller will be seen as 0.\\nWhen values that small are used, it seems the function bans in approximately 30 second increments (Probably 36 second increments, as 0.01 of an hour is 36 seconds).\\nResidents teleporting to a parcel where they are banned will be redirected to a neighbouring parcel.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": "Agent UUID to add to ban-list."
            },
            "arg_1": {
                "name": "Hours",
                "type": "float",
                "desc": "Period, in hours, to ban the avatar for."
            }
        },
        "llAddToLandPassList": {
            "desc": "Add avatar ID to the land pass list, for a duration of Hours.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": "Agent UUID to add to pass-list."
            },
            "arg_1": {
                "name": "Hours",
                "type": "float",
                "desc": "Period, in hours, to allow the avatar for."
            }
        },
        "llAdjustSoundVolume": {
            "desc": "Adjusts the volume (0.0 - 1.0) of the currently playing attached sound.\\nThis function has no effect on sounds started with llTriggerSound.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Volume",
                "type": "float",
                "desc": "The volume to set."
            }
        },
        "llAgentInExperience": {
            "desc": "\n               Returns TRUE if the agent is in the Experience and the Experience can run in the current location.\n            ",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "AgentID",
                "type": "key",
                "desc": ""
            }
        },
        "llAllowInventoryDrop": {
            "desc": "If Flag == TRUE, users without object modify permissions can still drop inventory items into the object.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Flag",
                "type": "integer",
                "desc": "Boolean, If TRUE allows anyone to drop inventory on prim, FALSE revokes."
            }
        },
        "llAngleBetween": {
            "desc": "Returns the angle, in radians, between rotations Rot1 and Rot2.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Rot1",
                "type": "rotation",
                "desc": "First rotation."
            },
            "arg_1": {
                "name": "Rot2",
                "type": "rotation",
                "desc": "Second rotation."
            }
        },
        "llApplyImpulse": {
            "desc": "Applies impulse to the object.\\nIf Local == TRUE, apply the Force in local coordinates; otherwise, apply the Force in global coordinates.\\nThis function only works on physical objects.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Force",
                "type": "vector",
                "desc": "Amount of impulse force to apply."
            },
            "arg_1": {
                "name": "Local",
                "type": "integer",
                "desc": "Boolean, if TRUE, force is treated as a local directional vector instead of region directional vector."
            }
        },
        "llApplyRotationalImpulse": {
            "desc": "Applies rotational impulse to the object.\\nIf Local == TRUE, apply the Force in local coordinates; otherwise, apply the Force in global coordinates.\\nThis function only works on physical objects.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Force",
                "type": "vector",
                "desc": "Amount of impulse force to apply."
            },
            "arg_1": {
                "name": "Local",
                "type": "integer",
                "desc": "Boolean, if TRUE, uses local axis, if FALSE, uses region axis."
            }
        },
        "llAsin": {
            "desc": "Returns the arc-sine, in radians, of Value.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": "A floating-point value."
            }
        },
        "llAtan2": {
            "desc": "Returns the arc-tangent2 of y, x.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "y",
                "type": "float",
                "desc": "A floating-point value."
            },
            "arg_1": {
                "name": "x",
                "type": "float",
                "desc": "A floating-point value."
            }
        },
        "llAttachToAvatar": {
            "desc": "Attach to avatar at point AttachmentPoint.\\nRequires the PERMISSION_ATTACH runtime permission.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AttachmentPoint",
                "type": "integer",
                "desc": ""
            }
        },
        "llAttachToAvatarTemp": {
            "desc": "Follows the same convention as llAttachToAvatar, with the exception that the object will not create new inventory for the user, and will disappear on detach or disconnect.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AttachPoint",
                "type": "integer",
                "desc": "Valid attachment point or ATTACH_* constant."
            }
        },
        "llAvatarOnLinkSitTarget": {
            "desc": "If an avatar is sitting on the link&#39;s sit target, return the avatar&#39;s key, NULL_KEY otherwise.\\nReturns a key that is the UUID of the user seated on the specified link&#39;s prim.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag."
            }
        },
        "llAvatarOnSitTarget": {
            "desc": "If an avatar is seated on the sit target, returns the avatar&#39;s key, otherwise NULL_KEY.\\nThis only will detect avatars sitting on sit targets defined with llSitTarget.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llAxes2Rot": {
            "desc": "Returns the rotation represented by coordinate axes Forward, Left, and Up.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation",
            "arg_0": {
                "name": "Forward",
                "type": "vector",
                "desc": "Forward/Back part of rotation."
            },
            "arg_1": {
                "name": "Left",
                "type": "vector",
                "desc": "Left/Right part of rotation."
            },
            "arg_2": {
                "name": "Up",
                "type": "vector",
                "desc": "Up/Down part of rotation."
            }
        },
        "llAxisAngle2Rot": {
            "desc": "Returns the rotation that is a generated Angle about Axis.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation",
            "arg_0": {
                "name": "Axis",
                "type": "vector",
                "desc": "Axis."
            },
            "arg_1": {
                "name": "Angle",
                "type": "float",
                "desc": "Angle in radians."
            }
        },
        "llBase64ToInteger": {
            "desc": "Returns an integer that is the Text, Base64 decoded as a big endian integer.\\nReturns zero if Text is longer then 8 characters. If Text contains fewer then 6 characters, the return value is unpredictable.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llBase64ToString": {
            "desc": "Converts a Base64 string to a conventional string.\\nIf the conversion creates any unprintable characters, they are converted to question marks.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llBreakAllLinks": {
            "desc": "De-links all prims in the link set (requires permission PERMISSION_CHANGE_LINKS be set).",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llBreakLink": {
            "desc": "De-links the prim with the given link number (requires permission PERMISSION_CHANGE_LINKS be set).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": ""
            }
        },
        "llCSV2List": {
            "desc": "Create a list from a string of comma separated values specified in Text.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llCastRay": {
            "desc": "Casts a ray into the physics world from &#39;start&#39; to &#39;end&#39; and returns data according to details in Options.\\nReports collision data for intersections with objects.\\nReturn value: [UUID_1, {link_number_1}, hit_position_1, {hit_normal_1}, UUID_2, {link_number_2}, hit_position_2, {hit_normal_2}, ... , status_code] where {} indicates optional data.",
            "arg_numb": 3,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Start",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "End",
                "type": "vector",
                "desc": ""
            },
            "arg_2": {
                "name": "Options",
                "type": "list",
                "desc": ""
            }
        },
        "llCeil": {
            "desc": "Returns smallest integer value &#62;= Value.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": ""
            }
        },
        "llChar": {
            "desc": "Returns a single character string that is the representation of the unicode value.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "value",
                "type": "integer",
                "desc": "Unicode value to convert into a string."
            }
        },
        "llClearCameraParams": {
            "desc": "Resets all camera parameters to default values and turns off scripted camera control.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llClearLinkMedia": {
            "desc": "Clears (deletes) the media and all parameters from the given Face on the linked prim.\\nReturns an integer that is a STATUS_* flag, which details the success/failure of the operation.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Link",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llClearPrimMedia": {
            "desc": "Clears (deletes) the media and all parameters from the given Face.\\nReturns an integer that is a STATUS_* flag which details the success/failure of the operation.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Face",
                "type": "integer",
                "desc": "Number of side to clear."
            }
        },
        "llCloseRemoteDataChannel": {
            "desc": "Closes the specified XML-RPC channel.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ChannelID",
                "type": "key",
                "desc": ""
            }
        },
        "llCloud": {
            "desc": "Returns the cloud density at the object&#39;s position + Offset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llCollisionFilter": {
            "desc": "Specify an empty string or NULL_KEY for Accept, to not filter on the corresponding parameter.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ObjectName",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "ObjectID",
                "type": "key",
                "desc": ""
            },
            "arg_2": {
                "name": "Accept",
                "type": "integer",
                "desc": "If TRUE, only accept collisions with ObjectName name AND ObjectID (either is optional), otherwise with objects not ObjectName AND ObjectID."
            }
        },
        "llCollisionSound": {
            "desc": "Suppress default collision sounds, replace default impact sounds with ImpactSound.\\nThe ImpactSound must be in the object inventory.\\nSupply an empty string to suppress collision sounds.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ImpactSound",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "ImpactVolume",
                "type": "float",
                "desc": ""
            }
        },
        "llCollisionSprite": {
            "desc": "Suppress default collision sprites, replace default impact sprite with ImpactSprite; found in the object inventory (empty string to just suppress).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ImpactSprite",
                "type": "string",
                "desc": ""
            }
        },
        "llCos": {
            "desc": "Returns the cosine of Theta (Theta in radians).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Theta",
                "type": "float",
                "desc": ""
            }
        },
        "llCreateCharacter": {
            "desc": "Convert link-set to AI/Physics character.\\nCreates a path-finding entity, known as a &#34;character&#34;, from the object containing the script. Required to activate use of path-finding functions.\\nOptions is a list of key/value pairs.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Options",
                "type": "list",
                "desc": ""
            }
        },
        "llCreateKeyValue": {
            "desc": "\n               Starts an asychronous transaction to create a key-value pair. Will fail with XP_ERROR_STORAGE_EXCEPTION if the key already exists. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is a two element commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the value passed to the function.\n            ",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "Key",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Value",
                "type": "string",
                "desc": ""
            }
        },
        "llCreateLink": {
            "desc": "Attempt to link the object the script is in, to target (requires permission PERMISSION_CHANGE_LINKS be set).\\nRequires permission PERMISSION_CHANGE_LINKS be set.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "TargetPrim",
                "type": "key",
                "desc": "Object UUID that is in the same region."
            },
            "arg_1": {
                "name": "Parent",
                "type": "integer",
                "desc": "If FALSE, then TargetPrim becomes the root. If TRUE, then the script&#39;s object becomes the root."
            }
        },
        "llDataSizeKeyValue": {
            "desc": "\n               Starts an asychronous transaction the request the used and total amount of data allocated for the Experience. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the the amount in use and the third item will be the total available.\n            ",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llDeleteCharacter": {
            "desc": "Convert link-set from AI/Physics character to Physics object.\\nConvert the current link-set back to a standard object, removing all path-finding properties.",
            "arg_numb": 0,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llDeleteKeyValue": {
            "desc": "\n               Starts an asychronous transaction to delete a key-value pair. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is a two element commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the value associated with the key.\n            ",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "Key",
                "type": "string",
                "desc": ""
            }
        },
        "llDeleteSubList": {
            "desc": "Removes the slice from start to end and returns the remainder of the list.\\nRemove a slice from the list and return the remainder, start and end are inclusive.\\nUsing negative numbers for start and/or end causes the index to count backwards from the length of the list, so 0, -1 would delete the entire list.\\nIf Start is larger than End the list deleted is the exclusion of the entries; so 6, 4 would delete the entire list except for the 5th. list entry.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Source",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Start",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "End",
                "type": "integer",
                "desc": ""
            }
        },
        "llDeleteSubString": {
            "desc": "Removes the indicated sub-string and returns the result.\\nStart and End are inclusive.\\nUsing negative numbers for Start and/or End causes the index to count backwards from the length of the string, so 0, -1 would delete the entire string.\\nIf Start is larger than End, the sub-string is the exclusion of the entries; so 6, 4 would delete the entire string except for the 5th. character.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Source",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Start",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "End",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetachFromAvatar": {
            "desc": "Remove the object containing the script from the avatar.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llDetectedGrab": {
            "desc": "Returns the grab offset of a user touching the object.\\nReturns &#60;0.0, 0.0, 0.0&#62; if Number is not a valid object.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetectedGroup": {
            "desc": "Returns TRUE if detected object or agent Number has the same user group active as this object.\\nIt will return FALSE if the object or agent is in the group, but the group is not active.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetectedKey": {
            "desc": "Returns the key of detected object or avatar number.\\nReturns NULL_KEY if Number is not a valid index.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetectedLinkNumber": {
            "desc": "Returns the link position of the triggered event for touches and collisions only.\\n0 for a non-linked object, 1 for the root of a linked object, 2 for the first child, etc.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetectedName": {
            "desc": "Returns the name of detected object or avatar number.\\nReturns the name of detected object number.\\nReturns empty string if Number is not a valid index.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetectedOwner": {
            "desc": "Returns the key of detected object&#39;s owner.\\nReturns invalid key if Number is not a valid index.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetectedPos": {
            "desc": "Returns the position of detected object or avatar number.\\nReturns &#60;0.0, 0.0, 0.0&#62; if Number is not a valid index.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetectedRot": {
            "desc": "Returns the rotation of detected object or avatar number.\\nReturns &#60;0.0, 0.0, 0.0, 1.0&#62; if Number is not a valid offset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetectedTouchBinormal": {
            "desc": "Returns the surface bi-normal for a triggered touch event.\\nReturns a vector that is the surface bi-normal (tangent to the surface) where the touch event was triggered.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Index",
                "type": "integer",
                "desc": "Index of detection information"
            }
        },
        "llDetectedTouchFace": {
            "desc": "Returns the index of the face where the avatar clicked in a triggered touch event.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Index",
                "type": "integer",
                "desc": "Index of detection information"
            }
        },
        "llDetectedTouchNormal": {
            "desc": "Returns the surface normal for a triggered touch event.\\nReturns a vector that is the surface normal (perpendicular to the surface) where the touch event was triggered.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Index",
                "type": "integer",
                "desc": "Index of detection information"
            }
        },
        "llDetectedTouchPos": {
            "desc": "Returns the position, in region coordinates, where the object was touched in a triggered touch event.\\nUnless it is a HUD, in which case it returns the position relative to the attach point.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Index",
                "type": "integer",
                "desc": "Index of detected information"
            }
        },
        "llDetectedTouchST": {
            "desc": "Returns a vector that is the surface coordinates where the prim was touched.\\nThe X and Y vector positions contain the horizontal (S) and vertical (T) face coordinates respectively.\\nEach component is in the interval [0.0, 1.0].\\nTOUCH_INVALID_TEXCOORD is returned if the surface coordinates cannot be determined (e.g. when the viewer does not support this function).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Index",
                "type": "integer",
                "desc": "Index of detection information"
            }
        },
        "llDetectedTouchUV": {
            "desc": "Returns a vector that is the texture coordinates for where the prim was touched.\\nThe X and Y vector positions contain the U and V face coordinates respectively.\\nTOUCH_INVALID_TEXCOORD is returned if the touch UV coordinates cannot be determined (e.g. when the viewer does not support this function).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Index",
                "type": "integer",
                "desc": "Index of detection information"
            }
        },
        "llDetectedType": {
            "desc": "Returns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object.\\nReturns 0 if number is not a valid index.\\nNote that number is a bit-field, so comparisons need to be a bitwise checked. e.g.:\\ninteger iType = llDetectedType(0);\\n{\\n\t// ...do stuff with the agent\\n}",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDetectedVel": {
            "desc": "Returns the velocity of the detected object Number.\\nReturns&#60;0.0, 0.0, 0.0&#62; if Number is not a valid offset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            }
        },
        "llDialog": {
            "desc": "Shows a dialog box on the avatar&#39;s screen with the message.\\n\n\t\t\t\tUp to 12 strings in the list form buttons.\\n\n\t\t\t\tIf a button is clicked, the name is chatted on Channel.\\nOpens a &#34;notify box&#34; in the given avatars screen displaying the message.\\n\n\t\t\tUp to twelve buttons can be specified in a list of strings. When the user clicks a button, the name of the button is said on the specified channel.\\n\n\t\t\tChannels work just like llSay(), so channel 0 can be heard by everyone.\\n\n\t\t\tThe chat originates at the object&#39;s position, not the avatar&#39;s position, even though it is said as the avatar (uses avatar&#39;s UUID and Name etc.).\\n\n\t\t\tExamples:\\n\n\t\t\tllDialog(who, &#34;Are you a boy or a girl?&#34;, [ &#34;Boy&#34;, &#34;Girl&#34; ], -4913);\\n\n\t\t\tllDialog(who, &#34;This shows only an OK button.&#34;, [], -192);\\n\n\t\t\tllDialog(who, &#34;This chats so you can &#39;hear&#39; it.&#34;, [&#34;Hooray&#34;], 0);",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "Buttons",
                "type": "list",
                "desc": ""
            },
            "arg_3": {
                "name": "Channel",
                "type": "integer",
                "desc": ""
            }
        },
        "llDie": {
            "desc": "Delete the object which holds the script.",
            "arg_numb": 0,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llDumpList2String": {
            "desc": "Returns the list as a single string, using Separator between the entries.\\nWrite the list out as a single string, using Separator between values.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Source",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Separator",
                "type": "string",
                "desc": ""
            }
        },
        "llEdgeOfWorld": {
            "desc": "Checks to see whether the border hit by Direction from Position is the edge of the world (has no neighboring region).\\nReturns TRUE if the line along Direction from Position hits the edge of the world in the current simulator, returns FALSE if that edge crosses into another simulator.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "Direction",
                "type": "vector",
                "desc": ""
            }
        },
        "llEjectFromLand": {
            "desc": "Ejects AvatarID from land that you own.\\nEjects AvatarID from land that the object owner (group or resident) owns.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llEmail": {
            "desc": "Sends email to Address with Subject and Message.\\nSends an email to Address with Subject and Message.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 20,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Address",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Subject",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llEscapeURL": {
            "desc": "Returns an escaped/encoded version of url, replacing spaces with %20 etc.\\nReturns the string that is the URL-escaped version of URL (replacing spaces with %20, etc.).\\n\n\t\t\tThis function returns the UTF-8 encoded escape codes for selected characters.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "URL",
                "type": "string",
                "desc": ""
            }
        },
        "llEuler2Rot": {
            "desc": "Returns the rotation representation of the Euler angles.\\nReturns the rotation represented by the Euler Angle.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation",
            "arg_0": {
                "name": "Vector",
                "type": "vector",
                "desc": ""
            }
        },
        "llEvade": {
            "desc": "Evade a specified target.\\nCharacters will (roughly) try to hide from their pursuers if there is a good hiding spot along their fleeing path. Hiding means no direct line of sight from the head of the character (centre of the top of its physics bounding box) to the head of its pursuer and no direct path between the two on the navigation-mesh.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "TargetID",
                "type": "key",
                "desc": "Agent or object to evade."
            },
            "arg_1": {
                "name": "Options",
                "type": "list",
                "desc": "No options yet."
            }
        },
        "llExecCharacterCmd": {
            "desc": "Execute a character command.\\nSend a command to the path system.\\nCurrently only supports stopping the current path-finding operation or causing the character to jump.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Command",
                "type": "integer",
                "desc": "Command to send."
            },
            "arg_1": {
                "name": "Options",
                "type": "list",
                "desc": "Height for CHARACTER_CMD_JUMP."
            }
        },
        "llFabs": {
            "desc": "Returns the positive version of Value.\\nReturns the absolute value of Value.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": ""
            }
        },
        "llFleeFrom": {
            "desc": "Flee from a point.\\nDirects a character (llCreateCharacter) to keep away from a defined position in the region or adjacent regions.",
            "arg_numb": 3,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Source",
                "type": "vector",
                "desc": "Global coordinate from which to flee."
            },
            "arg_1": {
                "name": "Distance",
                "type": "float",
                "desc": "Distance in meters to flee from the source."
            },
            "arg_2": {
                "name": "Options",
                "type": "list",
                "desc": "No options available at this time."
            }
        },
        "llFloor": {
            "desc": "Returns largest integer value &#60;= Value.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": ""
            }
        },
        "llForceMouselook": {
            "desc": "If Enable is TRUE any avatar that sits on this object is forced into mouse-look mode.\\nAfter calling this function with Enable set to TRUE, any agent sitting down on the prim will be forced into mouse-look.\\nJust like llSitTarget, this changes a permanent property of the prim (not the object) and needs to be reset by calling this function with Enable set to FALSE in order to disable it.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Enable",
                "type": "integer",
                "desc": "Boolean, if TRUE when an avatar sits on the prim, the avatar will be forced into mouse-look mode.\\nFALSE is the default setting and will undo a previously set TRUE or do nothing."
            }
        },
        "llFrand": {
            "desc": "Returns a pseudo random number in the range [0, Magnitude] or [Magnitude, 0].\\nReturns a pseudo-random number between [0, Magnitude].",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Magnitude",
                "type": "float",
                "desc": ""
            }
        },
        "llGenerateKey": {
            "desc": "Generates a key (SHA-1 hash) using UUID generation to create a unique key.\\nAs the UUID produced is versioned, it should never return a value of NULL_KEY.\\nThe specific UUID version is an implementation detail that has changed in the past and may change again in the future. Do not depend upon the UUID that is returned to be version 5 SHA-1 hash.",
            "arg_numb": 0,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llGetAccel": {
            "desc": "Returns the acceleration of the object relative to the region&#39;s axes.\\nGets the acceleration of the object.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetAgentInfo": {
            "desc": "Returns an integer bit-field containing the agent information about id.\\n\n\t\t\t\tReturns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING and/or AGENT_IN_AIR.\\nReturns information about the given agent ID as a bit-field of agent info constants.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetAgentLanguage": {
            "desc": "Returns the language code of the preferred interface language of the avatar.\\nReturns a string that is the language code of the preferred interface language of the resident.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetAgentList": {
            "desc": "Requests a list of agents currently in the region, limited by the scope parameter.\\nReturns a list [key UUID-0, key UUID-1, ..., key UUID-n] or [string error_msg] - returns avatar keys for all agents in the region limited to the area(s) specified by scope",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Scope",
                "type": "integer",
                "desc": "The scope (region, parcel, parcel same owner) to return agents for."
            },
            "arg_1": {
                "name": "Options",
                "type": "list",
                "desc": "List of options to apply. Current unused."
            }
        },
        "llGetAgentSize": {
            "desc": "If the avatar is in the same region, returns the size of the bounding box of the requested avatar by id, otherwise returns ZERO_VECTOR.\\nIf the agent is in the same region as the object, returns the size of the avatar.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetAlpha": {
            "desc": "Returns the alpha value of Face.\\nReturns the &#39;alpha&#39; of the given face. If face is ALL_SIDES the value returned is the mean average of all faces.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetAndResetTime": {
            "desc": "Returns the script time in seconds and then resets the script timer to zero.\\nGets the time in seconds since starting and resets the time to zero.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetAnimation": {
            "desc": "Returns the name of the currently playing locomotion animation for the avatar id.\\nReturns the currently playing animation for the specified avatar ID.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetAnimationList": {
            "desc": "Returns a list of keys of playing animations for an avatar.\\nReturns a list of keys of all playing animations for the specified avatar ID.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetAnimationOverride": {
            "desc": "Returns a string that is the name of the animation that is used for the specified animation state\\nTo use this function the script must obtain either the PERMISSION_OVERRIDE_ANIMATIONS or PERMISSION_TRIGGER_ANIMATION permission (automatically granted to attached objects).",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "AnimationState",
                "type": "string",
                "desc": ""
            }
        },
        "llGetAttached": {
            "desc": "Returns the object&#39;s attachment point, or 0 if not attached.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetAttachedList": {
            "desc": "Returns a list of keys of all visible (not HUD) attachments on the avatar identified by the ID argument",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": "Avatar to get attachments"
            }
        },
        "llGetBoundingBox": {
            "desc": "Returns the bounding box around the object (including any linked prims) relative to its root prim, as a list in the format [ (vector) min_corner, (vector) max_corner ].",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetCameraPos": {
            "desc": "Returns the current camera position for the agent the task has permissions for.\\nReturns the position of the camera, of the user that granted the script PERMISSION_TRACK_CAMERA. If no user has granted the permission, it returns ZERO_VECTOR.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetCameraRot": {
            "desc": "Returns the current camera orientation for the agent the task has permissions for. If no user has granted the PERMISSION_TRACK_CAMERA permission, returns ZERO_ROTATION.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation"
        },
        "llGetCenterOfMass": {
            "desc": "Returns the prim&#39;s centre of mass (unless called from the root prim, where it returns the object&#39;s centre of mass).",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetClosestNavPoint": {
            "desc": "Get the closest navigable point to the point provided.\\nThe function accepts a point in region-local space (like all the other path-finding methods) and returns either an empty list or a list containing a single vector which is the closest point on the navigation-mesh to the point provided.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Point",
                "type": "vector",
                "desc": "A point in region-local space."
            },
            "arg_1": {
                "name": "Options",
                "type": "list",
                "desc": "No options at this time."
            }
        },
        "llGetColor": {
            "desc": "Returns the color on Face.\\nReturns the color of Face as a vector of red, green, and blue values between 0 and 1. If face is ALL_SIDES the color returned is the mean average of each channel.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetCreator": {
            "desc": "Returns a key for the creator of the prim.\\nReturns the key of the object&#39;s original creator. Similar to llGetOwner.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llGetDate": {
            "desc": "Returns the current date in the UTC time zone in the format YYYY-MM-DD.\\nReturns the current UTC date as YYYY-MM-DD.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string"
        },
        "llGetDayLength": {
            "desc": "Returns the number of seconds in a day on this parcel.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetDayOffset": {
            "desc": "Returns the number of seconds in a day is offset from midnight in this parcel.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetDisplayName": {
            "desc": "Returns the display name of an avatar, if the avatar is connected to the current region, or if the name has been cached.  Otherwise, returns an empty string. Use llRequestDisplayName if the avatar may be absent from the region.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": "Avatar UUID that is in the same region, or is otherwise known to the region."
            }
        },
        "llGetEnergy": {
            "desc": "Returns how much energy is in the object as a percentage of maximum.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetEnv": {
            "desc": "Returns a string with the requested data about the region.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "DataRequest",
                "type": "string",
                "desc": "The type of data to request. Any other string will cause an empty string to be returned."
            }
        },
        "llGetEnvironment": {
            "desc": "Returns a string with the requested data about the region.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": "Location within the region."
            },
            "arg_1": {
                "name": "EnvParams",
                "type": "list",
                "desc": "List of environment settings requested for the specified parcel location."
            }
        },
        "llGetExperienceDetails": {
            "desc": "\n               Returns a list with the following Experience properties: [Experience Name, Owner ID, Group ID, Experience ID, State, State Message]. State is an integer corresponding to one of the constants XP_ERROR_... and State Message is the string returned by llGetExperienceErrorMessage for that integer.\n            ",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "ExperienceID",
                "type": "key",
                "desc": "May be NULL_KEY to retrieve the details for the script&#39;s Experience"
            }
        },
        "llGetExperienceErrorMessage": {
            "desc": "\n               Returns a string describing the error code passed or the string corresponding with XP_ERROR_UNKNOWN_ERROR if the value is not a valid Experience error code.\n            ",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Error",
                "type": "integer",
                "desc": "An Experience error code to translate."
            }
        },
        "llGetForce": {
            "desc": "Returns the force (if the script is physical).\\nReturns the current force if the script is physical.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetFreeMemory": {
            "desc": "Returns the number of free bytes of memory the script can use.\\nReturns the available free space for the current script. This is inaccurate with LSO.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetFreeURLs": {
            "desc": "Returns the number of available URLs for the current script.\\nReturns an integer that is the number of available URLs.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetGMTclock": {
            "desc": "Returns the time in seconds since midnight GMT.\\nGets the time in seconds since midnight in GMT/UTC.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetGeometricCenter": {
            "desc": "Returns the vector that is the geometric center of the object relative to the root prim.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetHTTPHeader": {
            "desc": "Returns the value for header for request_id.\\nReturns a string that is the value of the Header for HTTPRequestID.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "HTTPRequestID",
                "type": "key",
                "desc": "A valid HTTP request key"
            },
            "arg_1": {
                "name": "Header",
                "type": "string",
                "desc": "Header value name"
            }
        },
        "llGetInventoryAcquireTime": {
            "desc": "Returns the time at which the item was placed into this prim&#39;s inventory as a timestamp.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": "Name of item in prim inventory."
            }
        },
        "llGetInventoryCreator": {
            "desc": "Returns a key for the creator of the inventory item.\\nThis function returns the UUID of the creator of item. If item is not found in inventory, the object says &#34;No item named &#39;name&#39;&#34;.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": ""
            }
        },
        "llGetInventoryKey": {
            "desc": "Returns the key that is the UUID of the inventory named.\\nReturns the key of the inventory named.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": ""
            }
        },
        "llGetInventoryName": {
            "desc": "Returns the name of the inventory item of a given type, specified by index number.\\nUse the inventory constants INVENTORY_* to specify the type.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "InventoryType",
                "type": "integer",
                "desc": "Inventory item type"
            },
            "arg_1": {
                "name": "Index",
                "type": "integer",
                "desc": "Index number of inventory item."
            }
        },
        "llGetInventoryNumber": {
            "desc": "Returns the quantity of items of a given type (INVENTORY_* flag) in the prim&#39;s inventory.\\nUse the inventory constants INVENTORY_* to specify the type.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "InventoryType",
                "type": "integer",
                "desc": "Inventory item type"
            }
        },
        "llGetInventoryPermMask": {
            "desc": "Returns the requested permission mask for the inventory item.\\nReturns the requested permission mask for the inventory item defined by InventoryItem. If item is not in the object&#39;s inventory, llGetInventoryPermMask returns FALSE and causes the object to say &#34;No item named &#39;&#60;item&#62;&#39;&#34;, where &#34;&#60;item&#62;&#34; is item.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": "Inventory item name."
            },
            "arg_1": {
                "name": "BitMask",
                "type": "integer",
                "desc": "MASK_BASE, MASK_OWNER, MASK_GROUP, MASK_EVERYONE or MASK_NEXT"
            }
        },
        "llGetInventoryType": {
            "desc": "Returns the type of the named inventory item.\\nLike all inventory functions, llGetInventoryType is case-sensitive.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": ""
            }
        },
        "llGetKey": {
            "desc": "Returns the key of the prim the script is attached to.\\nGet the key for the object which has this script.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llGetLandOwnerAt": {
            "desc": "Returns the key of the land owner, returns NULL_KEY if public.\\nReturns the key of the land owner at Position, or NULL_KEY if public.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            }
        },
        "llGetLinkKey": {
            "desc": "Returns the key of the linked prim LinkNumber.\\nReturns the key of LinkNumber in the link set.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetLinkMedia": {
            "desc": "Get the media parameters for a particular face on linked prim, given the desired list of parameter names. Returns a list of values in the order requested.\tReturns an empty list if no media exists on the face.",
            "arg_numb": 3,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag"
            },
            "arg_1": {
                "name": "Face",
                "type": "integer",
                "desc": "The prim&#39;s side number"
            },
            "arg_2": {
                "name": "Parameters",
                "type": "list",
                "desc": "A list of PRIM_* property constants to return values of."
            }
        },
        "llGetLinkName": {
            "desc": "Returns the name of LinkNumber in a link set.\\nReturns the name of LinkNumber the link set.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetLinkNumber": {
            "desc": "Returns the link number of the prim containing the script (0 means not linked, 1 the prim is the root, 2 the prim is the first child, etc.).\\nReturns the link number of the prim containing the script. 0 means no link, 1 the root, 2 for first child, etc.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetLinkNumberOfSides": {
            "desc": "Returns the number of sides of the specified linked prim.\\nReturns an integer that is the number of faces (or sides) of the prim link.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag."
            }
        },
        "llGetLinkPrimitiveParams": {
            "desc": "Returns the list of primitive attributes requested in the Parameters list for LinkNumber.\\nPRIM_* flags can be broken into three categories, face flags, prim flags, and object flags.\\n* Supplying a prim or object flag will return that flags attributes.\\n* Face flags require the user to also supply a face index parameter.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag."
            },
            "arg_1": {
                "name": "Parameters",
                "type": "list",
                "desc": "PRIM_* flags."
            }
        },
        "llGetListEntryType": {
            "desc": "Returns the type of the index entry in the list (TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list).\\nReturns the type of the variable at Index in ListVariable.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Index",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetListLength": {
            "desc": "Returns the number of elements in the list.\\nReturns the number of elements in ListVariable.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            }
        },
        "llGetLocalPos": {
            "desc": "Returns the position relative to the root.\\nReturns the local position of a child object relative to the root.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetLocalRot": {
            "desc": "Returns the rotation local to the root.\\nReturns the local rotation of a child object relative to the root.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation"
        },
        "llGetMass": {
            "desc": "Returns the mass of object that the script is attached to.\\nReturns the scripted object&#39;s mass. When called from a script in a link-set, the parent will return the sum of the link-set weights, while a child will return just its own mass. When called from a script inside an attachment, this function will return the mass of the avatar it&#39;s attached to, not its own.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetMassMKS": {
            "desc": "Acts as llGetMass(), except that the units of the value returned are Kg.",
            "arg_numb": 0,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetMaxScaleFactor": {
            "desc": "Returns the largest multiplicative uniform scale factor that can be successfully applied (via llScaleByFactor()) to the object without violating prim size or linkability rules.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetMemoryLimit": {
            "desc": "Get the maximum memory a script can use, in bytes.",
            "arg_numb": 0,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetMinScaleFactor": {
            "desc": "Returns the smallest multiplicative uniform scale factor that can be successfully applied (via llScaleByFactor()) to the object without violating prim size or linkability rules.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetMoonDirection": {
            "desc": "Returns a normalized vector of the direction of the moon in the parcel.\\nReturns the moon&#39;s direction on the simulator in the parcel.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetMoonRotation": {
            "desc": "Returns the rotation applied to the moon in the parcel.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation"
        },
        "llGetNextEmail": {
            "desc": "Fetch the next queued email with that matches the given address and/or subject, via the email event.\\nIf the parameters are blank, they are not used for filtering.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Address",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Subject",
                "type": "string",
                "desc": ""
            }
        },
        "llGetNotecardLine": {
            "desc": "Returns LineNumber from NotecardName via the dataserver event. The line index starts at zero.\\nIf the requested line is passed the end of the note-card the dataserver event will return the constant EOF string.\\nThe key returned by this function is a unique identifier which will be supplied to the dataserver event in the requested parameter.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "NotecardName",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "LineNumber",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetNumberOfNotecardLines": {
            "desc": "Returns the number of lines contained within a notecard via the dataserver event.\\nThe key returned by this function is a query ID for identifying the dataserver reply.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "NotecardName",
                "type": "string",
                "desc": ""
            }
        },
        "llGetNumberOfPrims": {
            "desc": "Returns the number of prims in a link set the script is attached to.\\nReturns the number of prims in (and avatars seated on) the object the script is in.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetNumberOfSides": {
            "desc": "Returns the number of faces (or sides) of the prim.\\nReturns the number of sides of the prim which has the script.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetObjectAnimationNames": {
            "desc": "Returns a list of names of playing animations for an object.\\nReturns a list of names of all playing animations for the current object.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list"
        },
        "llGetObjectDesc": {
            "desc": "Returns the description of the prim the script is attached to.\\nReturns the description of the scripted object/prim. You can set the description using llSetObjectDesc.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string"
        },
        "llGetObjectDetails": {
            "desc": "Returns a list of object details specified in the Parameters list for the object or avatar in the region with key ID.\\nParameters are specified by the OBJECT_* constants.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": "Prim or avatar UUID that is in the same region."
            },
            "arg_1": {
                "name": "Parameters",
                "type": "list",
                "desc": "List of OBJECT_* flags."
            }
        },
        "llGetObjectLinkKey": {
            "desc": "Returns the key of the linked prim link_no in a linkset.\\nReturns the key of link_no in the link set specified by id.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "id",
                "type": "key",
                "desc": "UUID of prim"
            },
            "arg_1": {
                "name": "link_no",
                "type": "integer",
                "desc": "Link number to retrieve"
            }
        },
        "llGetObjectMass": {
            "desc": "Returns the mass of the avatar or object in the region.\\nGets the mass of the object or avatar corresponding to ID.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetObjectName": {
            "desc": "Returns the name of the prim which the script is attached to.\\nReturns the name of the prim (not object) which contains the script.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string"
        },
        "llGetObjectPermMask": {
            "desc": "Returns the permission mask of the requested category for the object.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Category",
                "type": "integer",
                "desc": "Category is one of MASK_BASE, MASK_OWNER, MASK_GROUP, MASK_EVERYONE, or MASK_NEXT"
            }
        },
        "llGetObjectPrimCount": {
            "desc": "Returns the total number of prims for an object in the region.\\nReturns the prim count for any object id in the same region.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ObjectID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetOmega": {
            "desc": "Returns the rotation velocity in radians per second.\\nReturns a vector that is the rotation velocity of the object in radians per second.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetOwner": {
            "desc": "Returns the object owner&#39;s UUID.\\nReturns the key for the owner of the object.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llGetOwnerKey": {
            "desc": "Returns the owner of ObjectID.\\nReturns the key for the owner of object ObjectID.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "ObjectID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetParcelDetails": {
            "desc": "Returns a list of parcel details specified in the ParcelDetails list for the parcel at Position.\\nParameters is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA, _ID, _SEE_AVATARS.\\nReturns a list that is the parcel details specified in ParcelDetails (in the same order) for the parcel at Position.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": "Location within the region."
            },
            "arg_1": {
                "name": "ParcelDetails",
                "type": "list",
                "desc": "List of details requested for the specified parcel location."
            }
        },
        "llGetParcelFlags": {
            "desc": "Returns a mask of the parcel flags (PARCEL_FLAG_*) for the parcel that includes the point Position.\\nReturns a bit-field specifying the parcel flags (PARCEL_FLAG_*) for the parcel at Position.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            }
        },
        "llGetParcelMaxPrims": {
            "desc": "Returns the maximum number of prims allowed on the parcel at Position for a given scope.\\nThe scope may be set to an individual parcel or the combined resources of all parcels with the same ownership in the region.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": "Region coordinates (z is ignored) of parcel."
            },
            "arg_1": {
                "name": "SimWide",
                "type": "integer",
                "desc": "Boolean. If FALSE then the return is the maximum prims supported by the parcel. If TRUE then it is the combined number of prims on all parcels in the region owned by the specified parcel&#39;s owner."
            }
        },
        "llGetParcelMusicURL": {
            "desc": "Gets the streaming audio URL for the parcel object is on.\\nThe object owner, avatar or group, must also be the land owner.",
            "arg_numb": 0,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string"
        },
        "llGetParcelPrimCount": {
            "desc": "Returns the number of prims on the parcel at Position of the given category.\\nCategories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP.\\nReturns the number of prims used on the parcel at Position which are in Category.\\nIf SimWide is TRUE, it returns the total number of objects for all parcels with matching ownership in the category specified.\\nIf SimWide is FALSE, it returns the number of objects on this specific parcel in the category specified",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": "Region coordinates of parcel to query."
            },
            "arg_1": {
                "name": "Category",
                "type": "integer",
                "desc": "A PARCEL_COUNT_* flag."
            },
            "arg_2": {
                "name": "SimWide",
                "type": "integer",
                "desc": "Boolean. If FALSE then the return is the maximum prims supported by the parcel. If TRUE then it is the combined number of prims on all parcels in the region owned by the specified parcel&#39;s owner."
            }
        },
        "llGetParcelPrimOwners": {
            "desc": "Returns a list of up to 100 residents who own objects on the parcel at Position, with per-owner land impact totals.\\nRequires owner-like permissions for the parcel, and for the script owner to be present in the region.\\nThe list is formatted as [ key agentKey1, integer agentLI1, key agentKey2, integer agentLI2, ... ], sorted by agent key.\\nThe integers are the combined land impacts of the objects owned by the corresponding agents.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 2,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            }
        },
        "llGetPermissions": {
            "desc": "Returns an integer bitmask of the permissions that have been granted to the script.  Individual permissions can be determined using a bit-wise &#34;and&#34; operation against the PERMISSION_* constants",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetPermissionsKey": {
            "desc": "Returns the key of the avatar that last granted or declined permissions to the script.\\nReturns NULL_KEY if permissions were never granted or declined.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llGetPhysicsMaterial": {
            "desc": "Returns a list of the form [float gravity_multiplier, float restitution, float friction, float density].",
            "arg_numb": 0,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list"
        },
        "llGetPos": {
            "desc": "Returns the position of the task in region coordinates.\\nReturns the vector position of the task in region coordinates.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetPrimMediaParams": {
            "desc": "Returns the media parameters for a particular face on an object, given the desired list of parameter names, in the order requested. Returns an empty list if no media exists on the face.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Face",
                "type": "integer",
                "desc": "face number"
            },
            "arg_1": {
                "name": "Parameters",
                "type": "list",
                "desc": "One or more PRIM_MEDIA_* flags"
            }
        },
        "llGetPrimitiveParams": {
            "desc": "Returns the primitive parameters specified in the parameters list.\\nReturns primitive parameters specified in the Parameters list.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Parameters",
                "type": "list",
                "desc": "PRIM_* flags and face parameters"
            }
        },
        "llGetRegionAgentCount": {
            "desc": "Returns the number of avatars in the region.\\nReturns an integer that is the number of avatars in the region.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetRegionCorner": {
            "desc": "Returns a vector, in meters, that is the global location of the south-west corner of the region which the object is in.\\nReturns the Region-Corner of the simulator containing the task. The region-corner is a vector (values in meters) representing distance from the first region.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetRegionDayLength": {
            "desc": "Returns the number of seconds in a day in this region.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetRegionDayOffset": {
            "desc": "Returns the number of seconds in a day is offset from midnight in this parcel.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetRegionFPS": {
            "desc": "Returns the mean region frames per second.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetRegionFlags": {
            "desc": "Returns the region flags (REGION_FLAG_*) for the region the object is in.\\nReturns a bit-field specifying the region flags (REGION_FLAG_*) for the region the object is in.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetRegionMoonDirection": {
            "desc": "Returns a normalized vector of the direction of the moon in the region.\\nReturns the moon&#39;s direction on the simulator.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetRegionMoonRotation": {
            "desc": "Returns the rotation applied to the moon in the region.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation"
        },
        "llGetRegionName": {
            "desc": "Returns the current region name.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string"
        },
        "llGetRegionSunDirection": {
            "desc": "Returns a normalized vector of the direction of the sun in the region.\\nReturns the sun&#39;s direction on the simulator.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetRegionSunRotation": {
            "desc": "Returns the rotation applied to the sun in the region.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation"
        },
        "llGetRegionTimeDilation": {
            "desc": "Returns the current time dilation as a float between 0.0 (full dilation) and 1.0 (no dilation).\\nReturns the current time dilation as a float between 0.0 and 1.0.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetRegionTimeOfDay": {
            "desc": "Returns the time in seconds since environmental midnight for the entire region.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetRootPosition": {
            "desc": "Returns the position (in region coordinates) of the root prim of the object which the script is attached to.\\nThis is used to allow a child prim to determine where the root is.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetRootRotation": {
            "desc": "Returns the rotation (relative to the region) of the root prim of the object which the script is attached to.\\nGets the global rotation of the root object of the object script is attached to.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation"
        },
        "llGetRot": {
            "desc": "Returns the rotation relative to the region&#39;s axes.\\nReturns the rotation.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation"
        },
        "llGetSPMaxMemory": {
            "desc": "Returns the maximum used memory for the current script. Only valid after using PROFILE_SCRIPT_MEMORY. Non-mono scripts always use 16k.\\nReturns the integer of the most bytes used while llScriptProfiler was last active.",
            "arg_numb": 0,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetScale": {
            "desc": "Returns the scale of the prim.\\nReturns a vector that is the scale (dimensions) of the prim.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetScriptName": {
            "desc": "Returns the name of the script that this function is used in.\\nReturns the name of this script.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string"
        },
        "llGetScriptState": {
            "desc": "Returns TRUE if the script named is running.\\nReturns TRUE if ScriptName is running.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ScriptName",
                "type": "string",
                "desc": ""
            }
        },
        "llGetSimStats": {
            "desc": "Returns a float that is the requested statistic.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "StatType",
                "type": "integer",
                "desc": "Statistic type. Currently only SIM_STAT_PCT_CHARS_STEPPED is supported."
            }
        },
        "llGetSimulatorHostname": {
            "desc": "Returns the host-name of the machine which the script is running on.\\nFor example, &#34;sim225.agni.lindenlab.com&#34;.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 10,
            "deprecated": false,
            "god-mode": false,
            "type": "string"
        },
        "llGetStartParameter": {
            "desc": "Returns an integer that is the script rez parameter.\\nIf the object was rezzed by an agent, this function returns 0.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetStaticPath": {
            "desc": "",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Start",
                "type": "vector",
                "desc": "Starting position."
            },
            "arg_1": {
                "name": "End",
                "type": "vector",
                "desc": "Ending position."
            },
            "arg_2": {
                "name": "Radius",
                "type": "float",
                "desc": "Radius of the character that the path is for, between 0.125m and 5.0m."
            },
            "arg_3": {
                "name": "Parameters",
                "type": "list",
                "desc": "Currently only accepts the parameter CHARACTER_TYPE; the options are identical to those used for llCreateCharacter. The default value is CHARACTER_TYPE_NONE."
            }
        },
        "llGetStatus": {
            "desc": "Returns boolean value of the specified status (e.g. STATUS_PHANTOM) of the object the script is attached to.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "StatusFlag",
                "type": "integer",
                "desc": "A STATUS_* flag"
            }
        },
        "llGetSubString": {
            "desc": "Returns a sub-string from String, in a range specified by the Start and End indicies (inclusive).\\nUsing negative numbers for Start and/or End causes the index to count backwards from the length of the string, so 0, -1 would capture the entire string.\\nIf Start is greater than End, the sub string is the exclusion of the entries.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "String",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Start",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "End",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetSunDirection": {
            "desc": "Returns a normalized vector of the direction of the sun in the parcel.\\nReturns the sun&#39;s direction on the simulator in the parcel.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetSunRotation": {
            "desc": "Returns the rotation applied to the sun in the parcel.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation"
        },
        "llGetTexture": {
            "desc": "Returns a string that is the texture on face (the inventory name if it is a texture in the prim&#39;s inventory, otherwise the key).\\nReturns the texture of a face, if it is found in object inventory, its key otherwise.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetTextureOffset": {
            "desc": "Returns the texture offset of face in the x and y components of a vector.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetTextureRot": {
            "desc": "Returns the texture rotation of side.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetTextureScale": {
            "desc": "Returns the texture scale of side in the x and y components of a vector.\\nReturns the texture scale of a side in the x and y components of a vector.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llGetTime": {
            "desc": "Returns the time in seconds since the last region reset, script reset, or call to either llResetTime or llGetAndResetTime.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetTimeOfDay": {
            "desc": "Returns the time in seconds since environmental midnight on the parcel.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGetTimestamp": {
            "desc": "Returns a time-stamp (UTC time zone) in the format: YYYY-MM-DDThh:mm:ss.ff..fZ.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string"
        },
        "llGetTorque": {
            "desc": "Returns the torque (if the script is physical).\\nReturns a vector that is the torque (if the script is physical).",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetUnixTime": {
            "desc": "Returns the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetUsedMemory": {
            "desc": "Returns the current used memory for the current script. Non-mono scripts always use 16K.\\nReturns the integer of the number of bytes of memory currently in use by the script. Non-mono scripts always use 16K.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llGetUsername": {
            "desc": "Returns the username of an avatar, if the avatar is connected to the current region, or if the name has been cached.  Otherwise, returns an empty string. Use llRequestUsername if the avatar may be absent from the region.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llGetVel": {
            "desc": "Returns the velocity of the object.\\nReturns a vector that is the velocity of the object.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector"
        },
        "llGetVisualParams": {
            "desc": "Returns a list of the current value for each requested visual parameter.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": "Avatar UUID in the same region."
            },
            "arg_1": {
                "name": "Parameters",
                "type": "list",
                "desc": "List of visual parameter IDs."
            }
        },
        "llGetWallclock": {
            "desc": "Returns the time in seconds since midnight California Pacific time (PST/PDT).\\nReturns the time in seconds since simulator&#39;s time-zone midnight (Pacific Time).",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float"
        },
        "llGiveInventory": {
            "desc": "Give InventoryItem to destination represented by TargetID, as permitted by the permissions system.\\nTargetID may be any agent or an object in the same region.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "TargetID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "InventoryItem",
                "type": "string",
                "desc": ""
            }
        },
        "llGiveInventoryList": {
            "desc": "Give InventoryItems to destination (represented by TargetID) as a new folder of items, as permitted by the permissions system.\\nTargetID may be any agent or an object in the same region. If TargetID is an object, the items are passed directly to the object inventory (no folder is created).",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 3,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "TargetID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "FolderName",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "InventoryItems",
                "type": "list",
                "desc": ""
            }
        },
        "llGiveMoney": {
            "desc": "Transfers Amount of L$ from script owner to AvatarID.\\nThis call will silently fail if PERMISSION_DEBIT has not been granted.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Amount",
                "type": "integer",
                "desc": ""
            }
        },
        "llGodLikeRezObject": {
            "desc": "Rez directly off of a UUID if owner has god-bit set.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": true,
            "type": "void",
            "arg_0": {
                "name": "InventoryItemID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            }
        },
        "llGround": {
            "desc": "Returns the ground height at the object position + offset.\\nReturns the ground height at the object&#39;s position + Offset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llGroundContour": {
            "desc": "Returns the ground contour direction below the object position + Offset.\\nReturns the ground contour at the object&#39;s position + Offset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llGroundNormal": {
            "desc": "Returns the ground normal below the object position + offset.\\nReturns the ground contour at the object&#39;s position + Offset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llGroundRepel": {
            "desc": "Critically damps to height if within height * 0.5 of level (either above ground level or above the higher of land and water if water == TRUE).\\nCritically damps to fHeight if within fHeight * 0.5 of ground or water level.\\n\n\t\t\t\tThe height is above ground level if iWater is FALSE or above the higher of land and water if iWater is TRUE.\\n\n\t\t\t\tDo not use with vehicles. Only works in physics-enabled objects.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Height",
                "type": "float",
                "desc": "Distance above the ground."
            },
            "arg_1": {
                "name": "Water",
                "type": "integer",
                "desc": "Boolean, if TRUE then hover above water too."
            },
            "arg_2": {
                "name": "Tau",
                "type": "float",
                "desc": "Seconds to critically damp in."
            }
        },
        "llGroundSlope": {
            "desc": "Returns the ground slope below the object position + Offset.\\nReturns the ground slope at the object position + Offset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llHTTPRequest": {
            "desc": "Sends an HTTP request to the specified URL with the Body of the request and Parameters.\\nReturns a key that is a handle identifying the HTTP request made.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "URL",
                "type": "string",
                "desc": "A valid HTTP/HTTPS URL."
            },
            "arg_1": {
                "name": "Parameters",
                "type": "list",
                "desc": "Configuration parameters, specified as HTTP_* flag-value pairs."
            },
            "arg_2": {
                "name": "Body",
                "type": "string",
                "desc": "Contents of the request."
            }
        },
        "llHTTPResponse": {
            "desc": "Responds to an incoming HTTP request which was triggerd by an http_request event within the script. HTTPRequestID specifies the request to respond to (this ID is supplied in the http_request event handler).  Status and Body specify the status code and message to respond with.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "HTTPRequestID",
                "type": "key",
                "desc": "A valid HTTP request key."
            },
            "arg_1": {
                "name": "Status",
                "type": "integer",
                "desc": "HTTP Status (200, 400, 404, etc.)."
            },
            "arg_2": {
                "name": "Body",
                "type": "string",
                "desc": "Contents of the response."
            }
        },
        "llHash": {
            "desc": "Calculates the 32bit hash value for the provided string.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "value",
                "type": "string",
                "desc": ""
            }
        },
        "llInsertString": {
            "desc": "Inserts SourceVariable into TargetVariable at Position, and returns the result.\\nInserts SourceVariable into TargetVariable at Position and returns the result. Note this does not alter TargetVariable.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "TargetVariable",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Position",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "SourceVariable",
                "type": "string",
                "desc": ""
            }
        },
        "llInstantMessage": {
            "desc": "IMs Text to the user identified.\\nSend Text to the user as an instant message.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llIntegerToBase64": {
            "desc": "Returns a string that is a Base64 big endian encode of Value.\\nEncodes the Value as an 8-character Base64 string.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Value",
                "type": "integer",
                "desc": ""
            }
        },
        "llJson2List": {
            "desc": "Converts the top level of the JSON string to a list.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "JSON",
                "type": "string",
                "desc": ""
            }
        },
        "llJsonGetValue": {
            "desc": "Gets the value indicated by Specifiers from the JSON string.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "JSON",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Specifiers",
                "type": "list",
                "desc": ""
            }
        },
        "llJsonSetValue": {
            "desc": "Returns a new JSON string that is the JSON given with the Value indicated by Specifiers set to Value.",
            "arg_numb": 3,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "JSON",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Specifiers",
                "type": "list",
                "desc": ""
            },
            "arg_2": {
                "name": "Value",
                "type": "string",
                "desc": ""
            }
        },
        "llJsonValueType": {
            "desc": "Returns the type constant (JSON_*) for the value in JSON indicated by Specifiers.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "JSON",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Specifiers",
                "type": "list",
                "desc": ""
            }
        },
        "llKey2Name": {
            "desc": "Returns the name of the prim or avatar specified by ID. The ID must be a valid rezzed prim or avatar key in the current simulator, otherwise an empty string is returned.\\nFor avatars, the returned name is the legacy name",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": "Avatar or rezzed prim UUID."
            }
        },
        "llKeyCountKeyValue": {
            "desc": "\n               Starts an asychronous transaction the request the number of keys in the data store. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will the the number of keys in the system.\n            ",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llKeysKeyValue": {
            "desc": "\n               Starts an asychronous transaction the request a number of keys from the data store. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. The error XP_ERROR_KEY_NOT_FOUND is returned if First is greater than or equal to the number of keys in the data store. In the success case the subsequent items will be the keys requested. The number of keys returned may be less than requested if the return value is too large or if there is not enough keys remaining. The order keys are returned is not guaranteed but is stable between subsequent calls as long as no keys are added or removed. Because the keys are returned in a comma-delimited list it is not recommended to use commas in key names if this function is used.\n            ",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "First",
                "type": "integer",
                "desc": "Index of the first key to return."
            },
            "arg_1": {
                "name": "Count",
                "type": "integer",
                "desc": "The number of keys to return."
            }
        },
        "llLinear2sRGB": {
            "desc": "Converts a color from the linear colorspace to sRGB.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "color",
                "type": "vector",
                "desc": "A color in the linear colorspace."
            }
        },
        "llLinkParticleSystem": {
            "desc": "Creates a particle system in prim LinkNumber based on Rules. An empty list removes a particle system from object.\\nList format is [ rule-1, data-1, rule-2, data-2 ... rule-n, data-n ].\\nThis is identical to llParticleSystem except that it applies to a specified linked prim and not just the prim the script is in.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag"
            },
            "arg_1": {
                "name": "Rules",
                "type": "list",
                "desc": "Particle system rules list in the format [ rule1, data1, rule2, data2 . . . ruleN, dataN ]"
            }
        },
        "llLinkSitTarget": {
            "desc": "Set the sit location for the linked prim(s). If Offset == &#60;0,0,0&#62; clear it.\\nSet the sit location for the linked prim(s). The sit location is relative to the prim&#39;s position and rotation.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag of the prim."
            },
            "arg_1": {
                "name": "Offset",
                "type": "vector",
                "desc": "Position for the sit target, relative to the prim&#39;s position."
            },
            "arg_2": {
                "name": "Rotation",
                "type": "rotation",
                "desc": "Rotation (relative to the prim&#39;s rotation) for the avatar."
            }
        },
        "llLinksetDataAvailable": {
            "desc": "Returns the number of bytes remaining in the linkset&#39;s datastore.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llLinksetDataCountKeys": {
            "desc": "Returns the number of keys in the linkset&#39;s datastore.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer"
        },
        "llLinksetDataDelete": {
            "desc": "Deletes a name:value pair from the linkset&#39;s datastore.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "name",
                "type": "string",
                "desc": "Key to delete from the linkset&#39;s datastore."
            }
        },
        "llLinksetDataDeleteProtected": {
            "desc": "Deletes a name:value pair from the linkset&#39;s datastore.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "name",
                "type": "string",
                "desc": "Key to delete from the linkset&#39;s datastore."
            },
            "arg_1": {
                "name": "pass",
                "type": "string",
                "desc": "Pass phrase to access protected data."
            }
        },
        "llLinksetDataFindKeys": {
            "desc": "Returns a list of keys from the linkset&#39;s data store matching the search parameter.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "search",
                "type": "string",
                "desc": "A regex search string to match against keys in the datastore."
            },
            "arg_1": {
                "name": "start",
                "type": "integer",
                "desc": "First entry to return. 0 for start of list."
            },
            "arg_2": {
                "name": "count",
                "type": "integer",
                "desc": "Number of entries to return. Less than 1 for all keys."
            }
        },
        "llLinksetDataListKeys": {
            "desc": "Returns a list of all keys in the linkset datastore.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "start",
                "type": "integer",
                "desc": "First entry to return. 0 for start of list."
            },
            "arg_1": {
                "name": "count",
                "type": "integer",
                "desc": "Number of entries to return. Less than 1 for all keys."
            }
        },
        "llLinksetDataRead": {
            "desc": "Returns the value stored for a key in the linkset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "name",
                "type": "string",
                "desc": "Key to retrieve from the linkset&#39;s datastore."
            }
        },
        "llLinksetDataReadProtected": {
            "desc": "Returns the value stored for a key in the linkset.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "name",
                "type": "string",
                "desc": "Key to retrieve from the linkset&#39;s datastore."
            },
            "arg_1": {
                "name": "pass",
                "type": "string",
                "desc": "Pass phrase to access protected data."
            }
        },
        "llLinksetDataReset": {
            "desc": "Resets the linkset&#39;s data store, erasing all key-value pairs.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llLinksetDataWrite": {
            "desc": "Sets a name:value pair in the linkset&#39;s datastore",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "name",
                "type": "string",
                "desc": "key for the name:value pair."
            },
            "arg_1": {
                "name": "value",
                "type": "string",
                "desc": "value to store in the linkset&#39;s datastore."
            }
        },
        "llLinksetDataWriteProtected": {
            "desc": "Sets a name:value pair in the linkset&#39;s datastore",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "name",
                "type": "string",
                "desc": "key for the name:value pair."
            },
            "arg_1": {
                "name": "value",
                "type": "string",
                "desc": "value to store in the linkset&#39;s datastore."
            },
            "arg_2": {
                "name": "pass",
                "type": "string",
                "desc": "Pass phrase to access protected data."
            }
        },
        "llList2CSV": {
            "desc": "Creates a string of comma separated values from the list.\\nCreate a string of comma separated values from the specified list.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            }
        },
        "llList2Float": {
            "desc": "Copies the float at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to a float, then zero is returned.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Index",
                "type": "integer",
                "desc": ""
            }
        },
        "llList2Integer": {
            "desc": "Copies the integer at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to an integer, then zero is returned.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Index",
                "type": "integer",
                "desc": ""
            }
        },
        "llList2Json": {
            "desc": "Converts either a strided list of key:value pairs to a JSON_OBJECT, or a list of values to a JSON_ARRAY.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "JsonType",
                "type": "string",
                "desc": "Type is JSON_ARRAY or JSON_OBJECT."
            },
            "arg_1": {
                "name": "Values",
                "type": "list",
                "desc": "List of values to convert."
            }
        },
        "llList2Key": {
            "desc": "Copies the key at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to a key, then null string is returned.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Index",
                "type": "integer",
                "desc": ""
            }
        },
        "llList2List": {
            "desc": "Returns a subset of entries from ListVariable, in a range specified by the Start and End indicies (inclusive).\\nUsing negative numbers for Start and/or End causes the index to count backwards from the length of the string, so 0, -1 would capture the entire string.\\nIf Start is greater than End, the sub string is the exclusion of the entries.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Start",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "End",
                "type": "integer",
                "desc": ""
            }
        },
        "llList2ListStrided": {
            "desc": "Copies the strided slice of the list from Start to End.\\nReturns a copy of the strided slice of the specified list from Start to End.",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Start",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "End",
                "type": "integer",
                "desc": ""
            },
            "arg_3": {
                "name": "Stride",
                "type": "integer",
                "desc": ""
            }
        },
        "llList2Rot": {
            "desc": "Copies the rotation at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to rotation, thenZERO_ROTATION is returned.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Index",
                "type": "integer",
                "desc": ""
            }
        },
        "llList2String": {
            "desc": "Copies the string at Index in the list.\\nReturns the value at Index in the specified list as a string. If Index describes a location not in the list then null string is returned.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Index",
                "type": "integer",
                "desc": ""
            }
        },
        "llList2Vector": {
            "desc": "Copies the vector at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to a vector, then ZERO_VECTOR is returned.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Index",
                "type": "integer",
                "desc": ""
            }
        },
        "llListFindList": {
            "desc": "Returns the index of the first instance of Find in ListVariable. Returns -1 if not found.\\nReturns the position of the first instance of the Find list in the ListVariable. Returns -1 if not found.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Find",
                "type": "list",
                "desc": ""
            }
        },
        "llListInsertList": {
            "desc": "Returns a list that contains all the elements from Target but with the elements from ListVariable inserted at Position start.\\nReturns a new list, created by inserting ListVariable into the Target list at Position. Note this does not alter the Target.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Target",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_2": {
                "name": "Position",
                "type": "integer",
                "desc": ""
            }
        },
        "llListRandomize": {
            "desc": "Returns a version of the input ListVariable which has been randomized by blocks of size Stride.\\nIf the remainder from the length of the list, divided by the stride is non-zero, this function does not randomize the list.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "Stride",
                "type": "integer",
                "desc": ""
            }
        },
        "llListReplaceList": {
            "desc": "Returns a list that is Target with Start through End removed and ListVariable inserted at Start.\\nReturns a list replacing the slice of the Target list from Start to End with the specified ListVariable. Start and End are inclusive, so 0, 1 would replace the first two entries and 0, 0 would replace only the first list entry.",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Target",
                "type": "list",
                "desc": ""
            },
            "arg_1": {
                "name": "ListVariable",
                "type": "list",
                "desc": ""
            },
            "arg_2": {
                "name": "Start",
                "type": "integer",
                "desc": ""
            },
            "arg_3": {
                "name": "End",
                "type": "integer",
                "desc": ""
            }
        },
        "llListSort": {
            "desc": "Returns the specified list, sorted into blocks of stride in ascending order (if Ascending is TRUE, otherwise descending). Note that sort only works if the first entry of each block is the same datatype.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "ListVariable",
                "type": "list",
                "desc": "List to sort."
            },
            "arg_1": {
                "name": "Stride",
                "type": "integer",
                "desc": "Stride length."
            },
            "arg_2": {
                "name": "Ascending",
                "type": "integer",
                "desc": "Boolean. TRUE = result in ascending order, FALSE = result in descending order."
            }
        },
        "llListStatistics": {
            "desc": "Performs a statistical aggregate function, specified by a LIST_STAT_* constant, on ListVariables.\\nThis function allows a script to perform a statistical operation as defined by operation on a list composed of integers and floats.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Operation",
                "type": "integer",
                "desc": "One of LIST_STAT_* values"
            },
            "arg_1": {
                "name": "ListVariable",
                "type": "list",
                "desc": "Variable to analyze."
            }
        },
        "llListen": {
            "desc": "Creates a listen callback for Text on Channel from SpeakersName and SpeakersID (SpeakersName, SpeakersID, and/or Text can be empty) and returns an identifier that can be used to deactivate or remove the listen.\\nNon-empty values for SpeakersName, SpeakersID, and Text will filter the results accordingly, while empty strings and NULL_KEY will not filter the results, for string and key parameters respectively.\\nPUBLIC_CHANNEL is the public chat channel that all avatars see as chat text. DEBUG_CHANNEL is the script debug channel, and is also visible to nearby avatars. All other channels are are not sent to avatars, but may be used to communicate with scripts.",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Channel",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "SpeakersName",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "SpeakersID",
                "type": "key",
                "desc": ""
            },
            "arg_3": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llListenControl": {
            "desc": "Makes a listen event callback active or inactive. Pass in the value returned from llListen to the iChannelHandle parameter to specify which listener you are controlling.\\nUse boolean values to specify Active",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ChannelHandle",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Active",
                "type": "integer",
                "desc": ""
            }
        },
        "llListenRemove": {
            "desc": "Removes a listen event callback. Pass in the value returned from llListen to the iChannelHandle parameter to specify which listener to remove.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ChannelHandle",
                "type": "integer",
                "desc": ""
            }
        },
        "llLoadURL": {
            "desc": "Shows dialog to avatar AvatarID offering to load web page at URL.\tIf user clicks yes, launches their web browser.\\nllLoadURL displays a dialogue box to the user, offering to load the specified web page using the default web browser.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "URL",
                "type": "string",
                "desc": ""
            }
        },
        "llLog": {
            "desc": "Returns the natural logarithm of Value. Returns zero if Value &#60;= 0.\\nReturns the base e (natural) logarithm of the specified Value.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": ""
            }
        },
        "llLog10": {
            "desc": "Returns the base 10 logarithm of Value. Returns zero if Value &#60;= 0.\\nReturns the base 10 (common) logarithm of the specified Value.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": ""
            }
        },
        "llLookAt": {
            "desc": "Cause object name to point its forward axis towards Target, at a force controlled by Strength and Damping.\\nGood Strength values are around half the mass of the object and good Damping values are less than 1/10th of the Strength.\\nAsymmetrical shapes require smaller Damping. A Strength of 0.0 cancels the look at.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Target",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "Strength",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Damping",
                "type": "float",
                "desc": ""
            }
        },
        "llLoopSound": {
            "desc": "Plays specified Sound, looping indefinitely, at Volume (0.0 - 1.0).\\nOnly one sound may be attached to an object at a time.\\nA second call to llLoopSound with the same key will not restart the sound, but the new volume will be used. This allows control over the volume of already playing sounds.\\nSetting the volume to 0 is not the same as calling llStopSound; a sound with 0 volume will continue to loop.\\nTo restart the sound from the beginning, call llStopSound before calling llLoopSound again.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Volume",
                "type": "float",
                "desc": ""
            }
        },
        "llLoopSoundMaster": {
            "desc": "Plays attached Sound, looping at volume (0.0 - 1.0), and declares it a sync master.\\nBehaviour is identical to llLoopSound, with the addition of marking the source as a &#34;Sync Master&#34;, causing &#34;Slave&#34; sounds to sync to it. If there are multiple masters within a viewers interest area, the most audible one (a function of both distance and volume) will win out as the master.\\nThe use of multiple masters within a small area is unlikely to produce the desired effect.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Volume",
                "type": "float",
                "desc": ""
            }
        },
        "llLoopSoundSlave": {
            "desc": "Plays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master.\\nBehaviour is identical to llLoopSound, unless there is a &#34;Sync Master&#34; present.\\nIf a Sync Master is already playing the Slave sound will begin playing from the same point the master is in its loop synchronizing the loop points of both sounds.\\nIf a Sync Master is started when the Slave is already playing, the Slave will skip to the correct position to sync with the Master.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Volume",
                "type": "float",
                "desc": ""
            }
        },
        "llMD5String": {
            "desc": "Returns a string of 32 hex characters that is an RSA Data Security Inc., MD5 Message-Digest Algorithm of Text with Nonce used as the salt.\\nReturns a 32-character hex string. (128-bit in binary.)",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Nonce",
                "type": "integer",
                "desc": ""
            }
        },
        "llMakeExplosion": {
            "desc": "Make a round explosion of particles. Deprecated: Use llParticleSystem instead.\\nMake a round explosion of particles using texture from the objects inventory. Deprecated: Use llParticleSystem instead.",
            "arg_numb": 7,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Particles",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Scale",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Velocity",
                "type": "float",
                "desc": ""
            },
            "arg_3": {
                "name": "Lifetime",
                "type": "float",
                "desc": ""
            },
            "arg_4": {
                "name": "Arc",
                "type": "float",
                "desc": ""
            },
            "arg_5": {
                "name": "Texture",
                "type": "string",
                "desc": ""
            },
            "arg_6": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llMakeFire": {
            "desc": "Make fire like particles. Deprecated: Use llParticleSystem instead.\\nMake fire particles using texture from the objects inventory. Deprecated: Use llParticleSystem instead.",
            "arg_numb": 7,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Particles",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Scale",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Velocity",
                "type": "float",
                "desc": ""
            },
            "arg_3": {
                "name": "Lifetime",
                "type": "float",
                "desc": ""
            },
            "arg_4": {
                "name": "Arc",
                "type": "float",
                "desc": ""
            },
            "arg_5": {
                "name": "Texture",
                "type": "string",
                "desc": ""
            },
            "arg_6": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llMakeFountain": {
            "desc": "Make a fountain of particles. Deprecated: Use llParticleSystem instead.\\nMake a fountain of particles using texture from the objects inventory. Deprecated: Use llParticleSystem instead.",
            "arg_numb": 9,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Particles",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Scale",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Velocity",
                "type": "float",
                "desc": ""
            },
            "arg_3": {
                "name": "Lifetime",
                "type": "float",
                "desc": ""
            },
            "arg_4": {
                "name": "Arc",
                "type": "float",
                "desc": ""
            },
            "arg_5": {
                "name": "Bounce",
                "type": "integer",
                "desc": ""
            },
            "arg_6": {
                "name": "Texture",
                "type": "string",
                "desc": ""
            },
            "arg_7": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            },
            "arg_8": {
                "name": "Bounce_Offset",
                "type": "float",
                "desc": ""
            }
        },
        "llMakeSmoke": {
            "desc": "Make smoke like particles. Deprecated: Use llParticleSystem instead.\\nMake smoky particles using texture from the objects inventory. Deprecated: Use llParticleSystem instead.",
            "arg_numb": 7,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Particles",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Scale",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Velocity",
                "type": "float",
                "desc": ""
            },
            "arg_3": {
                "name": "Lifetime",
                "type": "float",
                "desc": ""
            },
            "arg_4": {
                "name": "Arc",
                "type": "float",
                "desc": ""
            },
            "arg_5": {
                "name": "Texture",
                "type": "string",
                "desc": ""
            },
            "arg_6": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llManageEstateAccess": {
            "desc": "Adds or removes agents from the estate&#39;s agent access or ban lists, or groups to the estate&#39;s group access list. Action is one of the ESTATE_ACCESS_ALLOWED_* operations to perform.\\nReturns an integer representing a boolean, TRUE if the call was successful; FALSE if throttled, invalid action, invalid or null id or object owner is not allowed to manage the estate.\\nThe object owner is notified of any changes, unless PERMISSION_SILENT_ESTATE_MANAGEMENT has been granted to the script.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Action",
                "type": "integer",
                "desc": "One of the ESTATE_ACCESS_ALLOWED_* actions."
            },
            "arg_1": {
                "name": "AvatarID",
                "type": "key",
                "desc": "UUID of the avatar or group to act upon."
            }
        },
        "llMapDestination": {
            "desc": "Opens world map for avatar who touched is is wearing the script, centred on RegionName with Position highlighted. Only works for scripts attached to avatar, or during touch events.\\nDirection currently has no effect.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "RegionName",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            },
            "arg_2": {
                "name": "Direction",
                "type": "vector",
                "desc": ""
            }
        },
        "llMessageLinked": {
            "desc": "Sends Number, Text, and ID to members of the link set identified by LinkNumber.\\nLinkNumber is either a linked number (available through llGetLinkNumber) or a LINK_* constant.",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Number",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_3": {
                "name": "ID",
                "type": "key",
                "desc": ""
            }
        },
        "llMinEventDelay": {
            "desc": "Set the minimum time between events being handled.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Delay",
                "type": "float",
                "desc": ""
            }
        },
        "llModPow": {
            "desc": "Returns a Value raised to the Power, mod Modulus. ((a**b)%c) b is capped at 0xFFFF (16 bits).\\nReturns (Value ^ Power) % Modulus. (Value raised to the Power, Modulus). Value is capped at 0xFFFF (16 bits).",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 1,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Value",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Power",
                "type": "integer",
                "desc": ""
            },
            "arg_2": {
                "name": "Modulus",
                "type": "integer",
                "desc": ""
            }
        },
        "llModifyLand": {
            "desc": "Modify land with action (LAND_LEVEL, LAND_RAISE, LAND_LOWER, LAND_SMOOTH, LAND_NOISE, LAND_REVERT) on size (0, 1, 2, corresponding to 2m x 2m, 4m x 4m, 8m x 8m).",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Action",
                "type": "integer",
                "desc": "LAND_LEVEL, LAND_RAISE, LAND_LOWER, LAND_SMOOTH, LAND_NOISE or LAND_REVERT"
            },
            "arg_1": {
                "name": "Area",
                "type": "integer",
                "desc": "0, 1, 2 (2m x 2m, 4m x 4m, or 8m x 8m)"
            }
        },
        "llMoveToTarget": {
            "desc": "Critically damp to Target in Tau seconds (if the script is physical).\\nCritically damp to position target in tau-seconds if the script is physical. Good tau-values are greater than 0.2. A tau of 0.0 stops the critical damping.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Target",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "Tau",
                "type": "float",
                "desc": ""
            }
        },
        "llName2Key": {
            "desc": "Look up Agent ID for the named agent in the region.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "Name",
                "type": "string",
                "desc": "Name of agent in region to look up."
            }
        },
        "llNavigateTo": {
            "desc": "Navigate to destination.\\nDirects an object to travel to a defined position in the region or adjacent regions.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Location",
                "type": "vector",
                "desc": "Region coordinates for the character to navigate to."
            },
            "arg_1": {
                "name": "Options",
                "type": "list",
                "desc": "List of parameters to control the type of path-finding used. Currently only FORCE_DIRECT_PATH supported."
            }
        },
        "llOffsetTexture": {
            "desc": "Sets the texture S and T offsets for the chosen Face.\\nIf Face is ALL_SIDES this function sets the texture offsets for all faces.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "OffsetS",
                "type": "float",
                "desc": ""
            },
            "arg_1": {
                "name": "OffsetT",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llOpenFloater": {
            "desc": "Returns the value for header for request_id.\\nReturns a string that is the value of the Header for HTTPRequestID.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "floater_name",
                "type": "string",
                "desc": "Identifier for floater to open"
            },
            "arg_1": {
                "name": "url",
                "type": "string",
                "desc": "URL to pass to floater"
            },
            "arg_2": {
                "name": "params",
                "type": "list",
                "desc": "Parameters to apply to open floater"
            }
        },
        "llOpenRemoteDataChannel": {
            "desc": "Requests a channel to listen for XML-RPC calls. (Deprecated: XML-RPC should not be used. Use http-in instead.)\\nWill trigger a remote_data event with type = REMOTE_DATA_CHANNEL and a channel ID (key) once it is available.\\nThis channel ID must be referenced in the XML-RPC call to the script (from the internet) -- so the key must somehow get to the external XML-RPC client.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 1,
            "deprecated": true,
            "god-mode": false,
            "type": "void"
        },
        "llOrd": {
            "desc": "Returns the unicode value of the indicated character in the string.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "Integer",
            "arg_0": {
                "name": "value",
                "type": "string",
                "desc": "The string to convert to Unicode."
            },
            "arg_1": {
                "name": "index",
                "type": "integer",
                "desc": "Index of character to convert to unicode."
            }
        },
        "llOverMyLand": {
            "desc": "Returns TRUE if id ID over land owned by the script owner, otherwise FALSE.\\nReturns TRUE if key ID is over land owned by the object owner, FALSE otherwise.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": ""
            }
        },
        "llOwnerSay": {
            "desc": "says Text to owner only (if owner is in region).\\nSays Text to the owner of the object running the script, if the owner has been within the object&#39;s simulator since logging into Second Life, regardless of where they may be in-world.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llParcelMediaCommandList": {
            "desc": "Controls the playback of multimedia resources on a parcel or for an agent, via one or more PARCEL_MEDIA_COMMAND_* arguments specified in CommandList.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "CommandList",
                "type": "list",
                "desc": "A list of PARCEL_MEDIA_COMMAND_* flags and their parameters "
            }
        },
        "llParcelMediaQuery": {
            "desc": "Queries the media properties of the parcel containing the script, via one or more PARCEL_MEDIA_COMMAND_* arguments specified in CommandList.\\nThis function will only work if the script is contained within an object owned by the land-owner (or if the land is owned by a group, only if the object has been deeded to the group).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 2,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "QueryList",
                "type": "list",
                "desc": ""
            }
        },
        "llParseString2List": {
            "desc": "Converts Text into a list, discarding Separators, keeping Spacers (Separators and Spacers must be lists of strings, maximum of 8 each).\\nSeparators and Spacers are lists of strings with a maximum of 8 entries each.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Separators",
                "type": "list",
                "desc": ""
            },
            "arg_2": {
                "name": "Spacers",
                "type": "list",
                "desc": ""
            }
        },
        "llParseStringKeepNulls": {
            "desc": "Breaks Text into a list, discarding separators, keeping spacers, keeping any null values generated. (separators and spacers must be lists of strings, maximum of 8 each).\\nllParseStringKeepNulls works almost exactly like llParseString2List, except that if a null is found it will add a null-string instead of discarding it like llParseString2List does.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "list",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Separators",
                "type": "list",
                "desc": ""
            },
            "arg_2": {
                "name": "Spacers",
                "type": "list",
                "desc": ""
            }
        },
        "llParticleSystem": {
            "desc": "Creates a particle system in the prim the script is attached to, based on Parameters. An empty list removes a particle system from object.\\nList format is [ rule-1, data-1, rule-2, data-2 ... rule-n, data-n ].",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Parameters",
                "type": "list",
                "desc": ""
            }
        },
        "llPassCollisions": {
            "desc": "Configures how collision events are passed to scripts in the linkset.\\nIf Pass == TRUE, collisions involving collision-handling scripted child prims are also passed on to the root prim. If Pass == FALSE (default behavior), such collisions will only trigger events in the affected child prim.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Pass",
                "type": "integer",
                "desc": "Boolean, if TRUE, collisions are passed from children on to parents."
            }
        },
        "llPassTouches": {
            "desc": "Configures how touch events are passed to scripts in the linkset.\\nIf Pass == TRUE, touches involving touch-handling scripted child prims are also passed on to the root prim. If Pass == FALSE (default behavior), such touches will only trigger events in the affected child prim.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Pass",
                "type": "integer",
                "desc": "Boolean, if TRUE, touches are passed from children on to parents."
            }
        },
        "llPatrolPoints": {
            "desc": "Patrol a list of points.\\nSets the points for a character (llCreateCharacter) to patrol along.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Points",
                "type": "list",
                "desc": "A list of vectors for the character to travel through sequentially. The list must contain at least two entries."
            },
            "arg_1": {
                "name": "Options",
                "type": "list",
                "desc": "No options available at this time."
            }
        },
        "llPlaySound": {
            "desc": "Plays Sound once, at Volume (0.0 - 1.0) and attached to the object.\\nOnly one sound may be attached to an object at a time, and attaching a new sound or calling llStopSound will stop the previously attached sound.\\nA second call to llPlaySound with the same sound will not restart the sound, but the new volume will be used, which allows control over the volume of already playing sounds.\\nTo restart the sound from the beginning, call llStopSound before calling llPlaySound again.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Volume",
                "type": "float",
                "desc": ""
            }
        },
        "llPlaySoundSlave": {
            "desc": "Plays attached Sound once, at Volume (0.0 - 1.0), synced to next loop of most audible sync master.\\nBehaviour is identical to llPlaySound, unless there is a &#34;Sync Master&#34; present. If a Sync Master is already playing, the Slave sound will not be played until the Master hits its loop point and returns to the beginning.\\nllPlaySoundSlave will play the sound exactly once; if it is desired to have the sound play every time the Master loops, either use llLoopSoundSlave with extra silence padded on the end of the sound or ensure that llPlaySoundSlave is called at least once per loop of the Master.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Volume",
                "type": "float",
                "desc": ""
            }
        },
        "llPow": {
            "desc": "Returns the Value raised to the power Exponent, or returns 0 and triggers Math Error for imaginary results.\\nReturns the Value raised to the Exponent.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": ""
            },
            "arg_1": {
                "name": "Exponent",
                "type": "float",
                "desc": ""
            }
        },
        "llPreloadSound": {
            "desc": "Causes nearby viewers to preload the Sound from the object&#39;s inventory.\\nThis is intended to prevent delays in starting new sounds when called upon.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            }
        },
        "llPursue": {
            "desc": "Chase after a target.\\nCauses the character (llCharacter) to pursue the target defined by TargetID.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "TargetID",
                "type": "key",
                "desc": "Agent or object to pursue."
            },
            "arg_1": {
                "name": "Options",
                "type": "list",
                "desc": "Parameters for pursuit."
            }
        },
        "llPushObject": {
            "desc": "Applies Impulse and AngularImpulse to ObjectID.\\nApplies the supplied impulse and angular impulse to the object specified.",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ObjectID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Impulse",
                "type": "vector",
                "desc": ""
            },
            "arg_2": {
                "name": "AngularImpulse",
                "type": "vector",
                "desc": ""
            },
            "arg_3": {
                "name": "Local",
                "type": "integer",
                "desc": ""
            }
        },
        "llReadKeyValue": {
            "desc": "\n               Starts an asychronous transaction to retrieve the value associated with the key given. Will fail with XP_ERROR_KEY_NOT_FOUND if the key does not exist. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is a two element commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the value associated with the key.\n            ",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "Key",
                "type": "string",
                "desc": ""
            }
        },
        "llRefreshPrimURL": {
            "desc": "Reloads the web page shown on the sides of the object.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 20,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llRegionSay": {
            "desc": "Broadcasts Text to entire region on Channel (except for channel 0).",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Channel",
                "type": "integer",
                "desc": "Any integer value except zero."
            },
            "arg_1": {
                "name": "Text",
                "type": "string",
                "desc": "Message to be transmitted."
            }
        },
        "llRegionSayTo": {
            "desc": "Says Text, on Channel, to avatar or object indicated by TargetID (if within region).\\nIf TargetID is an avatar and Channel is nonzero, Text can be heard by any attachment on the avatar.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "TargetID",
                "type": "key",
                "desc": "Avatar or object to say to."
            },
            "arg_1": {
                "name": "Channel",
                "type": "integer",
                "desc": "Output channel, any integer value."
            },
            "arg_2": {
                "name": "Text",
                "type": "string",
                "desc": "Message to be transmitted."
            }
        },
        "llReleaseCamera": {
            "desc": "Return camera to agent.\\nDeprecated: Use llClearCameraParams instead.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llReleaseControls": {
            "desc": "Stop taking inputs.\\nStop taking inputs from the avatar.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llReleaseURL": {
            "desc": "Releases the specified URL, which was previously obtained using llRequestURL.  Once released, the URL will no longer be usable.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "URL",
                "type": "string",
                "desc": "URL to release."
            }
        },
        "llRemoteDataReply": {
            "desc": "Send an XML-RPC reply to MessageID on ChannelID with payload of string sData and integer iData. Deprecated: Use HTTP functions/events instead.\\nThe size of sData is limited to 254 characters.",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 3,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ChannelID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "MessageID",
                "type": "key",
                "desc": ""
            },
            "arg_2": {
                "name": "sData",
                "type": "string",
                "desc": "String data to send"
            },
            "arg_3": {
                "name": "iData",
                "type": "integer",
                "desc": "Integer data to send"
            }
        },
        "llRemoteDataSetRegion": {
            "desc": "Deprecated: Use HTTP functions/events instead.\\nIf an object using remote data channels changes regions, you must call this function to re-register the remote data channels.\\nYou do not need to make this call if you don&#39;t change regions.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": true,
            "god-mode": false,
            "type": "void"
        },
        "llRemoteLoadScriptPin": {
            "desc": "If the owner of the object containing this script can modify the object identified by the specified object key, and if the PIN matches the PIN previously set using llSetRemoteScriptAccessPin (on the target prim), then the script will be copied into target. Running is a boolean specifying whether the script should be enabled once copied into the target object.",
            "arg_numb": 5,
            "energy": 10,
            "sleep": 3,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ObjectID",
                "type": "key",
                "desc": "Target prim to attempt copying into."
            },
            "arg_1": {
                "name": "ScriptName",
                "type": "string",
                "desc": "Name of the script in current inventory to copy."
            },
            "arg_2": {
                "name": "PIN",
                "type": "integer",
                "desc": "Integer set on target prim as a Personal Information Number code."
            },
            "arg_3": {
                "name": "Running",
                "type": "integer",
                "desc": "If the script should be set running in the target prim."
            },
            "arg_4": {
                "name": "StartParameter",
                "type": "integer",
                "desc": "Integer. Parameter passed to the script if set to be running."
            }
        },
        "llRemoveFromLandBanList": {
            "desc": "Remove avatar from the land ban list.\\nRemove specified avatar from the land parcel ban list.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llRemoveFromLandPassList": {
            "desc": "Remove avatar from the land pass list.\\nRemove specified avatar from the land parcel pass list.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llRemoveInventory": {
            "desc": "Remove the named inventory item.\\nRemove the named inventory item from the object inventory.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": ""
            }
        },
        "llRemoveVehicleFlags": {
            "desc": "Removes the enabled bits in &#39;flags&#39;.\\nSets the vehicle flags to FALSE. Valid parameters can be found in the vehicle flags constants section.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Vehiclelags",
                "type": "integer",
                "desc": ""
            }
        },
        "llReplaceAgentEnvironment": {
            "desc": "Replaces the entire environment for an agent. Must be used as part of an experience.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "agent_id",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "transition",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "environment",
                "type": "string",
                "desc": ""
            }
        },
        "llReplaceEnvironment": {
            "desc": "Replaces the environment for a parcel or region.",
            "arg_numb": 5,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "position",
                "type": "vector",
                "desc": "Location of parcel to change. Use &#60;-1, -1, -1&#62; for entire region."
            },
            "arg_1": {
                "name": "environment",
                "type": "string",
                "desc": "Name of inventory item, or UUID of environment resource to apply. \n                     Use NULL_KEY or empty string to remove environment."
            },
            "arg_2": {
                "name": "track_no",
                "type": "integer",
                "desc": "Elevation zone of where to apply environment. Use -1 for all."
            },
            "arg_3": {
                "name": "day_length",
                "type": "integer",
                "desc": "Length of day cycle for this parcel or region. -1 to leave unchanged."
            },
            "arg_4": {
                "name": "day_offset",
                "type": "integer",
                "desc": "Offset from GMT for the day cycle on this parcel or region. -1 to leave unchanged."
            }
        },
        "llRequestAgentData": {
            "desc": "Requests data about AvatarID. When data is available the dataserver event will be raised.\\nThis function requests data about an avatar. If and when the information is collected, the dataserver event is triggered with the key returned from this function passed in the requested parameter. See the agent data constants (DATA_*) for details about valid values of data and what each will return in the dataserver event.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Data",
                "type": "integer",
                "desc": ""
            }
        },
        "llRequestDisplayName": {
            "desc": "Requests the display name of the agent. When the display name is available the dataserver event will be raised.\\nThe avatar identified does not need to be in the same region or online at the time of the request.\\nReturns a key that is used to identify the dataserver event when it is raised.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": "Avatar UUID"
            }
        },
        "llRequestExperiencePermissions": {
            "desc": "\n               Ask the agent for permission to participate in an experience. This request is similar to llRequestPermissions with the following permissions: PERMISSION_TAKE_CONTROLS, PERMISSION_TRIGGER_ANIMATION, PERMISSION_ATTACH, PERMISSION_TRACK_CAMERA, PERMISSION_CONTROL_CAMERA and PERMISSION_TELEPORT. However, unlike llRequestPermissions the decision to allow or block the request is persistent and applies to all scripts using the experience grid wide. Subsequent calls to llRequestExperiencePermissions from scripts in the experience will receive the same response automatically with no user interaction. One of experience_permissions or experience_permissions_denied will be generated in response to this call. Outstanding permission requests will be lost if the script is derezzed, moved to another region or reset.\n            ",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AgentID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "unused",
                "type": "string",
                "desc": "Not used, should be &#34;&#34;"
            }
        },
        "llRequestInventoryData": {
            "desc": "Requests data for the named InventoryItem.\\nWhen data is available, the dataserver event will be raised with the key returned from this function in the requested parameter.\\nThe only request currently implemented is to request data from landmarks, where the data returned is in the form &#34;&#60;float, float, float&#62;&#34; which can be cast to a vector. This position is in region local coordinates.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 1,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": ""
            }
        },
        "llRequestPermissions": {
            "desc": "Ask AvatarID to allow the script to perform certain actions, specified in the PermissionMask bitmask. PermissionMask should be one or more PERMISSION_* constants. Multiple permissions can be requested simultaneously by ORing the constants together. Many of the permissions requests can only go to object owner.\\nThis call will not stop script execution. If the avatar grants the requested permissions, the run_time_permissions event will be called.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "PermissionMask",
                "type": "integer",
                "desc": ""
            }
        },
        "llRequestSecureURL": {
            "desc": "Requests one HTTPS:// (SSL) URL for use by this object. The http_request event is triggered with results.\\nReturns a key that is the handle used for identifying the request in the http_request event.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llRequestSimulatorData": {
            "desc": "Requests the specified Data about RegionName. When the specified data is available, the dataserver event is raised.\\nData should use one of the DATA_SIM_* constants.\\nReturns a dataserver query ID and triggers the dataserver event when data is found.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 1,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "RegionName",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Data",
                "type": "integer",
                "desc": ""
            }
        },
        "llRequestURL": {
            "desc": "Requests one HTTP:// URL for use by this script. The http_request event is triggered with the result of the request.\\nReturns a key that is the handle used for identifying the result in the http_request event.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key"
        },
        "llRequestUserKey": {
            "desc": "Look up Agent ID for the named agent using a historical name.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "Name",
                "type": "string",
                "desc": "Name of agent to look up."
            }
        },
        "llRequestUsername": {
            "desc": "Requests single-word user-name of an avatar. When data is available the dataserver event will be raised.\\nRequests the user-name of the identified agent. When the user-name is available the dataserver event is raised.\\nThe agent identified does not need to be in the same region or online at the time of the request.\\nReturns a key that is used to identify the dataserver event when it is raised.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llResetAnimationOverride": {
            "desc": "Resets the animation of the specified animation state to the default value.\\nIf animation state equals &#34;ALL&#34;, then all animation states are reset.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AnimationState",
                "type": "string",
                "desc": ""
            }
        },
        "llResetLandBanList": {
            "desc": "Removes all residents from the land ban list.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llResetLandPassList": {
            "desc": "Removes all residents from the land access/pass list.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llResetOtherScript": {
            "desc": "Resets the named script.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ScriptName",
                "type": "string",
                "desc": ""
            }
        },
        "llResetScript": {
            "desc": "Resets the script.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llResetTime": {
            "desc": "Sets the time to zero.\\nSets the internal timer to zero.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llReturnObjectsByID": {
            "desc": "Return objects using their UUIDs.\\nRequires the PERMISSION_RETURN_OBJECTS permission and that the script owner owns the parcel the returned objects are in, or is an estate manager or region owner.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ObjectIDs",
                "type": "list",
                "desc": "List of object UUIDs to be returned."
            }
        },
        "llReturnObjectsByOwner": {
            "desc": "Return objects based upon their owner and a scope of parcel, parcel owner, or region.\\nRequires the PERMISSION_RETURN_OBJECTS permission and that the script owner owns the parcel the returned objects are in, or is an estate manager or region owner.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": "Object owner&#39;s UUID."
            },
            "arg_1": {
                "name": "Scope",
                "type": "integer",
                "desc": ""
            }
        },
        "llRezAtRoot": {
            "desc": "Instantiate owner&#39;s InventoryItem at Position with Velocity, Rotation and with StartParameter. The last selected root object&#39;s location will be set to Position.\\nCreates object&#39;s inventory item at the given Position, with Velocity, Rotation, and StartParameter.",
            "arg_numb": 5,
            "energy": 200,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            },
            "arg_2": {
                "name": "Velocity",
                "type": "vector",
                "desc": ""
            },
            "arg_3": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            },
            "arg_4": {
                "name": "StartParameter",
                "type": "integer",
                "desc": ""
            }
        },
        "llRezObject": {
            "desc": "Instantiate owners InventoryItem at Position with Velocity, Rotation and with start StartParameter.\\nCreates object&#39;s inventory item at Position with Velocity and Rotation supplied. The StartParameter value will be available to the newly created object in the on_rez event or through the llGetStartParameter function.\\nThe Velocity parameter is ignored if the rezzed object is not physical.",
            "arg_numb": 5,
            "energy": 200,
            "sleep": 0.1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            },
            "arg_2": {
                "name": "Velocity",
                "type": "vector",
                "desc": ""
            },
            "arg_3": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            },
            "arg_4": {
                "name": "StartParameter",
                "type": "integer",
                "desc": ""
            }
        },
        "llRot2Angle": {
            "desc": "Returns the rotation angle represented by Rotation.\\nReturns the angle represented by the Rotation.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "llRot2Axis": {
            "desc": "Returns the rotation axis represented by Rotation.\\nReturns the axis represented by the Rotation.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "llRot2Euler": {
            "desc": "Returns the Euler representation (roll, pitch, yaw) of Rotation.\\nReturns the Euler Angle representation of the Rotation.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "llRot2Fwd": {
            "desc": "Returns the forward vector defined by Rotation.\\nReturns the forward axis represented by the Rotation.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "llRot2Left": {
            "desc": "Returns the left vector defined by Rotation.\\nReturns the left axis represented by the Rotation.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "llRot2Up": {
            "desc": "Returns the up vector defined by Rotation.\\nReturns the up axis represented by the Rotation.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "llRotBetween": {
            "desc": "Returns the rotation to rotate Vector1 to Vector2.\\nReturns the rotation needed to rotate Vector1 to Vector2.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "rotation",
            "arg_0": {
                "name": "Vector1",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "Vector2",
                "type": "vector",
                "desc": ""
            }
        },
        "llRotLookAt": {
            "desc": "Cause object to rotate to Rotation, with a force function defined by Strength and Damping parameters. Good strength values are around half the mass of the object and good damping values are less than 1/10th of the strength.\\nAsymmetrical shapes require smaller damping.\\nA strength of 0.0 cancels the look at.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            },
            "arg_1": {
                "name": "Strength",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Damping",
                "type": "float",
                "desc": ""
            }
        },
        "llRotTarget": {
            "desc": "Set rotations with error of LeeWay radians as a rotational target, and return an ID for the rotational target.\\nThe returned number is a handle that can be used in at_rot_target and llRotTargetRemove.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            },
            "arg_1": {
                "name": "LeeWay",
                "type": "float",
                "desc": ""
            }
        },
        "llRotTargetRemove": {
            "desc": "Removes rotational target number.\\nRemove rotational target indicated by the handle.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Handle",
                "type": "integer",
                "desc": ""
            }
        },
        "llRotateTexture": {
            "desc": "Sets the texture rotation for the specified Face to angle Radians.\\nIf Face is ALL_SIDES, rotates the texture of all sides.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Radians",
                "type": "float",
                "desc": ""
            },
            "arg_1": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llRound": {
            "desc": "Returns Value rounded to the nearest integer.\\nReturns the Value rounded to the nearest integer.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": ""
            }
        },
        "llSHA1String": {
            "desc": "Returns a string of 40 hex characters that is the SHA1 security hash of text.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llSHA256String": {
            "desc": "Returns a string of 64 hex characters that is the SHA256 security hash of text.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "text",
                "type": "string",
                "desc": ""
            }
        },
        "llSameGroup": {
            "desc": "Returns TRUE if avatar ID is in the same region and has the same active group, otherwise FALSE.\\nReturns TRUE if the object or agent identified is in the same simulator and has the same active group as this object. Otherwise, returns FALSE.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ID",
                "type": "key",
                "desc": ""
            }
        },
        "llSay": {
            "desc": "Says Text on Channel.\\nThis chat method has a range of 20m radius.\\nPUBLIC_CHANNEL is the public chat channel that all avatars see as chat text. DEBUG_CHANNEL is the script debug channel, and is also visible to nearby avatars. All other channels are are not sent to avatars, but may be used to communicate with scripts.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Channel",
                "type": "integer",
                "desc": "Channel to use to say text on."
            },
            "arg_1": {
                "name": "Text",
                "type": "string",
                "desc": "Text to say."
            }
        },
        "llScaleByFactor": {
            "desc": "Attempts to resize the entire object by ScalingFactor, maintaining the size-position ratios of the prims.\\n\\nResizing is subject to prim scale limits and linkability limits. This function can not resize the object if the linkset is physical, a pathfinding character, in a keyframed motion, or if resizing would cause the parcel to overflow.\\nReturns a boolean (an integer) TRUE if it succeeds, FALSE if it fails.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "ScalingFactor",
                "type": "float",
                "desc": "The multiplier to be used with the prim sizes and their local positions."
            }
        },
        "llScaleTexture": {
            "desc": "Sets the diffuse texture Horizontal and Vertical repeats on Face of the prim the script is attached to.\\nIf Face == ALL_SIDES, all sides are set in one call.\\nNegative values for horizontal and vertical will flip the texture.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Horizontal",
                "type": "float",
                "desc": ""
            },
            "arg_1": {
                "name": "Vertical",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llScriptDanger": {
            "desc": "Returns TRUE if Position is over public land, sandbox land, land that doesn&#39;t allow everyone to edit and build, or land that doesn&#39;t allow outside scripts.\\nReturns true if the position is over public land, land that doesn&#39;t allow everyone to edit and build, or land that doesn&#39;t allow outside scripts.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            }
        },
        "llScriptProfiler": {
            "desc": "Enables or disables script profiling options. Currently only supports PROFILE_SCRIPT_MEMORY (Mono only) and PROFILE_NONE.\\nMay significantly reduce script performance.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "State",
                "type": "integer",
                "desc": "PROFILE_NONE or PROFILE_SCRIPT_MEMORY flags to control the state."
            }
        },
        "llSendRemoteData": {
            "desc": "Deprecated: use HTTP functions and events instead.\\nSends an XML-RPC request to Destination through ChannelID with payload of ChannelID (in a string), integer Value and string Text.\\nReturns a key that is the message_id for the resulting remote_data events.",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 3,
            "deprecated": true,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "ChannelID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Destination",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "Value",
                "type": "integer",
                "desc": ""
            },
            "arg_3": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llSensor": {
            "desc": "Performs a single scan for Name and ID with Type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within Range meters and Arc radians of forward vector.\\nSpecifying a blank Name, 0 Type, or NULL_KEY ID will prevent filtering results based on that parameter. A range of 0.0 does not perform a scan.\\nResults are returned in the sensor and no_sensor events.",
            "arg_numb": 5,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Name",
                "type": "string",
                "desc": "Object or avatar name."
            },
            "arg_1": {
                "name": "ID",
                "type": "key",
                "desc": "Object or avatar UUID."
            },
            "arg_2": {
                "name": "Type",
                "type": "integer",
                "desc": "Bit-field mask of AGENT, AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE, PASSIVE, and/or SCRIPTED"
            },
            "arg_3": {
                "name": "Range",
                "type": "float",
                "desc": "Distance to scan. 0.0 - 96.0m."
            },
            "arg_4": {
                "name": "Arc",
                "type": "float",
                "desc": "Angle, in radians, from the local x-axis of the prim to scan."
            }
        },
        "llSensorRemove": {
            "desc": "removes sensor.\\nRemoves the sensor set by llSensorRepeat.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llSensorRepeat": {
            "desc": "Initiates a periodic scan every Rate seconds, for Name and ID with Type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within Range meters and Arc radians of forward vector.\\nSpecifying a blank Name, 0 Type, or NULL_KEY ID will prevent filtering results based on that parameter. A range of 0.0 does not perform a scan.\\nResults are returned in the sensor and no_sensor events.",
            "arg_numb": 6,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Name",
                "type": "string",
                "desc": "Object or avatar name."
            },
            "arg_1": {
                "name": "ID",
                "type": "key",
                "desc": "Object or avatar UUID."
            },
            "arg_2": {
                "name": "Type",
                "type": "integer",
                "desc": "Bit-field mask of AGENT, AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE, PASSIVE, and/or SCRIPTED"
            },
            "arg_3": {
                "name": "Range",
                "type": "float",
                "desc": "Distance to scan. 0.0 - 96.0m."
            },
            "arg_4": {
                "name": "Arc",
                "type": "float",
                "desc": "Angle, in radians, from the local x-axis of the prim to scan."
            },
            "arg_5": {
                "name": "Rate",
                "type": "float",
                "desc": "Period, in seconds, between scans."
            }
        },
        "llSetAgentEnvironment": {
            "desc": "Sets an agent&#39;s environmental values to the specified values. Must be used as part of an experience.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "Integer",
            "arg_0": {
                "name": "agent_id",
                "type": "key",
                "desc": "Agent to receive new environment settings."
            },
            "arg_1": {
                "name": "transition",
                "type": "float",
                "desc": "Number of seconds over which to apply new settings."
            },
            "arg_2": {
                "name": "Settings",
                "type": "list",
                "desc": "List of environment settings to replace for agent."
            }
        },
        "llSetAlpha": {
            "desc": "Sets the alpha (opacity) of Face.\\nSets the alpha (opacity) value for Face. If Face is ALL_SIDES, sets the alpha for all faces. The alpha value is interpreted as an opacity percentage (1.0 is fully opaque, and 0.2 is mostly transparent). This function will clamp alpha values less than 0.1 to 0.1 and greater than 1.0 to 1.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Opacity",
                "type": "float",
                "desc": ""
            },
            "arg_1": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetAngularVelocity": {
            "desc": "Sets an object&#39;s angular velocity to AngVel, in local coordinates if Local == TRUE (if the script is physical).\\nHas no effect on non-physical objects.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AngVel",
                "type": "vector",
                "desc": "The angular velocity to set the object to."
            },
            "arg_1": {
                "name": "Local",
                "type": "integer",
                "desc": "If TRUE, the AngVel is treated as a local directional vector instead of a regional directional vector."
            }
        },
        "llSetAnimationOverride": {
            "desc": "Sets the animation (in object inventory) that will play for the given animation state.\\nTo use this function the script must obtain the PERMISSION_OVERRIDE_ANIMATIONS permission.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AnimationState",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "AnimationName",
                "type": "string",
                "desc": ""
            }
        },
        "llSetBuoyancy": {
            "desc": "Set the tasks buoyancy (0 is none, &#60; 1.0 sinks, 1.0 floats, &#62; 1.0 rises).\\nSet the object buoyancy. A value of 0 is none, less than 1.0 sinks, 1.0 floats, and greater than 1.0 rises.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Buoyancy",
                "type": "float",
                "desc": ""
            }
        },
        "llSetCameraAtOffset": {
            "desc": "Sets the camera used in this object, at offset, if an avatar sits on it.\\nSets the offset that an avatar&#39;s camera will be moved to if the avatar sits on the object.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llSetCameraEyeOffset": {
            "desc": "Sets the camera eye offset used in this object if an avatar sits on it.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llSetCameraParams": {
            "desc": "Sets multiple camera parameters at once. List format is [ rule-1, data-1, rule-2, data-2 . . . rule-n, data-n ].",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Parameters",
                "type": "list",
                "desc": ""
            }
        },
        "llSetClickAction": {
            "desc": "Sets the action performed when a prim is clicked upon.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Action",
                "type": "integer",
                "desc": "A CLICK_ACTION_* flag"
            }
        },
        "llSetColor": {
            "desc": "Sets the color, for the face.\\nSets the color of the side specified. If Face is ALL_SIDES, sets the color on all faces.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Color",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetContentType": {
            "desc": "Set the media type of an LSL HTTP server response to ContentType.\\nHTTPRequestID must be a valid http_request ID. ContentType must be one of the CONTENT_TYPE_* constants.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "HTTPRequestID",
                "type": "key",
                "desc": "A valid http_request() key"
            },
            "arg_1": {
                "name": "ContentType",
                "type": "integer",
                "desc": "Media type to use with any following llHTTPResponse(HTTPRequestID, ...)"
            }
        },
        "llSetDamage": {
            "desc": "Sets the amount of damage that will be done to an avatar that this task hits.\tTask will be killed.\\nSets the amount of damage that will be done to an avatar that this object hits. This object will be destroyed on damaging an avatar, and no collision event is triggered.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Damage",
                "type": "float",
                "desc": ""
            }
        },
        "llSetEnvironment": {
            "desc": "Returns a string with the requested data about the region.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": "Location within the region."
            },
            "arg_1": {
                "name": "EnvParams",
                "type": "list",
                "desc": "List of environment settings to change for the specified parcel location."
            }
        },
        "llSetForce": {
            "desc": "Sets Force on object, in object-local coordinates if Local == TRUE (otherwise, the region reference frame is used).\\nOnly works on physical objects.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Force",
                "type": "vector",
                "desc": "Directional force."
            },
            "arg_1": {
                "name": "Local",
                "type": "integer",
                "desc": "Boolean, if TRUE uses local axis, if FALSE uses region axis."
            }
        },
        "llSetForceAndTorque": {
            "desc": "Sets the Force and Torque of object, in object-local coordinates if Local == TRUE (otherwise, the region reference frame is used).\\nOnly works on physical objects.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Force",
                "type": "vector",
                "desc": "Directional force."
            },
            "arg_1": {
                "name": "Torque",
                "type": "vector",
                "desc": "Torque force."
            },
            "arg_2": {
                "name": "Local",
                "type": "integer",
                "desc": "Boolean, if TRUE uses local axis, if FALSE uses region axis."
            }
        },
        "llSetHoverHeight": {
            "desc": "Critically damps a physical object to a Height (either above ground level or above the higher of land and water if water == TRUE).\\nDo not use with vehicles. Use llStopHover to stop hovering.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Height",
                "type": "float",
                "desc": "Distance above the ground."
            },
            "arg_1": {
                "name": "Water",
                "type": "integer",
                "desc": "Boolean, if TRUE then hover above water too."
            },
            "arg_2": {
                "name": "Tau",
                "type": "float",
                "desc": "Seconds to critically damp in."
            }
        },
        "llSetInventoryPermMask": {
            "desc": "Sets the given permission mask to the new value on the inventory item.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": true,
            "type": "void",
            "arg_0": {
                "name": "InventoryItem",
                "type": "string",
                "desc": "An item in the prim&#39;s inventory"
            },
            "arg_1": {
                "name": "PermissionFlag",
                "type": "integer",
                "desc": "MASK_* flag"
            },
            "arg_2": {
                "name": "PermissionMask",
                "type": "integer",
                "desc": "Permission bit-field (PERM_* flags)"
            }
        },
        "llSetKeyframedMotion": {
            "desc": "Requests that a non-physical object be key-framed according to key-frame list.\\nSpecify a list of times, positions, and orientations to be followed by an object. The object will be smoothly moved between key-frames by the simulator. Collisions with other non-physical or key-framed objects will be ignored (no script events will fire and collision processing will not occur). Collisions with physical objects will be computed and reported, but the key-framed object will be unaffected by those collisions.\\nKeyframes is a strided list containing positional, rotational, and time data for each step in the motion.  Options is a list containing optional arguments and parameters (specified by KFM_* constants).",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Keyframes",
                "type": "list",
                "desc": "Strided keyframe list of the form: position, orientation, time. Each keyframe is interpreted relative to the previous transform of the object."
            },
            "arg_1": {
                "name": "Options",
                "type": "list",
                "desc": ""
            }
        },
        "llSetLinkAlpha": {
            "desc": "If a prim exists in the link chain at LinkNumber, set Face to Opacity.\\nSets the Face, on the linked prim specified, to the Opacity.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Opacity",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetLinkCamera": {
            "desc": "Sets the camera eye offset, and the offset that camera is looking at, for avatars that sit on the linked prim.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Prim link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag"
            },
            "arg_1": {
                "name": "EyeOffset",
                "type": "vector",
                "desc": "Offset, relative to the object&#39;s centre and expressed in local coordinates, that the camera looks from."
            },
            "arg_2": {
                "name": "LookOffset",
                "type": "vector",
                "desc": "Offset, relative to the object&#39;s centre and expressed in local coordinates, that the camera looks toward."
            }
        },
        "llSetLinkColor": {
            "desc": "If a task exists in the link chain at LinkNumber, set the Face to color.\\nSets the color of the linked child&#39;s side, specified by LinkNumber.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag."
            },
            "arg_1": {
                "name": "Color",
                "type": "vector",
                "desc": "Color in RGB &#60;R.R, G.G, B.B&#62;"
            },
            "arg_2": {
                "name": "Face",
                "type": "integer",
                "desc": "Side number or ALL_SIDES."
            }
        },
        "llSetLinkMedia": {
            "desc": "Set the media parameters for a particular face on linked prim, specified by Link. Returns an integer that is a STATUS_* flag which details the success/failure of the operation(s).\\nMediaParameters is a set of name/value pairs in no particular order. Parameters not specified are unchanged, or if new media is added then set to the default specified.",
            "arg_numb": 3,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Link",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims)."
            },
            "arg_1": {
                "name": "Face",
                "type": "integer",
                "desc": "Face number."
            },
            "arg_2": {
                "name": "Parameters",
                "type": "list",
                "desc": "A set of name/value pairs (in no particular order)"
            }
        },
        "llSetLinkPrimitiveParams": {
            "desc": "Set primitive parameters for LinkNumber based on Parameters.\\nSets the parameters (or properties) of any linked prim in one step.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag"
            },
            "arg_1": {
                "name": "Parameters",
                "type": "list",
                "desc": ""
            }
        },
        "llSetLinkPrimitiveParamsFast": {
            "desc": "Set primitive parameters for LinkNumber based on Parameters, without a delay.\\nSet parameters for link number, from the list of Parameters, with no built-in script sleep. This function is identical to llSetLinkPrimitiveParams, except without the delay.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag"
            },
            "arg_1": {
                "name": "Parameters",
                "type": "list",
                "desc": ""
            }
        },
        "llSetLinkTexture": {
            "desc": "Sets the Texture of Face on a linked prim, specified by LinkNumber. Texture may be a UUID or name of a texture in prim inventory.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Texture",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetLinkTextureAnim": {
            "desc": "Animates a texture on the prim specified by LinkNumber, by setting the texture scale and offset.\\nMode is a bitmask of animation options.\\nFace specifies which object face to animate.\\nSizeX and SizeY specify the number of horizontal and vertical frames.Start specifes the animation start point.\\nLength specifies the animation duration.\\nRate specifies the animation playback rate.",
            "arg_numb": 8,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "LinkNumber",
                "type": "integer",
                "desc": "Link number (0: unlinked, 1: root prim, &#62;1: child prims) or a LINK_* flag to effect"
            },
            "arg_1": {
                "name": "Mode",
                "type": "integer",
                "desc": "Bitmask of animation options."
            },
            "arg_2": {
                "name": "Face",
                "type": "integer",
                "desc": "Specifies which object face to animate or ALL_SIDES."
            },
            "arg_3": {
                "name": "SizeX",
                "type": "integer",
                "desc": "Horizontal frames (ignored for ROTATE and SCALE)."
            },
            "arg_4": {
                "name": "SizeY",
                "type": "integer",
                "desc": "Vertical frames (ignored for ROTATE and SCALE)."
            },
            "arg_5": {
                "name": "Start",
                "type": "float",
                "desc": "Start position/frame number (or radians for ROTATE)."
            },
            "arg_6": {
                "name": "Length",
                "type": "float",
                "desc": "Specifies the animation duration, in frames (or radians for ROTATE)."
            },
            "arg_7": {
                "name": "Rate",
                "type": "float",
                "desc": "Specifies the animation playback rate, in frames per second (must be greater than zero)."
            }
        },
        "llSetLocalRot": {
            "desc": "Sets the rotation of a child prim relative to the root prim.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "llSetMemoryLimit": {
            "desc": "Requests Limit bytes to be reserved for this script.\\nReturns TRUE or FALSE indicating whether the limit was set successfully.\\nThis function has no effect if the script is running in the LSO VM.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Limit",
                "type": "integer",
                "desc": "The amount to reserve, which must be less than the allowed maximum (currently 64KB) and not already have been exceeded."
            }
        },
        "llSetObjectDesc": {
            "desc": "Sets the description of the prim to Description.\\nThe description field is limited to 127 characters.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Description",
                "type": "string",
                "desc": ""
            }
        },
        "llSetObjectName": {
            "desc": "Sets the prim&#39;s name to Name.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Name",
                "type": "string",
                "desc": ""
            }
        },
        "llSetObjectPermMask": {
            "desc": "Sets the specified PermissionFlag permission to the value specified by PermissionMask on the object the script is attached to.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": true,
            "type": "void",
            "arg_0": {
                "name": "PermissionFlag",
                "type": "integer",
                "desc": "MASK_* flag"
            },
            "arg_1": {
                "name": "PermissionMask",
                "type": "integer",
                "desc": "Permission bit-field (PERM_* flags)"
            }
        },
        "llSetParcelMusicURL": {
            "desc": "Sets the streaming audio URL for the parcel the object is on.\\nThe object must be owned by the owner of the parcel; if the parcel is group owned the object must be owned by that group.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "URL",
                "type": "string",
                "desc": ""
            }
        },
        "llSetPayPrice": {
            "desc": "Sets the default amount when someone chooses to pay this object.\\nPrice is the default price shown in the textu input field.  QuickButtons specifies the 4 payment values shown in the payment dialog&#39;s buttons.\\nInput field and buttons may be hidden with PAY_HIDE constant, and may be set to their default values using PAY_DEFAULT.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Price",
                "type": "integer",
                "desc": "The default price shown in the textu input field."
            },
            "arg_1": {
                "name": "QuickButtons",
                "type": "list",
                "desc": "Specifies the 4 payment values shown in the payment dialog&#39;s buttons (or PAY_HIDE)."
            }
        },
        "llSetPhysicsMaterial": {
            "desc": "Sets the selected parameters of the object&#39;s physics behavior.\\nMaterialBits is a bitmask specifying which of the parameters in the other arguments should be applied to the object. GravityMultiplier, Restitution, Friction, and Density are the possible parameters to manipulate.",
            "arg_numb": 5,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "MaterialBits",
                "type": "integer",
                "desc": "A bitmask specifying which of the parameters in the other arguments should be applied to the object."
            },
            "arg_1": {
                "name": "GravityMultiplier",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Restitution",
                "type": "float",
                "desc": ""
            },
            "arg_3": {
                "name": "Friction",
                "type": "float",
                "desc": ""
            },
            "arg_4": {
                "name": "Density",
                "type": "float",
                "desc": ""
            }
        },
        "llSetPos": {
            "desc": "If the object is not physical, this function sets the position of the prim.\\nIf the script is in a child prim, Position is treated as root relative and the link-set is adjusted.\\nIf the prim is the root prim, the entire object is moved (up to 10m) to Position in region coordinates.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": "Region coordinates to move to (within 10m)."
            }
        },
        "llSetPrimMediaParams": {
            "desc": "Sets the MediaParameters for a particular Face on the prim. Returns an integer that is a STATUS_* flag which details the success/failure of the operation(s).\\nMediaParameters is a set of name/value pairs in no particular order. Parameters not specified are unchanged, or if new media is added then set to the default specified.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 1,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Face",
                "type": "integer",
                "desc": "Face number"
            },
            "arg_1": {
                "name": "MediaParameters",
                "type": "list",
                "desc": "A set of name/value pairs (in no particular order)"
            }
        },
        "llSetPrimURL": {
            "desc": "Deprecated: Use llSetPrimMediaParams instead.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 20,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "URL",
                "type": "string",
                "desc": ""
            }
        },
        "llSetPrimitiveParams": {
            "desc": "This function changes the many properties (or &#34;parameters&#34;) of a prim in one operation. Parameters is a list of changes.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Parameters",
                "type": "list",
                "desc": "A list of changes."
            }
        },
        "llSetRegionPos": {
            "desc": "Attempts to move the object so that the root prim is within 0.1m of Position.\\nReturns an integer boolean, TRUE if the object is successfully placed within 0.1 m of Position, FALSE otherwise.\\nPosition may be any location within the region or up to 10m across a region border.\\nIf the position is below ground, it will be set to the ground level at that x,y location.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": "Vector. The location to move to, in region coordinates."
            }
        },
        "llSetRemoteScriptAccessPin": {
            "desc": "If PIN is set to a non-zero number, the task will accept remote script loads via llRemoteLoadScriptPin() if it passes in the correct PIN. Othersise, llRemoteLoadScriptPin() is ignored.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "PIN",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetRot": {
            "desc": "If the object is not physical, this function sets the rotation of the prim.\\nIf the script is in a child prim, Rotation is treated as root relative and the link-set is adjusted.\\nIf the prim is the root prim, the entire object is rotated to Rotation in the global reference frame.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "llSetScale": {
            "desc": "Sets the prim&#39;s scale (size) to Scale.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Scale",
                "type": "vector",
                "desc": ""
            }
        },
        "llSetScriptState": {
            "desc": "Enable or disable the script Running state of Script in the prim.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ScriptName",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Running",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetSitText": {
            "desc": "Displays Text rather than &#39;Sit&#39; in the viewer&#39;s context menu.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llSetSoundQueueing": {
            "desc": "Sets whether successive calls to llPlaySound, llLoopSound, etc., (attached sounds) interrupt the currently playing sound.\\nThe default for objects is FALSE. Setting this value to TRUE will make the sound wait until the current playing sound reaches its end. The queue is one level deep.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "QueueEnable",
                "type": "integer",
                "desc": "Boolean, sound queuing: TRUE enables, FALSE disables (default)."
            }
        },
        "llSetSoundRadius": {
            "desc": "Limits radius for audibility of scripted sounds (both attached and triggered) to distance Radius.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Radius",
                "type": "float",
                "desc": "Maximum distance that sounds can be heard."
            }
        },
        "llSetStatus": {
            "desc": "Sets object status specified in Status bitmask (e.g. STATUS_PHYSICS|STATUS_PHANTOM) to boolean Value.\\nFor a full list of STATUS_* constants, see wiki documentation.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Status",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Value",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetText": {
            "desc": "Causes Text to float above the prim, using the specified Color and Opacity.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Color",
                "type": "vector",
                "desc": ""
            },
            "arg_2": {
                "name": "Opacity",
                "type": "float",
                "desc": ""
            }
        },
        "llSetTexture": {
            "desc": "Applies Texture to Face of prim.\\nTexture may be a UUID or name of a texture in prim inventory.\\nIf Face is ALL_SIDES, set the texture on all faces.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0.2,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Texture",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Face",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetTextureAnim": {
            "desc": "Animates a texture by setting the texture scale and offset.\\nMode is a bitmask of animation options.\\nFace specifies which object face to animate.\\nSizeX and SizeY specify the number of horizontal and vertical frames.Start specifes the animation start point.\\nLength specifies the animation duration.\\nRate specifies the animation playback rate.",
            "arg_numb": 7,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Mode",
                "type": "integer",
                "desc": "Mask of Mode flags."
            },
            "arg_1": {
                "name": "Face",
                "type": "integer",
                "desc": "Face number or ALL_SIDES."
            },
            "arg_2": {
                "name": "SizeX",
                "type": "integer",
                "desc": "Horizontal frames (ignored for ROTATE and SCALE)."
            },
            "arg_3": {
                "name": "SizeY",
                "type": "integer",
                "desc": "Vertical frames (ignored for ROTATE and SCALE)."
            },
            "arg_4": {
                "name": "Start",
                "type": "float",
                "desc": "Start position/frame number (or radians for ROTATE)."
            },
            "arg_5": {
                "name": "Length",
                "type": "float",
                "desc": "number of frames to display (or radians for ROTATE)."
            },
            "arg_6": {
                "name": "Rate",
                "type": "float",
                "desc": "Frames per second (must not greater than zero)."
            }
        },
        "llSetTimerEvent": {
            "desc": "Causes the timer event to be triggered every Rate seconds.\\n Passing in 0.0 stops further timer events.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Rate",
                "type": "float",
                "desc": ""
            }
        },
        "llSetTorque": {
            "desc": "Sets the Torque acting on the script&#39;s object, in object-local coordinates if Local == TRUE (otherwise, the region reference frame is used).\\nOnly works on physical objects.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Torque",
                "type": "vector",
                "desc": "Torque force."
            },
            "arg_1": {
                "name": "Local",
                "type": "integer",
                "desc": "Boolean, if TRUE uses local axis, if FALSE uses region axis."
            }
        },
        "llSetTouchText": {
            "desc": "Displays Text in the viewer context menu that acts on a touch.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llSetVehicleFlags": {
            "desc": "Enables the vehicle flags specified in the Flags bitmask.\\nValid parameters can be found in the wiki documentation.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Flags",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetVehicleFloatParam": {
            "desc": "Sets a vehicle float parameter.\\nValid parameters can be found in the wiki documentation.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ParameterName",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "ParameterValue",
                "type": "float",
                "desc": ""
            }
        },
        "llSetVehicleRotationParam": {
            "desc": "Sets a vehicle rotation parameter.\\nValid parameters can be found in the wiki documentation.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ParameterName",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "ParameterValue",
                "type": "rotation",
                "desc": ""
            }
        },
        "llSetVehicleType": {
            "desc": "Activates the vehicle action on the object with vehicle preset Type.\\nValid Types and an explanation of their characteristics can be found in wiki documentation.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Type",
                "type": "integer",
                "desc": ""
            }
        },
        "llSetVehicleVectorParam": {
            "desc": "Sets a vehicle vector parameter.\\nValid parameters can be found in the wiki documentation.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "ParameterName",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "ParameterValue",
                "type": "vector",
                "desc": ""
            }
        },
        "llSetVelocity": {
            "desc": "If the object is physics-enabled, sets the object&#39;s linear velocity to Velocity.\\nIf Local==TRUE, Velocity is treated as a local directional vector; otherwise, Velocity is treated as a global directional vector.",
            "arg_numb": 2,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Velocity",
                "type": "vector",
                "desc": "The velocity to apply."
            },
            "arg_1": {
                "name": "Local",
                "type": "integer",
                "desc": "If TRUE, the Velocity is treated as a local directional vector instead of a regional directional vector."
            }
        },
        "llShout": {
            "desc": "Shouts Text on Channel.\\nThis chat method has a range of 100m radius.\\nPUBLIC_CHANNEL is the public chat channel that all avatars see as chat text. DEBUG_CHANNEL is the script debug channel, and is also visible to nearby avatars. All other channels are are not sent to avatars, but may be used to communicate with scripts.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Channel",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llSin": {
            "desc": "Returns the sine of Theta (Theta in radians).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Theta",
                "type": "float",
                "desc": ""
            }
        },
        "llSitOnLink": {
            "desc": "If agent identified by AvatarID is participating in the experience, sit them on the specified link&#39;s sit target.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "LinkID",
                "type": "integer",
                "desc": ""
            }
        },
        "llSitTarget": {
            "desc": "Set the sit location for this object. If offset == ZERO_VECTOR, clears the sit target.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "Rotation",
                "type": "rotation",
                "desc": ""
            }
        },
        "llSleep": {
            "desc": "Put script to sleep for Time seconds.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Time",
                "type": "float",
                "desc": ""
            }
        },
        "llSound": {
            "desc": "Deprecated: Use llPlaySound instead.\\nPlays Sound at Volume and specifies whether the sound should loop and/or be enqueued.",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Volume",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Queue",
                "type": "integer",
                "desc": ""
            },
            "arg_3": {
                "name": "Loop",
                "type": "integer",
                "desc": ""
            }
        },
        "llSoundPreload": {
            "desc": "Deprecated: Use llPreloadSound instead.\\nPreloads a sound on viewers within range.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            }
        },
        "llSqrt": {
            "desc": "Returns the square root of Value.\\nTriggers a math runtime error for imaginary results (if Value &#60; 0.0).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Value",
                "type": "float",
                "desc": ""
            }
        },
        "llStartAnimation": {
            "desc": "This function plays the specified animation from playing on the avatar who received the script&#39;s most recent permissions request.\\nAnimation may be an animation in task inventory or a built-in animation.\\nRequires PERMISSION_TRIGGER_ANIMATION.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Animation",
                "type": "string",
                "desc": ""
            }
        },
        "llStartObjectAnimation": {
            "desc": "This function plays the specified animation on the rigged mesh object associated with the current script.\\nAnimation may be an animation in task inventory or a built-in animation.\\n",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Animation",
                "type": "string",
                "desc": ""
            }
        },
        "llStopAnimation": {
            "desc": "This function stops the specified animation on the avatar who received the script&#39;s most recent permissions request.\\nAnimation may be an animation in task inventory, a built-in animation, or the uuid of an animation.\\nRequires PERMISSION_TRIGGER_ANIMATION.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Animation",
                "type": "string",
                "desc": ""
            }
        },
        "llStopHover": {
            "desc": "Stop hovering to a height (due to llSetHoverHeight()).",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llStopLookAt": {
            "desc": "Stop causing object to point at a target (due to llLookAt() or llRotLookAt()).",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llStopMoveToTarget": {
            "desc": "Stops critically damped motion (due to llMoveToTarget()).",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llStopObjectAnimation": {
            "desc": "This function stops the specified animation on the rigged mesh object associated with the current script.\\nAnimation may be an animation in task inventory, a built-in animation, or the uuid of an animation.\\n",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Animation",
                "type": "string",
                "desc": ""
            }
        },
        "llStopSound": {
            "desc": "Stops playback of the currently attached sound.",
            "arg_numb": 0,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void"
        },
        "llStringLength": {
            "desc": "Returns an integer that is the number of characters in Text (not counting the null).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llStringToBase64": {
            "desc": "Returns the string Base64 representation of the input string.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llStringTrim": {
            "desc": "Outputs a string, eliminating white-space from the start and/or end of the input string Text.\\nValid options for TrimType:\\nSTRING_TRIM_HEAD: trim all leading spaces in Text\\nSTRING_TRIM_TAIL: trim all trailing spaces in Text\\nSTRING_TRIM: trim all leading and trailing spaces in Text.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": "String to trim"
            },
            "arg_1": {
                "name": "TrimType",
                "type": "integer",
                "desc": "STRING_TRIM_HEAD, STRING_TRIM_TAIL, or STRING_TRIM."
            }
        },
        "llSubStringIndex": {
            "desc": "Returns an integer that is the index in Text where string pattern Sequence first appears. Returns -1 if not found.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Sequence",
                "type": "string",
                "desc": ""
            }
        },
        "llTakeCamera": {
            "desc": "Deprecated: Use llSetCameraParams instead.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": true,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llTakeControls": {
            "desc": "Take controls from the agent the script has permissions for.\\nIf (Accept == (Controls &#38; input)), send input to the script.  PassOn determines whether Controls also perform their normal functions.\\nRequires the PERMISSION_TAKE_CONTROLS permission to run.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Controls",
                "type": "integer",
                "desc": "Bit-field of CONTROL_* flags."
            },
            "arg_1": {
                "name": "Accept",
                "type": "integer",
                "desc": "Boolean, determines whether control events are generated."
            },
            "arg_2": {
                "name": "PassOn",
                "type": "integer",
                "desc": "Boolean, determines whether controls are disabled."
            }
        },
        "llTan": {
            "desc": "Returns the tangent of Theta (Theta in radians).",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Theta",
                "type": "float",
                "desc": ""
            }
        },
        "llTarget": {
            "desc": "This function is to have the script know when it has reached a position.\\nIt registers a Position with a Range that triggers at_target and not_at_target events continuously until unregistered.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "integer",
            "arg_0": {
                "name": "Position",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "Range",
                "type": "float",
                "desc": ""
            }
        },
        "llTargetOmega": {
            "desc": "Attempt to spin at SpinRate with strength Gain on Axis.\\nA spin rate of 0.0 cancels the spin. This function always works in object-local coordinates.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Axis",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "SpinRate",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "Gain",
                "type": "float",
                "desc": ""
            }
        },
        "llTargetRemove": {
            "desc": "Removes positional target Handle registered with llTarget.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Target",
                "type": "integer",
                "desc": ""
            }
        },
        "llTargetedEmail": {
            "desc": "Sends an email with Subject and Message to the owner or creator of an object .",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 20,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Target",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Subject",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llTeleportAgent": {
            "desc": "Requests a teleport of avatar to a landmark stored in the object&#39;s inventory. If no landmark is provided (an empty string), the avatar is teleported to the location position in the current region. In either case, the avatar is turned to face the position given by look_at in local coordinates.\\nRequires the PERMISSION_TELEPORT permission. This function can only teleport the owner of the object.",
            "arg_numb": 4,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": "UUID of avatar."
            },
            "arg_1": {
                "name": "LandmarkName",
                "type": "string",
                "desc": "Name of landmark (in object contents), or empty string, to use."
            },
            "arg_2": {
                "name": "Position",
                "type": "vector",
                "desc": "If no landmark was provided, the position within the current region to teleport the avatar to."
            },
            "arg_3": {
                "name": "LookAtPoint",
                "type": "vector",
                "desc": "The position within the target region that the avatar should be turned to face upon arrival."
            }
        },
        "llTeleportAgentGlobalCoords": {
            "desc": "Teleports an agent to the RegionPosition local coordinates within a region which is specified by the GlobalPosition global coordinates. The agent lands facing the position defined by LookAtPoint local coordinates.\\nRequires the PERMISSION_TELEPORT permission. This function can only teleport the owner of the object.",
            "arg_numb": 4,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": "UUID of avatar."
            },
            "arg_1": {
                "name": "GlobalPosition",
                "type": "vector",
                "desc": "Global coordinates of the destination region. Can be retrieved by using llRequestSimulatorData(region_name, DATA_SIM_POS)."
            },
            "arg_2": {
                "name": "RegionPosition",
                "type": "vector",
                "desc": "The position within the target region to teleport the avatar to, if no landmark was provided."
            },
            "arg_3": {
                "name": "LookAtPoint",
                "type": "vector",
                "desc": "The position within the target region that the avatar should be turned to face upon arrival."
            }
        },
        "llTeleportAgentHome": {
            "desc": "Teleport agent over the owner&#39;s land to agent&#39;s home location.",
            "arg_numb": 1,
            "energy": 100,
            "sleep": 5,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llTextBox": {
            "desc": "Opens a dialog for the specified avatar with message Text, which contains a text box for input. Any text that is entered is said on the specified Channel (as if by the avatar) when the &#34;OK&#34; button is clicked.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 1,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Text",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "Channel",
                "type": "integer",
                "desc": ""
            }
        },
        "llToLower": {
            "desc": "Returns a string that is Text with all lower-case characters.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llToUpper": {
            "desc": "Returns a string that is Text with all upper-case characters.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llTransferLindenDollars": {
            "desc": "Transfer Amount of linden dollars (L$) from script owner to AvatarID. Returns a key to a corresponding transaction_result event for the success of the transfer.\\nAttempts to send the amount of money to the specified avatar, and trigger a transaction_result event identified by the returned key.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            },
            "arg_1": {
                "name": "Amount",
                "type": "integer",
                "desc": ""
            }
        },
        "llTriggerSound": {
            "desc": "Plays Sound at Volume (0.0 - 1.0), centered at but not attached to object.\\nThere is no limit to the number of triggered sounds which can be generated by an object, and calling llTriggerSound does not affect the attached sounds created by llPlaySound and llLoopSound. This is very useful for things like collision noises, explosions, etc. There is no way to stop or alter the volume of a sound triggered by this function.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Volume",
                "type": "float",
                "desc": ""
            }
        },
        "llTriggerSoundLimited": {
            "desc": "Plays Sound at Volume (0.0 - 1.0), centered at but not attached to object, limited to axis-aligned bounding box defined by vectors top-north-east (TNE) and bottom-south-west (BSW).\\nThere is no limit to the number of triggered sounds which can be generated by an object, and calling llTriggerSound does not affect the attached sounds created by llPlaySound and llLoopSound. This is very useful for things like collision noises, explosions, etc. There is no way to stop or alter the volume of a sound triggered by this function.",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Sound",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Volume",
                "type": "float",
                "desc": ""
            },
            "arg_2": {
                "name": "TNE",
                "type": "vector",
                "desc": ""
            },
            "arg_3": {
                "name": "BSW",
                "type": "vector",
                "desc": ""
            }
        },
        "llUnSit": {
            "desc": "If agent identified by AvatarID is sitting on the object the script is attached to or is over land owned by the objects owner, the agent is forced to stand up.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "AvatarID",
                "type": "key",
                "desc": ""
            }
        },
        "llUnescapeURL": {
            "desc": "Returns the string that is the URL unescaped, replacing &#34;%20&#34; with spaces, etc., version of URL.\\nThis function can output raw UTF-8 strings.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "URL",
                "type": "string",
                "desc": ""
            }
        },
        "llUpdateCharacter": {
            "desc": "Updates settings for a pathfinding character.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Options",
                "type": "list",
                "desc": "Character configuration options. Takes the same constants as llCreateCharacter()."
            }
        },
        "llUpdateKeyValue": {
            "desc": "\n               Starts an asychronous transaction to update the value associated with the key given. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is a two element commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the value associated with the key. If Checked is 1 the existing value in the data store must match the OriginalValue passed or XP_ERROR_RETRY_UPDATE will be returned. If Checked is 0 the key will be created if necessary.\n            ",
            "arg_numb": 4,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "key",
            "arg_0": {
                "name": "Key",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Value",
                "type": "string",
                "desc": ""
            },
            "arg_2": {
                "name": "Checked",
                "type": "integer",
                "desc": ""
            },
            "arg_3": {
                "name": "OriginalValue",
                "type": "string",
                "desc": ""
            }
        },
        "llVecDist": {
            "desc": "Returns the distance between Location1 and Location2.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Location1",
                "type": "vector",
                "desc": ""
            },
            "arg_1": {
                "name": "Location2",
                "type": "vector",
                "desc": ""
            }
        },
        "llVecMag": {
            "desc": "Returns the magnitude of the vector.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Vector",
                "type": "vector",
                "desc": ""
            }
        },
        "llVecNorm": {
            "desc": "Returns normalized vector.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Vector",
                "type": "vector",
                "desc": ""
            }
        },
        "llVolumeDetect": {
            "desc": "If DetectEnabled = TRUE, object becomes phantom but triggers collision_start and collision_end events when other objects start and stop interpenetrating.\\nIf another object (including avatars) interpenetrates it, it will get a collision_start event.\\nWhen an object stops interpenetrating, a collision_end event is generated. While the other is inter-penetrating, collision events are NOT generated.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "DetectEnabled",
                "type": "integer",
                "desc": "TRUE enables, FALSE disables."
            }
        },
        "llWanderWithin": {
            "desc": "Wander within a specified volume.\\nSets a character to wander about a central spot within a specified area.",
            "arg_numb": 3,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Origin",
                "type": "vector",
                "desc": "Central point to wander about."
            },
            "arg_1": {
                "name": "Area",
                "type": "vector",
                "desc": "Half-extents of an area the character may wander within. (i.e., it can wander from the specified origin by up to +/-Distance.x in x, +/-Distance.y in y, etc.)"
            },
            "arg_2": {
                "name": "Options",
                "type": "list",
                "desc": "No options available at this time."
            }
        },
        "llWater": {
            "desc": "Returns the water height below the object position + Offset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "float",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llWhisper": {
            "desc": "Whispers Text on Channel.\\nThis chat method has a range of 10m radius.\\nPUBLIC_CHANNEL is the public chat channel that all avatars see as chat text. DEBUG_CHANNEL is the script debug channel, and is also visible to nearby avatars. All other channels are are not sent to avatars, but may be used to communicate with scripts.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "void",
            "arg_0": {
                "name": "Channel",
                "type": "integer",
                "desc": ""
            },
            "arg_1": {
                "name": "Text",
                "type": "string",
                "desc": ""
            }
        },
        "llWind": {
            "desc": "Returns the wind velocity at the object position + Offset.",
            "arg_numb": 1,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "Offset",
                "type": "vector",
                "desc": ""
            }
        },
        "llXorBase64": {
            "desc": "Performs an exclusive OR on two Base64 strings and returns a Base64 string. Text2 repeats if it is shorter than Text1.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text1",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Text2",
                "type": "string",
                "desc": ""
            }
        },
        "llXorBase64Strings": {
            "desc": "Deprecated: Please use llXorBase64 instead.\\nIncorrectly performs an exclusive OR on two Base64 strings and returns a Base64 string. Text2 repeats if it is shorter than Text1.\\nRetained for backwards compatibility.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0.3,
            "deprecated": true,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text1",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Text2",
                "type": "string",
                "desc": ""
            }
        },
        "llXorBase64StringsCorrect": {
            "desc": "Deprecated: Please use llXorBase64 instead.\\nCorrectly (unless nulls are present) performs an exclusive OR on two Base64 strings and returns a Base64 string.\\nText2 repeats if it is shorter than Text1.",
            "arg_numb": 2,
            "energy": 10,
            "sleep": 0,
            "deprecated": true,
            "god-mode": false,
            "type": "string",
            "arg_0": {
                "name": "Text1",
                "type": "string",
                "desc": ""
            },
            "arg_1": {
                "name": "Text2",
                "type": "string",
                "desc": ""
            }
        },
        "llsRGB2Linear": {
            "desc": "Converts a color from the sRGB to the linear colorspace.",
            "arg_numb": 1,
            "energy": 0,
            "sleep": 0,
            "deprecated": false,
            "god-mode": false,
            "type": "vector",
            "arg_0": {
                "name": "srgb",
                "type": "vector",
                "desc": "A color in the sRGB colorspace."
            }
        }
    },
    "type": [
        "void",
        "float",
        "integer",
        "key",
        "list",
        "quaternion",
        "rotation",
        "string",
        "vector"
    ]
}
